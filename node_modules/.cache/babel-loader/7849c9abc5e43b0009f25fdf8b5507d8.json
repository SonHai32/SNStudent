{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst NullDependency = require(\"./NullDependency\");\n\nclass RequireEnsureDependency extends NullDependency {\n  constructor(block) {\n    super();\n    this.block = block;\n  }\n\n  get type() {\n    return \"require.ensure\";\n  }\n\n}\n\nRequireEnsureDependency.Template = class RequireEnsureDependencyTemplate {\n  apply(dep, source, runtime) {\n    const depBlock = dep.block;\n    const promise = runtime.blockPromise({\n      block: depBlock,\n      message: \"require.ensure\"\n    });\n    const errorCallbackExists = depBlock.expr.arguments.length === 4 || !depBlock.chunkName && depBlock.expr.arguments.length === 3;\n    const startBlock = \"\".concat(promise, \".then((\");\n    const middleBlock = \").bind(null, __webpack_require__)).catch(\";\n    const endBlock = \").bind(null, __webpack_require__)).catch(\".concat(runtime.onError(), \")\");\n    source.replace(depBlock.expr.range[0], depBlock.expr.arguments[1].range[0] - 1, startBlock);\n\n    if (errorCallbackExists) {\n      source.replace(depBlock.expr.arguments[1].range[1], depBlock.expr.arguments[2].range[0] - 1, middleBlock);\n      source.replace(depBlock.expr.arguments[2].range[1], depBlock.expr.range[1] - 1, \")\");\n    } else {\n      source.replace(depBlock.expr.arguments[1].range[1], depBlock.expr.range[1] - 1, endBlock);\n    }\n  }\n\n};\nmodule.exports = RequireEnsureDependency;","map":null,"metadata":{},"sourceType":"script"}