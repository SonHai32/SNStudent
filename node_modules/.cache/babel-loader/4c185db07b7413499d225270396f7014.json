{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst GraphHelpers = require(\"../GraphHelpers\");\n\nclass EnsureChunkConditionsPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"EnsureChunkConditionsPlugin\", compilation => {\n      const handler = chunks => {\n        let changed = false;\n\n        for (const module of compilation.modules) {\n          if (!module.chunkCondition) continue;\n          const sourceChunks = new Set();\n          const chunkGroups = new Set();\n\n          for (const chunk of module.chunksIterable) {\n            if (!module.chunkCondition(chunk)) {\n              sourceChunks.add(chunk);\n\n              for (const group of chunk.groupsIterable) {\n                chunkGroups.add(group);\n              }\n            }\n          }\n\n          if (sourceChunks.size === 0) continue;\n          const targetChunks = new Set();\n\n          chunkGroupLoop: for (const chunkGroup of chunkGroups) {\n            // Can module be placed in a chunk of this group?\n            for (const chunk of chunkGroup.chunks) {\n              if (module.chunkCondition(chunk)) {\n                targetChunks.add(chunk);\n                continue chunkGroupLoop;\n              }\n            } // We reached the entrypoint: fail\n\n\n            if (chunkGroup.isInitial()) {\n              throw new Error(\"Cannot fullfil chunk condition of \" + module.identifier());\n            } // Try placing in all parents\n\n\n            for (const group of chunkGroup.parentsIterable) {\n              chunkGroups.add(group);\n            }\n          }\n\n          for (const sourceChunk of sourceChunks) {\n            GraphHelpers.disconnectChunkAndModule(sourceChunk, module);\n          }\n\n          for (const targetChunk of targetChunks) {\n            GraphHelpers.connectChunkAndModule(targetChunk, module);\n          }\n        }\n\n        if (changed) return true;\n      };\n\n      compilation.hooks.optimizeChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n      compilation.hooks.optimizeExtractedChunksBasic.tap(\"EnsureChunkConditionsPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = EnsureChunkConditionsPlugin;","map":null,"metadata":{},"sourceType":"script"}