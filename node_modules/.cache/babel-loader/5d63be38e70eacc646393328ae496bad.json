{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"tapable\"),\n      Tapable = _require.Tapable,\n      SyncWaterfallHook = _require.SyncWaterfallHook,\n      SyncHook = _require.SyncHook;\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./Module\")} Module */\n\n\nmodule.exports = class ModuleTemplate extends Tapable {\n  constructor(runtimeTemplate, type) {\n    super();\n    this.runtimeTemplate = runtimeTemplate;\n    this.type = type;\n    this.hooks = {\n      content: new SyncWaterfallHook([\"source\", \"module\", \"options\", \"dependencyTemplates\"]),\n      module: new SyncWaterfallHook([\"source\", \"module\", \"options\", \"dependencyTemplates\"]),\n      render: new SyncWaterfallHook([\"source\", \"module\", \"options\", \"dependencyTemplates\"]),\n      package: new SyncWaterfallHook([\"source\", \"module\", \"options\", \"dependencyTemplates\"]),\n      hash: new SyncHook([\"hash\"])\n    };\n  }\n  /**\n   * @param {Module} module the module\n   * @param {TODO} dependencyTemplates templates for dependencies\n   * @param {TODO} options render options\n   * @returns {Source} the source\n   */\n\n\n  render(module, dependencyTemplates, options) {\n    try {\n      const moduleSource = module.source(dependencyTemplates, this.runtimeTemplate, this.type);\n      const moduleSourcePostContent = this.hooks.content.call(moduleSource, module, options, dependencyTemplates);\n      const moduleSourcePostModule = this.hooks.module.call(moduleSourcePostContent, module, options, dependencyTemplates);\n      const moduleSourcePostRender = this.hooks.render.call(moduleSourcePostModule, module, options, dependencyTemplates);\n      return this.hooks.package.call(moduleSourcePostRender, module, options, dependencyTemplates);\n    } catch (e) {\n      e.message = \"\".concat(module.identifier(), \"\\n\").concat(e.message);\n      throw e;\n    }\n  }\n\n  updateHash(hash) {\n    hash.update(\"1\");\n    this.hooks.hash.call(hash);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}