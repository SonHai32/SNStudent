{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      ConcatSource = _require.ConcatSource;\n\nconst Template = require(\"./Template\");\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n/**\n * @typedef {Object} AmdMainTemplatePluginOptions\n * @param {string=} name the library name\n * @property {boolean=} requireAsWrapper\n */\n\n\nclass AmdMainTemplatePlugin {\n  /**\n   * @param {AmdMainTemplatePluginOptions} options the plugin options\n   */\n  constructor(options) {\n    if (!options || typeof options === \"string\") {\n      this.name = options;\n      this.requireAsWrapper = false;\n    } else {\n      this.name = options.name;\n      this.requireAsWrapper = options.requireAsWrapper;\n    }\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  apply(compilation) {\n    const mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n    const onRenderWithEntry = (source, chunk, hash) => {\n      const externals = chunk.getModules().filter(m => m.external);\n      const externalsDepsArray = JSON.stringify(externals.map(m => typeof m.request === \"object\" ? m.request.amd : m.request));\n      const externalsArguments = externals.map(m => \"__WEBPACK_EXTERNAL_MODULE_\".concat(Template.toIdentifier(\"\".concat(m.id)), \"__\")).join(\", \");\n\n      if (this.requireAsWrapper) {\n        return new ConcatSource(\"require(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n      } else if (this.name) {\n        const name = mainTemplate.getAssetPath(this.name, {\n          hash,\n          chunk\n        });\n        return new ConcatSource(\"define(\".concat(JSON.stringify(name), \", \").concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n      } else if (externalsArguments) {\n        return new ConcatSource(\"define(\".concat(externalsDepsArray, \", function(\").concat(externalsArguments, \") { return \"), source, \"});\");\n      } else {\n        return new ConcatSource(\"define(function() { return \", source, \"});\");\n      }\n    };\n\n    for (const template of [mainTemplate, chunkTemplate]) {\n      template.hooks.renderWithEntry.tap(\"AmdMainTemplatePlugin\", onRenderWithEntry);\n    }\n\n    mainTemplate.hooks.globalHashPaths.tap(\"AmdMainTemplatePlugin\", paths => {\n      if (this.name) {\n        paths.push(this.name);\n      }\n\n      return paths;\n    });\n    mainTemplate.hooks.hash.tap(\"AmdMainTemplatePlugin\", hash => {\n      hash.update(\"exports amd\");\n\n      if (this.name) {\n        hash.update(this.name);\n      }\n    });\n  }\n\n}\n\nmodule.exports = AmdMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}