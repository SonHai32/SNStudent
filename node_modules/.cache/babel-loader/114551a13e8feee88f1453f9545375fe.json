{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"tapable\"),\n      SyncWaterfallHook = _require.SyncWaterfallHook;\n\nconst Template = require(\"../Template\");\n\nclass JsonpMainTemplatePlugin {\n  apply(mainTemplate) {\n    const needChunkOnDemandLoadingCode = chunk => {\n      for (const chunkGroup of chunk.groupsIterable) {\n        if (chunkGroup.getNumberOfChildren() > 0) return true;\n      }\n\n      return false;\n    };\n\n    const needChunkLoadingCode = chunk => {\n      for (const chunkGroup of chunk.groupsIterable) {\n        if (chunkGroup.chunks.length > 1) return true;\n        if (chunkGroup.getNumberOfChildren() > 0) return true;\n      }\n\n      return false;\n    };\n\n    const needEntryDeferringCode = chunk => {\n      for (const chunkGroup of chunk.groupsIterable) {\n        if (chunkGroup.chunks.length > 1) return true;\n      }\n\n      return false;\n    };\n\n    const needPrefetchingCode = chunk => {\n      const allPrefetchChunks = chunk.getChildIdsByOrdersMap(true).prefetch;\n      return allPrefetchChunks && Object.keys(allPrefetchChunks).length;\n    }; // TODO webpack 5, no adding to .hooks, use WeakMap and static methods\n\n\n    [\"jsonpScript\", \"linkPreload\", \"linkPrefetch\"].forEach(hook => {\n      if (!mainTemplate.hooks[hook]) {\n        mainTemplate.hooks[hook] = new SyncWaterfallHook([\"source\", \"chunk\", \"hash\"]);\n      }\n    });\n\n    const getScriptSrcPath = (hash, chunk, chunkIdExpression) => {\n      const chunkFilename = mainTemplate.outputOptions.chunkFilename;\n      const chunkMaps = chunk.getChunkMaps();\n      return mainTemplate.getAssetPath(JSON.stringify(chunkFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n        chunk: {\n          id: \"\\\" + \".concat(chunkIdExpression, \" + \\\"\"),\n          hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[\").concat(chunkIdExpression, \"] + \\\"\"),\n\n          hashWithLength(length) {\n            const shortChunkHashMap = Object.create(null);\n\n            for (const chunkId of Object.keys(chunkMaps.hash)) {\n              if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n              }\n            }\n\n            return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[\").concat(chunkIdExpression, \"] + \\\"\");\n          },\n\n          name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[\").concat(chunkIdExpression, \"]||\").concat(chunkIdExpression, \") + \\\"\"),\n          contentHash: {\n            javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[\").concat(chunkIdExpression, \"] + \\\"\")\n          },\n          contentHashWithLength: {\n            javascript: length => {\n              const shortContentHashMap = {};\n              const contentHash = chunkMaps.contentHash.javascript;\n\n              for (const chunkId of Object.keys(contentHash)) {\n                if (typeof contentHash[chunkId] === \"string\") {\n                  shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[\").concat(chunkIdExpression, \"] + \\\"\");\n            }\n          }\n        },\n        contentHashType: \"javascript\"\n      });\n    };\n\n    mainTemplate.hooks.localVars.tap(\"JsonpMainTemplatePlugin\", (source, chunk, hash) => {\n      const extraCode = [];\n\n      if (needChunkLoadingCode(chunk)) {\n        extraCode.push(\"\", \"// object to store loaded and loading chunks\", \"// undefined = chunk not loaded, null = chunk preloaded/prefetched\", \"// Promise = chunk loading, 0 = chunk loaded\", \"var installedChunks = {\", Template.indent(chunk.ids.map(id => \"\".concat(JSON.stringify(id), \": 0\")).join(\",\\n\")), \"};\", \"\", needEntryDeferringCode(chunk) ? needPrefetchingCode(chunk) ? \"var deferredModules = [], deferredPrefetch = [];\" : \"var deferredModules = [];\" : \"\");\n      }\n\n      if (needChunkOnDemandLoadingCode(chunk)) {\n        extraCode.push(\"\", \"// script path function\", \"function jsonpScriptSrc(chunkId) {\", Template.indent([\"return \".concat(mainTemplate.requireFn, \".p + \").concat(getScriptSrcPath(hash, chunk, \"chunkId\"))]), \"}\");\n      }\n\n      if (extraCode.length === 0) return source;\n      return Template.asString([source, ...extraCode]);\n    });\n    mainTemplate.hooks.jsonpScript.tap(\"JsonpMainTemplatePlugin\", (_, chunk, hash) => {\n      const crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n      const chunkLoadTimeout = mainTemplate.outputOptions.chunkLoadTimeout;\n      const jsonpScriptType = mainTemplate.outputOptions.jsonpScriptType;\n      return Template.asString([\"var script = document.createElement('script');\", \"var onScriptComplete;\", jsonpScriptType ? \"script.type = \".concat(JSON.stringify(jsonpScriptType), \";\") : \"\", \"script.charset = 'utf-8';\", \"script.timeout = \".concat(chunkLoadTimeout / 1000, \";\"), \"if (\".concat(mainTemplate.requireFn, \".nc) {\"), Template.indent(\"script.setAttribute(\\\"nonce\\\", \".concat(mainTemplate.requireFn, \".nc);\")), \"}\", \"script.src = jsonpScriptSrc(chunkId);\", crossOriginLoading ? Template.asString([\"if (script.src.indexOf(window.location.origin + '/') !== 0) {\", Template.indent(\"script.crossOrigin = \".concat(JSON.stringify(crossOriginLoading), \";\")), \"}\"]) : \"\", \"// create error before stack unwound to get useful stacktrace later\", \"var error = new Error();\", \"onScriptComplete = function (event) {\", Template.indent([\"// avoid mem leaks in IE.\", \"script.onerror = script.onload = null;\", \"clearTimeout(timeout);\", \"var chunk = installedChunks[chunkId];\", \"if(chunk !== 0) {\", Template.indent([\"if(chunk) {\", Template.indent([\"var errorType = event && (event.type === 'load' ? 'missing' : event.type);\", \"var realSrc = event && event.target && event.target.src;\", \"error.message = 'Loading chunk ' + chunkId + ' failed.\\\\n(' + errorType + ': ' + realSrc + ')';\", \"error.name = 'ChunkLoadError';\", \"error.type = errorType;\", \"error.request = realSrc;\", \"chunk[1](error);\"]), \"}\", \"installedChunks[chunkId] = undefined;\"]), \"}\"]), \"};\", \"var timeout = setTimeout(function(){\", Template.indent([\"onScriptComplete({ type: 'timeout', target: script });\"]), \"}, \".concat(chunkLoadTimeout, \");\"), \"script.onerror = script.onload = onScriptComplete;\"]);\n    });\n    mainTemplate.hooks.linkPreload.tap(\"JsonpMainTemplatePlugin\", (_, chunk, hash) => {\n      const crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n      const jsonpScriptType = mainTemplate.outputOptions.jsonpScriptType;\n      return Template.asString([\"var link = document.createElement('link');\", jsonpScriptType ? \"link.type = \".concat(JSON.stringify(jsonpScriptType), \";\") : \"\", \"link.charset = 'utf-8';\", \"if (\".concat(mainTemplate.requireFn, \".nc) {\"), Template.indent(\"link.setAttribute(\\\"nonce\\\", \".concat(mainTemplate.requireFn, \".nc);\")), \"}\", 'link.rel = \"preload\";', 'link.as = \"script\";', \"link.href = jsonpScriptSrc(chunkId);\", crossOriginLoading ? Template.asString([\"if (link.href.indexOf(window.location.origin + '/') !== 0) {\", Template.indent(\"link.crossOrigin = \".concat(JSON.stringify(crossOriginLoading), \";\")), \"}\"]) : \"\"]);\n    });\n    mainTemplate.hooks.linkPrefetch.tap(\"JsonpMainTemplatePlugin\", (_, chunk, hash) => {\n      const crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n      return Template.asString([\"var link = document.createElement('link');\", crossOriginLoading ? \"link.crossOrigin = \".concat(JSON.stringify(crossOriginLoading), \";\") : \"\", \"if (\".concat(mainTemplate.requireFn, \".nc) {\"), Template.indent(\"link.setAttribute(\\\"nonce\\\", \".concat(mainTemplate.requireFn, \".nc);\")), \"}\", 'link.rel = \"prefetch\";', 'link.as = \"script\";', \"link.href = jsonpScriptSrc(chunkId);\"]);\n    });\n    mainTemplate.hooks.requireEnsure.tap(\"JsonpMainTemplatePlugin load\", (source, chunk, hash) => {\n      return Template.asString([source, \"\", \"// JSONP chunk loading for javascript\", \"\", \"var installedChunkData = installedChunks[chunkId];\", 'if(installedChunkData !== 0) { // 0 means \"already installed\".', Template.indent([\"\", '// a Promise means \"currently loading\".', \"if(installedChunkData) {\", Template.indent([\"promises.push(installedChunkData[2]);\"]), \"} else {\", Template.indent([\"// setup Promise in chunk cache\", \"var promise = new Promise(function(resolve, reject) {\", Template.indent([\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\"]), \"});\", \"promises.push(installedChunkData[2] = promise);\", \"\", \"// start chunk loading\", mainTemplate.hooks.jsonpScript.call(\"\", chunk, hash), \"document.head.appendChild(script);\"]), \"}\"]), \"}\"]);\n    });\n    mainTemplate.hooks.requireEnsure.tap({\n      name: \"JsonpMainTemplatePlugin preload\",\n      stage: 10\n    }, (source, chunk, hash) => {\n      const chunkMap = chunk.getChildIdsByOrdersMap().preload;\n      if (!chunkMap || Object.keys(chunkMap).length === 0) return source;\n      return Template.asString([source, \"\", \"// chunk preloadng for javascript\", \"\", \"var chunkPreloadMap = \".concat(JSON.stringify(chunkMap, null, \"\\t\"), \";\"), \"\", \"var chunkPreloadData = chunkPreloadMap[chunkId];\", \"if(chunkPreloadData) {\", Template.indent([\"chunkPreloadData.forEach(function(chunkId) {\", Template.indent([\"if(installedChunks[chunkId] === undefined) {\", Template.indent([\"installedChunks[chunkId] = null;\", mainTemplate.hooks.linkPreload.call(\"\", chunk, hash), \"document.head.appendChild(link);\"]), \"}\"]), \"});\"]), \"}\"]);\n    });\n    mainTemplate.hooks.requireExtensions.tap(\"JsonpMainTemplatePlugin\", (source, chunk) => {\n      if (!needChunkOnDemandLoadingCode(chunk)) return source;\n      return Template.asString([source, \"\", \"// on error function for async loading\", \"\".concat(mainTemplate.requireFn, \".oe = function(err) { console.error(err); throw err; };\")]);\n    });\n    mainTemplate.hooks.bootstrap.tap(\"JsonpMainTemplatePlugin\", (source, chunk, hash) => {\n      if (needChunkLoadingCode(chunk)) {\n        const withDefer = needEntryDeferringCode(chunk);\n        const withPrefetch = needPrefetchingCode(chunk);\n        return Template.asString([source, \"\", \"// install a JSONP callback for chunk loading\", \"function webpackJsonpCallback(data) {\", Template.indent([\"var chunkIds = data[0];\", \"var moreModules = data[1];\", withDefer ? \"var executeModules = data[2];\" : \"\", withPrefetch ? \"var prefetchChunks = data[3] || [];\" : \"\", '// add \"moreModules\" to the modules object,', '// then flag all \"chunkIds\" as loaded and fire callback', \"var moduleId, chunkId, i = 0, resolves = [];\", \"for(;i < chunkIds.length; i++) {\", Template.indent([\"chunkId = chunkIds[i];\", \"if(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\", Template.indent(\"resolves.push(installedChunks[chunkId][0]);\"), \"}\", \"installedChunks[chunkId] = 0;\"]), \"}\", \"for(moduleId in moreModules) {\", Template.indent([\"if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\"]), \"}\", \"if(parentJsonpFunction) parentJsonpFunction(data);\", withPrefetch ? withDefer ? \"deferredPrefetch.push.apply(deferredPrefetch, prefetchChunks);\" : Template.asString([\"// chunk prefetching for javascript\", \"prefetchChunks.forEach(function(chunkId) {\", Template.indent([\"if(installedChunks[chunkId] === undefined) {\", Template.indent([\"installedChunks[chunkId] = null;\", mainTemplate.hooks.linkPrefetch.call(\"\", chunk, hash), \"document.head.appendChild(link);\"]), \"}\"]), \"});\"]) : \"\", \"while(resolves.length) {\", Template.indent(\"resolves.shift()();\"), \"}\", withDefer ? Template.asString([\"\", \"// add entry modules from loaded chunk to deferred list\", \"deferredModules.push.apply(deferredModules, executeModules || []);\", \"\", \"// run deferred modules when all chunks ready\", \"return checkDeferredModules();\"]) : \"\"]), \"};\", withDefer ? Template.asString([\"function checkDeferredModules() {\", Template.indent([\"var result;\", \"for(var i = 0; i < deferredModules.length; i++) {\", Template.indent([\"var deferredModule = deferredModules[i];\", \"var fulfilled = true;\", \"for(var j = 1; j < deferredModule.length; j++) {\", Template.indent([\"var depId = deferredModule[j];\", \"if(installedChunks[depId] !== 0) fulfilled = false;\"]), \"}\", \"if(fulfilled) {\", Template.indent([\"deferredModules.splice(i--, 1);\", \"result = \" + mainTemplate.requireFn + \"(\" + mainTemplate.requireFn + \".s = deferredModule[0]);\"]), \"}\"]), \"}\", withPrefetch ? Template.asString([\"if(deferredModules.length === 0) {\", Template.indent([\"// chunk prefetching for javascript\", \"deferredPrefetch.forEach(function(chunkId) {\", Template.indent([\"if(installedChunks[chunkId] === undefined) {\", Template.indent([\"installedChunks[chunkId] = null;\", mainTemplate.hooks.linkPrefetch.call(\"\", chunk, hash), \"document.head.appendChild(link);\"]), \"}\"]), \"});\", \"deferredPrefetch.length = 0;\"]), \"}\"]) : \"\", \"return result;\"]), \"}\"]) : \"\"]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.beforeStartup.tap(\"JsonpMainTemplatePlugin\", (source, chunk, hash) => {\n      if (needChunkLoadingCode(chunk)) {\n        var jsonpFunction = mainTemplate.outputOptions.jsonpFunction;\n        var globalObject = mainTemplate.outputOptions.globalObject;\n        return Template.asString([\"var jsonpArray = \".concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] = \").concat(globalObject, \"[\").concat(JSON.stringify(jsonpFunction), \"] || [];\"), \"var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\", \"jsonpArray.push = webpackJsonpCallback;\", \"jsonpArray = jsonpArray.slice();\", \"for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\", \"var parentJsonpFunction = oldJsonpFunction;\", \"\", source]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.afterStartup.tap(\"JsonpMainTemplatePlugin\", (source, chunk, hash) => {\n      const prefetchChunks = chunk.getChildIdsByOrders().prefetch;\n\n      if (needChunkLoadingCode(chunk) && prefetchChunks && prefetchChunks.length) {\n        return Template.asString([source, \"webpackJsonpCallback([[], {}, 0, \".concat(JSON.stringify(prefetchChunks), \"]);\")]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.startup.tap(\"JsonpMainTemplatePlugin\", (source, chunk, hash) => {\n      if (needEntryDeferringCode(chunk)) {\n        if (chunk.hasEntryModule()) {\n          const entries = [chunk.entryModule].filter(Boolean).map(m => [m.id].concat(Array.from(chunk.groupsIterable)[0].chunks.filter(c => c !== chunk).map(c => c.id)));\n          return Template.asString([\"// add entry module to deferred list\", \"deferredModules.push(\".concat(entries.map(e => JSON.stringify(e)).join(\", \"), \");\"), \"// run deferred modules when ready\", \"return checkDeferredModules();\"]);\n        } else {\n          return Template.asString([\"// run deferred modules from other chunks\", \"checkDeferredModules();\"]);\n        }\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.hotBootstrap.tap(\"JsonpMainTemplatePlugin\", (source, chunk, hash) => {\n      const globalObject = mainTemplate.outputOptions.globalObject;\n      const hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n      const hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n      const crossOriginLoading = mainTemplate.outputOptions.crossOriginLoading;\n      const hotUpdateFunction = mainTemplate.outputOptions.hotUpdateFunction;\n      const currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n        chunk: {\n          id: '\" + chunkId + \"'\n        }\n      });\n      const currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\")\n      });\n      const runtimeSource = Template.getFunctionContent(require(\"./JsonpMainTemplate.runtime\")).replace(/\\/\\/\\$semicolon/g, \";\").replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$crossOriginLoading\\$/g, crossOriginLoading ? JSON.stringify(crossOriginLoading) : \"null\").replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename).replace(/\\$hash\\$/g, JSON.stringify(hash));\n      return \"\".concat(source, \"\\nfunction hotDisposeChunk(chunkId) {\\n\\tdelete installedChunks[chunkId];\\n}\\nvar parentHotUpdateCallback = \").concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"];\\n\").concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"] = \").concat(runtimeSource);\n    });\n    mainTemplate.hooks.hash.tap(\"JsonpMainTemplatePlugin\", hash => {\n      hash.update(\"jsonp\");\n      hash.update(\"6\");\n    });\n  }\n\n}\n\nmodule.exports = JsonpMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}