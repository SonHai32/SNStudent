{"ast":null,"code":"import { get } from \"http\";\nexport default class ImageResize {\n  constructor(imageUrl, maxWidth) {\n    this._maxWidth = maxWidth;\n    this._canvasUrl = null;\n\n    let imageResize = () => {\n      let tempImg = new Image();\n      tempImg.src = imageUrl;\n\n      let createCanvas = (width, height, img) => {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        return canvas.toDataURL();\n      };\n\n      tempImg.onload = () => {\n        let tempW = tempImg.width;\n        let tempH = tempImg.height;\n        let min = tempW >= tempH ? tempH : tempW;\n        maxWidth = maxWidth || min;\n\n        if (tempW <= maxWidth && tempH <= maxWidth) {\n          createCanvas(tempW, tempH, tempImg);\n        }\n\n        let startY = 0;\n\n        if (min !== tempH) {\n          startY = Math.round(tempH / 2 - min / 2);\n        }\n\n        let startX = 0;\n\n        if (min !== tempW) {\n          startX = Math.round(tempW / 2 - min / 2);\n        }\n\n        let finalImage = new Image();\n        finalImage.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n\n        finalImage.onload = () => {\n          this._canvasUrl = createCanvas(finalImage, maxWidth, maxWidth);\n        };\n      };\n    };\n\n    let getCanvas = () => {\n      return this._canvasUrl;\n    };\n\n    let getImagePortion = (imgObj, newWidth, newHeight, startX, startY, ratio) => {\n      let tnCanvas = document.createElement('canvas');\n      let tnContext = tnCanvas.getContext('2d');\n      tnCanvas.width = newWidth;\n      tnCanvas.height = newHeight;\n      let bufferCanvas = document.createElement('canvas');\n      let bufferContext = bufferCanvas.getContext('2d');\n      bufferCanvas.width = imgObj.width;\n      bufferCanvas.height = imgObj.height;\n      bufferContext.drawImage(imgObj, 0, 0);\n      tnContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight);\n      return tnCanvas.toDataURL();\n    };\n  }\n\n}","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/ImageResize.js"],"names":["get","ImageResize","constructor","imageUrl","maxWidth","_maxWidth","_canvasUrl","imageResize","tempImg","Image","src","createCanvas","width","height","img","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","onload","tempW","tempH","min","startY","Math","round","startX","finalImage","getImagePortion","getCanvas","imgObj","newWidth","newHeight","ratio","tnCanvas","tnContext","bufferCanvas","bufferContext"],"mappings":"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","sourcesContent":["import {get } from \"http\";\n\nexport default class ImageResize {\n    constructor(imageUrl, maxWidth) {\n        this._maxWidth = maxWidth;\n        this._canvasUrl = null\n\n        let imageResize = () => {\n\n\n            let tempImg = new Image();\n            tempImg.src = imageUrl;\n\n            let createCanvas = (width, height, img) => {\n                let canvas = document.createElement('canvas');\n                canvas.width = width;\n                canvas.height = height;\n                let ctx = canvas.getContext('2d');\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n                return canvas.toDataURL();\n            }\n\n            tempImg.onload = () => {\n                let tempW = tempImg.width;\n                let tempH = tempImg.height;\n                let min = tempW >= tempH ? tempH : tempW\n                maxWidth = maxWidth || min;\n\n                if (tempW <= maxWidth && tempH <= maxWidth) {\n                    createCanvas(tempW, tempH, tempImg)\n                }\n\n                let startY = 0;\n                if (min !== tempH) {\n                    startY = Math.round(tempH / 2 - (min / 2))\n                }\n                let startX = 0;\n                if (min !== tempW) {\n                    startX = Math.round(tempW / 2 - (min / 2))\n                }\n\n                let finalImage = new Image();\n                finalImage.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n\n                finalImage.onload = () => {\n\n                    this._canvasUrl = createCanvas(finalImage, maxWidth, maxWidth)\n                }\n\n\n\n            }\n\n        }\n\n        let getCanvas = () => {\n            return this._canvasUrl;\n        }\n\n\n\n        let getImagePortion = (imgObj, newWidth, newHeight, startX, startY, ratio) => {\n            let tnCanvas = document.createElement('canvas');\n            let tnContext = tnCanvas.getContext('2d');\n            tnCanvas.width = newWidth;\n            tnCanvas.height = newHeight;\n\n            let bufferCanvas = document.createElement('canvas');\n            let bufferContext = bufferCanvas.getContext('2d')\n            bufferCanvas.width = imgObj.width;\n            bufferCanvas.height = imgObj.height;\n\n            bufferContext.drawImage(imgObj, 0, 0);\n\n            tnContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight)\n            return tnCanvas.toDataURL();\n\n\n        }\n    }\n\n}"]},"metadata":{},"sourceType":"module"}