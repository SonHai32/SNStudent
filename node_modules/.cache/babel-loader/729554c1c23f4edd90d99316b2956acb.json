{"ast":null,"code":"// Usage:\n//    let firstArg = 'selectedLogoFile';                  //<input type=\"file\" id=\"selectedLogoFile\">\n//    let secondArg = 300;                                //300px\n//    let thirdArg = (dataUrl)=> console.log(dataUrl);    //(dataUrl) => document.getElementById('image-output').src = dataUrl;\n//\n//    this.image = new imageResizer(firstArg, secondArg, thirdArg);\n//\n// When uploaded file:\n//    var formData = new FormData();\n//    formData.append('files[0]', this.image.blob);\n//\n//    document.getElementById('image-output').src = this.image.dataUrl;\nexport default class imageSqResizer {\n  constructor(uploaderId, size, setDataUrlFunc) {\n    this._setDataUrlFunc = setDataUrlFunc;\n    this._size = size;\n    this._blob = null;\n    this._dataUrl = null;\n    this.resized(uploaderId, this._size);\n  } //get blob object\n\n\n  get blob() {\n    return this._blob;\n  } //get dataUrl\n\n\n  get dataUrl() {\n    return this._dataUrl;\n  } // resize\n\n\n  resized(file, maxWidth) {\n    let setDataUrlFunc = this._setDataUrlFunc || false;\n    let reader = new FileReader();\n\n    reader.onload = () => {\n      let tempImg = new Image();\n      tempImg.src = reader.result;\n\n      let createCanvas = (width, height, img) => {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        this._dataUrl = canvas.toDataURL();\n\n        if (setDataUrlFunc) {\n          setDataUrlFunc(canvas.toDataURL());\n        }\n\n        canvas.toBlob(blob => {\n          this._blob = blob;\n        });\n      };\n\n      tempImg.onload = () => {\n        // calc size\n        let tempW = tempImg.width;\n        let tempH = tempImg.height;\n        let min = tempW >= tempH ? tempH : tempW;\n        maxWidth = maxWidth || min;\n\n        if (tempH <= maxWidth && tempW <= maxWidth) {\n          createCanvas(tempW, tempH, tempImg);\n        }\n\n        let startY = 0;\n\n        if (min !== tempH) {\n          startY = Math.round(tempH / 2 - min / 2);\n        }\n\n        let startX = 0;\n\n        if (min !== tempW) {\n          startX = Math.round(tempW / 2 - min / 2);\n        }\n\n        let finalImg = new Image();\n        finalImg.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n\n        finalImg.onload = () => {\n          createCanvas(maxWidth, maxWidth, finalImg);\n        };\n      };\n    };\n\n    reader.readAsDataURL(file);\n  } //image crop\n\n\n  getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio) {\n    let tnCanvas = document.createElement('canvas');\n    let tnCanvasContext = tnCanvas.getContext('2d');\n    tnCanvas.width = newWidth;\n    tnCanvas.height = newHeight;\n    let bufferCanvas = document.createElement('canvas');\n    let bufferContext = bufferCanvas.getContext('2d');\n    bufferCanvas.width = imgObj.width;\n    bufferCanvas.height = imgObj.height;\n    bufferContext.drawImage(imgObj, 0, 0);\n    tnCanvasContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight);\n    return tnCanvas.toDataURL();\n  }\n\n}","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/image-square-resizer.js"],"names":["imageSqResizer","constructor","uploaderId","size","setDataUrlFunc","_setDataUrlFunc","_size","_blob","_dataUrl","resized","blob","dataUrl","file","maxWidth","reader","FileReader","onload","tempImg","Image","src","result","createCanvas","width","height","img","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","toBlob","tempW","tempH","min","startY","Math","round","startX","finalImg","getImagePortion","readAsDataURL","imgObj","newWidth","newHeight","ratio","tnCanvas","tnCanvasContext","bufferCanvas","bufferContext"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA,eAAe,MAAMA,cAAN,CAAqB;AAEhCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,IAAb,EAAmBC,cAAnB,EAAmC;AAE1C,SAAKC,eAAL,GAAuBD,cAAvB;AACA,SAAKE,KAAL,GAAaH,IAAb;AACA,SAAKI,KAAL,GAAa,IAAb;AACA,SAAKC,QAAL,GAAgB,IAAhB;AAEA,SAAKC,OAAL,CAAaP,UAAb,EAAyB,KAAKI,KAA9B;AACH,GAV+B,CAYhC;;;AACA,MAAII,IAAJ,GAAW;AAAE,WAAO,KAAKH,KAAZ;AAAoB,GAbD,CAc5B;;;AACJ,MAAII,OAAJ,GAAc;AAAE,WAAO,KAAKH,QAAZ;AAAuB,GAfP,CAiBhC;;;AACAC,EAAAA,OAAO,CAACG,IAAD,EAAOC,QAAP,EAAiB;AACpB,QAAIT,cAAc,GAAG,KAAKC,eAAL,IAAwB,KAA7C;AACA,QAAIS,MAAM,GAAG,IAAIC,UAAJ,EAAb;;AACAD,IAAAA,MAAM,CAACE,MAAP,GAAgB,MAAM;AAElB,UAAIC,OAAO,GAAG,IAAIC,KAAJ,EAAd;AACAD,MAAAA,OAAO,CAACE,GAAR,GAAcL,MAAM,CAACM,MAArB;;AAEA,UAAIC,YAAY,GAAG,CAACC,KAAD,EAAQC,MAAR,EAAgBC,GAAhB,KAAwB;AACvC,YAAIC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAb;AACAF,QAAAA,MAAM,CAACH,KAAP,GAAeA,KAAf;AACAG,QAAAA,MAAM,CAACF,MAAP,GAAgBA,MAAhB;AACA,YAAIK,GAAG,GAAGH,MAAM,CAACI,UAAP,CAAkB,IAAlB,CAAV;AACAD,QAAAA,GAAG,CAACE,SAAJ,CAAcN,GAAd,EAAmB,CAAnB,EAAsB,CAAtB,EAAyBC,MAAM,CAACH,KAAhC,EAAuCG,MAAM,CAACF,MAA9C;AACA,aAAKf,QAAL,GAAgBiB,MAAM,CAACM,SAAP,EAAhB;;AACA,YAAI3B,cAAJ,EAAoB;AAChBA,UAAAA,cAAc,CAACqB,MAAM,CAACM,SAAP,EAAD,CAAd;AACH;;AACDN,QAAAA,MAAM,CAACO,MAAP,CAAetB,IAAD,IAAU;AACpB,eAAKH,KAAL,GAAaG,IAAb;AACH,SAFD;AAGH,OAbD;;AAeAO,MAAAA,OAAO,CAACD,MAAR,GAAiB,MAAM;AAEnB;AACA,YAAIiB,KAAK,GAAGhB,OAAO,CAACK,KAApB;AACA,YAAIY,KAAK,GAAGjB,OAAO,CAACM,MAApB;AACA,YAAIY,GAAG,GAAGF,KAAK,IAAIC,KAAT,GAAiBA,KAAjB,GAAyBD,KAAnC;AACApB,QAAAA,QAAQ,GAAGA,QAAQ,IAAIsB,GAAvB;;AAEA,YAAID,KAAK,IAAIrB,QAAT,IAAqBoB,KAAK,IAAIpB,QAAlC,EAA4C;AACxCQ,UAAAA,YAAY,CAACY,KAAD,EAAQC,KAAR,EAAejB,OAAf,CAAZ;AACH;;AAED,YAAImB,MAAM,GAAG,CAAb;;AACA,YAAID,GAAG,KAAKD,KAAZ,EAAmB;AACfE,UAAAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWJ,KAAK,GAAG,CAAR,GAAaC,GAAG,GAAG,CAA9B,CAAT;AACH;;AACD,YAAII,MAAM,GAAG,CAAb;;AACA,YAAIJ,GAAG,KAAKF,KAAZ,EAAmB;AACfM,UAAAA,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWL,KAAK,GAAG,CAAR,GAAaE,GAAG,GAAG,CAA9B,CAAT;AACH;;AAED,YAAIK,QAAQ,GAAG,IAAItB,KAAJ,EAAf;AACAsB,QAAAA,QAAQ,CAACrB,GAAT,GAAe,KAAKsB,eAAL,CAAqBxB,OAArB,EAA8BkB,GAA9B,EAAmCA,GAAnC,EAAwCI,MAAxC,EAAgDH,MAAhD,EAAwD,CAAxD,CAAf;;AAEAI,QAAAA,QAAQ,CAACxB,MAAT,GAAkB,MAAM;AACpBK,UAAAA,YAAY,CAACR,QAAD,EAAWA,QAAX,EAAqB2B,QAArB,CAAZ;AACH,SAFD;AAGH,OA3BD;AA4BH,KAhDD;;AAiDA1B,IAAAA,MAAM,CAAC4B,aAAP,CAAqB9B,IAArB;AACH,GAvE+B,CAyEhC;;;AACA6B,EAAAA,eAAe,CAACE,MAAD,EAASC,QAAT,EAAmBC,SAAnB,EAA8BN,MAA9B,EAAsCH,MAAtC,EAA8CU,KAA9C,EAAqD;AAChE,QAAIC,QAAQ,GAAGrB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;AACA,QAAIqB,eAAe,GAAGD,QAAQ,CAAClB,UAAT,CAAoB,IAApB,CAAtB;AACAkB,IAAAA,QAAQ,CAACzB,KAAT,GAAiBsB,QAAjB;AACAG,IAAAA,QAAQ,CAACxB,MAAT,GAAkBsB,SAAlB;AAEA,QAAII,YAAY,GAAGvB,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAnB;AACA,QAAIuB,aAAa,GAAGD,YAAY,CAACpB,UAAb,CAAwB,IAAxB,CAApB;AACAoB,IAAAA,YAAY,CAAC3B,KAAb,GAAqBqB,MAAM,CAACrB,KAA5B;AACA2B,IAAAA,YAAY,CAAC1B,MAAb,GAAsBoB,MAAM,CAACpB,MAA7B;AACA2B,IAAAA,aAAa,CAACpB,SAAd,CAAwBa,MAAxB,EAAgC,CAAhC,EAAmC,CAAnC;AAEAK,IAAAA,eAAe,CAAClB,SAAhB,CAA0BmB,YAA1B,EAAwCV,MAAxC,EAAgDH,MAAhD,EAAwDQ,QAAQ,GAAGE,KAAnE,EAA0ED,SAAS,GAAGC,KAAtF,EAA6F,CAA7F,EAAgG,CAAhG,EAAmGF,QAAnG,EAA6GC,SAA7G;AACA,WAAOE,QAAQ,CAAChB,SAAT,EAAP;AACH;;AAxF+B","sourcesContent":["// Usage:\n//    let firstArg = 'selectedLogoFile';                  //<input type=\"file\" id=\"selectedLogoFile\">\n//    let secondArg = 300;                                //300px\n//    let thirdArg = (dataUrl)=> console.log(dataUrl);    //(dataUrl) => document.getElementById('image-output').src = dataUrl;\n//\n//    this.image = new imageResizer(firstArg, secondArg, thirdArg);\n//\n// When uploaded file:\n//    var formData = new FormData();\n//    formData.append('files[0]', this.image.blob);\n//\n//    document.getElementById('image-output').src = this.image.dataUrl;\n\n\n\n\nexport default class imageSqResizer {\n\n    constructor(uploaderId, size, setDataUrlFunc) {\n\n        this._setDataUrlFunc = setDataUrlFunc;\n        this._size = size;\n        this._blob = null;\n        this._dataUrl = null;\n\n        this.resized(uploaderId, this._size);\n    }\n\n    //get blob object\n    get blob() { return this._blob; }\n        //get dataUrl\n    get dataUrl() { return this._dataUrl; }\n\n    // resize\n    resized(file, maxWidth) {\n        let setDataUrlFunc = this._setDataUrlFunc || false;\n        let reader = new FileReader();\n        reader.onload = () => {\n\n            let tempImg = new Image();\n            tempImg.src = reader.result;\n\n            let createCanvas = (width, height, img) => {\n                let canvas = document.createElement('canvas');\n                canvas.width = width;\n                canvas.height = height;\n                let ctx = canvas.getContext('2d');\n                ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n                this._dataUrl = canvas.toDataURL();\n                if (setDataUrlFunc) {\n                    setDataUrlFunc(canvas.toDataURL());\n                }\n                canvas.toBlob((blob) => {\n                    this._blob = blob;\n                });\n            }\n\n            tempImg.onload = () => {\n\n                // calc size\n                let tempW = tempImg.width;\n                let tempH = tempImg.height;\n                let min = tempW >= tempH ? tempH : tempW;\n                maxWidth = maxWidth || min;\n\n                if (tempH <= maxWidth && tempW <= maxWidth) {\n                    createCanvas(tempW, tempH, tempImg);\n                }\n\n                let startY = 0;\n                if (min !== tempH) {\n                    startY = Math.round(tempH / 2 - (min / 2));\n                }\n                let startX = 0;\n                if (min !== tempW) {\n                    startX = Math.round(tempW / 2 - (min / 2));\n                }\n\n                let finalImg = new Image();\n                finalImg.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n\n                finalImg.onload = () => {\n                    createCanvas(maxWidth, maxWidth, finalImg);\n                }\n            }\n        }\n        reader.readAsDataURL(file);\n    }\n\n    //image crop\n    getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio) {\n        let tnCanvas = document.createElement('canvas');\n        let tnCanvasContext = tnCanvas.getContext('2d');\n        tnCanvas.width = newWidth;\n        tnCanvas.height = newHeight;\n\n        let bufferCanvas = document.createElement('canvas');\n        let bufferContext = bufferCanvas.getContext('2d');\n        bufferCanvas.width = imgObj.width;\n        bufferCanvas.height = imgObj.height;\n        bufferContext.drawImage(imgObj, 0, 0);\n\n        tnCanvasContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight);\n        return tnCanvas.toDataURL();\n    }\n}"]},"metadata":{},"sourceType":"module"}