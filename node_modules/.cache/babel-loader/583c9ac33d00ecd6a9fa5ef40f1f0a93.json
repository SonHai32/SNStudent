{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependenciesBlock = require(\"./DependenciesBlock\");\n/** @typedef {import(\"./ChunkGroup\")} ChunkGroup */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {TODO} GroupOptions */\n\n\nmodule.exports = class AsyncDependenciesBlock extends DependenciesBlock {\n  /**\n   * @param {GroupOptions} groupOptions options for the group\n   * @param {Module} module the Module object\n   * @param {DependencyLocation=} loc the line of code\n   * @param {TODO=} request the request\n   */\n  constructor(groupOptions, module, loc, request) {\n    super();\n\n    if (typeof groupOptions === \"string\") {\n      groupOptions = {\n        name: groupOptions\n      };\n    } else if (!groupOptions) {\n      groupOptions = {\n        name: undefined\n      };\n    }\n\n    this.groupOptions = groupOptions;\n    /** @type {ChunkGroup=} */\n\n    this.chunkGroup = undefined;\n    this.module = module;\n    this.loc = loc;\n    this.request = request;\n    /** @type {DependenciesBlock} */\n\n    this.parent = undefined;\n  }\n  /**\n   * @returns {string} The name of the chunk\n   */\n\n\n  get chunkName() {\n    return this.groupOptions.name;\n  }\n  /**\n   * @param {string} value The new chunk name\n   * @returns {void}\n   */\n\n\n  set chunkName(value) {\n    this.groupOptions.name = value;\n  }\n  /**\n   * @returns {never} this throws and should never be called\n   */\n\n\n  get chunks() {\n    throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n  }\n  /**\n   * @param {never} value setter value\n   * @returns {never} this is going to throw therefore we should throw type\n   * assertions by returning never\n   */\n\n\n  set chunks(value) {\n    throw new Error(\"Moved to AsyncDependenciesBlock.chunkGroup\");\n  }\n  /**\n   * @param {Hash} hash the hash used to track block changes, from \"crypto\" module\n   * @returns {void}\n   */\n\n\n  updateHash(hash) {\n    hash.update(JSON.stringify(this.groupOptions));\n    hash.update(this.chunkGroup && this.chunkGroup.chunks.map(chunk => {\n      return chunk.id !== null ? chunk.id : \"\";\n    }).join(\",\") || \"\");\n    super.updateHash(hash);\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  disconnect() {\n    this.chunkGroup = undefined;\n    super.disconnect();\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  unseal() {\n    this.chunkGroup = undefined;\n    super.unseal();\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  sortItems() {\n    super.sortItems();\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}