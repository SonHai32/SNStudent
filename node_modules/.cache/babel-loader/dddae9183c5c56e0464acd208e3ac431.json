{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      ConcatSource = _require.ConcatSource;\n\nconst Template = require(\"./Template\");\n\nclass FunctionModuleTemplatePlugin {\n  apply(moduleTemplate) {\n    moduleTemplate.hooks.render.tap(\"FunctionModuleTemplatePlugin\", (moduleSource, module) => {\n      const source = new ConcatSource();\n      const args = [module.moduleArgument]; // TODO remove HACK checking type for javascript\n\n      if (module.type && module.type.startsWith(\"javascript\")) {\n        args.push(module.exportsArgument);\n\n        if (module.hasDependencies(d => d.requireWebpackRequire !== false)) {\n          args.push(\"__webpack_require__\");\n        }\n      } else if (module.type && module.type.startsWith(\"json\")) {// no additional arguments needed\n      } else {\n        args.push(module.exportsArgument, \"__webpack_require__\");\n      }\n\n      source.add(\"/***/ (function(\" + args.join(\", \") + \") {\\n\\n\");\n      if (module.buildInfo.strict) source.add('\"use strict\";\\n');\n      source.add(moduleSource);\n      source.add(\"\\n\\n/***/ })\");\n      return source;\n    });\n    moduleTemplate.hooks.package.tap(\"FunctionModuleTemplatePlugin\", (moduleSource, module) => {\n      if (moduleTemplate.runtimeTemplate.outputOptions.pathinfo) {\n        const source = new ConcatSource();\n        const req = module.readableIdentifier(moduleTemplate.runtimeTemplate.requestShortener);\n        const reqStr = req.replace(/\\*\\//g, \"*_/\");\n        const reqStrStar = \"*\".repeat(reqStr.length);\n        source.add(\"/*!****\" + reqStrStar + \"****!*\\\\\\n\");\n        source.add(\"  !*** \" + reqStr + \" ***!\\n\");\n        source.add(\"  \\\\****\" + reqStrStar + \"****/\\n\");\n\n        if (Array.isArray(module.buildMeta.providedExports) && module.buildMeta.providedExports.length === 0) {\n          source.add(Template.toComment(\"no exports provided\") + \"\\n\");\n        } else if (Array.isArray(module.buildMeta.providedExports)) {\n          source.add(Template.toComment(\"exports provided: \" + module.buildMeta.providedExports.join(\", \")) + \"\\n\");\n        } else if (module.buildMeta.providedExports) {\n          source.add(Template.toComment(\"no static exports found\") + \"\\n\");\n        }\n\n        if (Array.isArray(module.usedExports) && module.usedExports.length === 0) {\n          source.add(Template.toComment(\"no exports used\") + \"\\n\");\n        } else if (Array.isArray(module.usedExports)) {\n          source.add(Template.toComment(\"exports used: \" + module.usedExports.join(\", \")) + \"\\n\");\n        } else if (module.usedExports) {\n          source.add(Template.toComment(\"all exports used\") + \"\\n\");\n        }\n\n        if (module.optimizationBailout) {\n          for (const text of module.optimizationBailout) {\n            let code;\n\n            if (typeof text === \"function\") {\n              code = text(moduleTemplate.runtimeTemplate.requestShortener);\n            } else {\n              code = text;\n            }\n\n            source.add(Template.toComment(\"\".concat(code)) + \"\\n\");\n          }\n        }\n\n        source.add(moduleSource);\n        return source;\n      }\n\n      return moduleSource;\n    });\n    moduleTemplate.hooks.hash.tap(\"FunctionModuleTemplatePlugin\", hash => {\n      hash.update(\"FunctionModuleTemplatePlugin\");\n      hash.update(\"2\");\n    });\n  }\n\n}\n\nmodule.exports = FunctionModuleTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}