{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar Source = require(\"./Source\");\n\nvar SourceNode = require(\"source-map\").SourceNode;\n\nvar REPLACE_REGEX = /\\n(?=.|\\s)/g;\n\nfunction cloneAndPrefix(node, prefix, append) {\n  if (typeof node === \"string\") {\n    var result = node.replace(REPLACE_REGEX, \"\\n\" + prefix);\n    if (append.length > 0) result = append.pop() + result;\n    if (/\\n$/.test(node)) append.push(prefix);\n    return result;\n  } else {\n    var newNode = new SourceNode(node.line, node.column, node.source, node.children.map(function (node) {\n      return cloneAndPrefix(node, prefix, append);\n    }), node.name);\n    newNode.sourceContents = node.sourceContents;\n    return newNode;\n  }\n}\n\n;\n\nclass PrefixSource extends Source {\n  constructor(prefix, source) {\n    super();\n    this._source = source;\n    this._prefix = prefix;\n  }\n\n  source() {\n    var node = typeof this._source === \"string\" ? this._source : this._source.source();\n    var prefix = this._prefix;\n    return prefix + node.replace(REPLACE_REGEX, \"\\n\" + prefix);\n  }\n\n  node(options) {\n    var node = this._source.node(options);\n\n    var prefix = this._prefix;\n    var output = [];\n    var result = new SourceNode();\n    node.walkSourceContents(function (source, content) {\n      result.setSourceContent(source, content);\n    });\n    var needPrefix = true;\n    node.walk(function (chunk, mapping) {\n      var parts = chunk.split(/(\\n)/);\n\n      for (var i = 0; i < parts.length; i += 2) {\n        var nl = i + 1 < parts.length;\n        var part = parts[i] + (nl ? \"\\n\" : \"\");\n\n        if (part) {\n          if (needPrefix) {\n            output.push(prefix);\n          }\n\n          output.push(new SourceNode(mapping.line, mapping.column, mapping.source, part, mapping.name));\n          needPrefix = nl;\n        }\n      }\n    });\n    result.add(output);\n    return result;\n  }\n\n  listMap(options) {\n    var prefix = this._prefix;\n\n    var map = this._source.listMap(options);\n\n    return map.mapGeneratedCode(function (code) {\n      return prefix + code.replace(REPLACE_REGEX, \"\\n\" + prefix);\n    });\n  }\n\n  updateHash(hash) {\n    if (typeof this._source === \"string\") hash.update(this._source);else this._source.updateHash(hash);\n    if (typeof this._prefix === \"string\") hash.update(this._prefix);else this._prefix.updateHash(hash);\n  }\n\n}\n\nrequire(\"./SourceAndMapMixin\")(PrefixSource.prototype);\n\nmodule.exports = PrefixSource;","map":null,"metadata":{},"sourceType":"script"}