{"ast":null,"code":"'use strict';\n\nconst figgyPudding = require('figgy-pudding');\n\nconst index = require('./lib/entry-index');\n\nconst memo = require('./lib/memoization');\n\nconst write = require('./lib/content/write');\n\nconst to = require('mississippi').to;\n\nconst PutOpts = figgyPudding({\n  algorithms: {\n    default: ['sha512']\n  },\n  integrity: {},\n  memoize: {},\n  metadata: {},\n  pickAlgorithm: {},\n  size: {},\n  tmpPrefix: {},\n  single: {},\n  sep: {},\n  error: {},\n  strict: {}\n});\nmodule.exports = putData;\n\nfunction putData(cache, key, data, opts) {\n  opts = PutOpts(opts);\n  return write(cache, data, opts).then(res => {\n    return index.insert(cache, key, res.integrity, opts.concat({\n      size: res.size\n    })).then(entry => {\n      if (opts.memoize) {\n        memo.put(cache, entry, data, opts);\n      }\n\n      return res.integrity;\n    });\n  });\n}\n\nmodule.exports.stream = putStream;\n\nfunction putStream(cache, key, opts) {\n  opts = PutOpts(opts);\n  let integrity;\n  let size;\n  const contentStream = write.stream(cache, opts).on('integrity', int => {\n    integrity = int;\n  }).on('size', s => {\n    size = s;\n  });\n  let memoData;\n  let memoTotal = 0;\n  const stream = to((chunk, enc, cb) => {\n    contentStream.write(chunk, enc, () => {\n      if (opts.memoize) {\n        if (!memoData) {\n          memoData = [];\n        }\n\n        memoData.push(chunk);\n        memoTotal += chunk.length;\n      }\n\n      cb();\n    });\n  }, cb => {\n    contentStream.end(() => {\n      index.insert(cache, key, integrity, opts.concat({\n        size\n      })).then(entry => {\n        if (opts.memoize) {\n          memo.put(cache, entry, Buffer.concat(memoData, memoTotal), opts);\n        }\n\n        stream.emit('integrity', integrity);\n        cb();\n      });\n    });\n  });\n  let erred = false;\n  stream.once('error', err => {\n    if (erred) {\n      return;\n    }\n\n    erred = true;\n    contentStream.emit('error', err);\n  });\n  contentStream.once('error', err => {\n    if (erred) {\n      return;\n    }\n\n    erred = true;\n    stream.emit('error', err);\n  });\n  return stream;\n}","map":null,"metadata":{},"sourceType":"script"}