{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthors Simen Brekken @simenbrekken, Einar LÃ¶ve @einarlove\n*/\n\"use strict\";\n/** @typedef {import(\"./Compiler\")} Compiler */\n\nconst WebpackError = require(\"./WebpackError\");\n\nconst DefinePlugin = require(\"./DefinePlugin\");\n\nconst needsEnvVarFix = [\"8\", \"9\"].indexOf(process.versions.node.split(\".\")[0]) >= 0 && process.platform === \"win32\";\n\nclass EnvironmentPlugin {\n  constructor(...keys) {\n    if (keys.length === 1 && Array.isArray(keys[0])) {\n      this.keys = keys[0];\n      this.defaultValues = {};\n    } else if (keys.length === 1 && keys[0] && typeof keys[0] === \"object\") {\n      this.keys = Object.keys(keys[0]);\n      this.defaultValues = keys[0];\n    } else {\n      this.keys = keys;\n      this.defaultValues = {};\n    }\n  }\n  /**\n   * @param {Compiler} compiler webpack compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    const definitions = this.keys.reduce((defs, key) => {\n      // TODO remove once the fix has made its way into Node 8.\n      // Work around https://github.com/nodejs/node/pull/18463,\n      // affecting Node 8 & 9 by performing an OS-level\n      // operation that always succeeds before reading\n      // environment variables:\n      if (needsEnvVarFix) require(\"os\").cpus();\n      const value = process.env[key] !== undefined ? process.env[key] : this.defaultValues[key];\n\n      if (value === undefined) {\n        compiler.hooks.thisCompilation.tap(\"EnvironmentPlugin\", compilation => {\n          const error = new WebpackError(\"EnvironmentPlugin - \".concat(key, \" environment variable is undefined.\\n\\n\") + \"You can pass an object with default values to suppress this warning.\\n\" + \"See https://webpack.js.org/plugins/environment-plugin for example.\");\n          error.name = \"EnvVariableNotDefinedError\";\n          compilation.warnings.push(error);\n        });\n      }\n\n      defs[\"process.env.\".concat(key)] = value === undefined ? \"undefined\" : JSON.stringify(value);\n      return defs;\n    }, {});\n    new DefinePlugin(definitions).apply(compiler);\n  }\n\n}\n\nmodule.exports = EnvironmentPlugin;","map":null,"metadata":{},"sourceType":"script"}