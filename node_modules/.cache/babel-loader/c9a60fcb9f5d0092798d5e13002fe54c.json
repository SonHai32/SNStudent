{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\nconst NullFactory = require(\"./NullFactory\");\n\nconst ParserHelpers = require(\"./ParserHelpers\");\n\nconst getQuery = request => {\n  const i = request.indexOf(\"?\");\n  return i !== -1 ? request.substr(i) : \"\";\n};\n\nconst collectDeclaration = (declarations, pattern) => {\n  const stack = [pattern];\n\n  while (stack.length > 0) {\n    const node = stack.pop();\n\n    switch (node.type) {\n      case \"Identifier\":\n        declarations.add(node.name);\n        break;\n\n      case \"ArrayPattern\":\n        for (const element of node.elements) {\n          if (element) {\n            stack.push(element);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        stack.push(node.left);\n        break;\n\n      case \"ObjectPattern\":\n        for (const property of node.properties) {\n          stack.push(property.value);\n        }\n\n        break;\n\n      case \"RestElement\":\n        stack.push(node.argument);\n        break;\n    }\n  }\n};\n\nconst getHoistedDeclarations = (branch, includeFunctionDeclarations) => {\n  const declarations = new Set();\n  const stack = [branch];\n\n  while (stack.length > 0) {\n    const node = stack.pop(); // Some node could be `null` or `undefined`.\n\n    if (!node) continue;\n\n    switch (node.type) {\n      // Walk through control statements to look for hoisted declarations.\n      // Some branches are skipped since they do not allow declarations.\n      case \"BlockStatement\":\n        for (const stmt of node.body) {\n          stack.push(stmt);\n        }\n\n        break;\n\n      case \"IfStatement\":\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n        break;\n\n      case \"ForStatement\":\n        stack.push(node.init);\n        stack.push(node.body);\n        break;\n\n      case \"ForInStatement\":\n      case \"ForOfStatement\":\n        stack.push(node.left);\n        stack.push(node.body);\n        break;\n\n      case \"DoWhileStatement\":\n      case \"WhileStatement\":\n      case \"LabeledStatement\":\n        stack.push(node.body);\n        break;\n\n      case \"SwitchStatement\":\n        for (const cs of node.cases) {\n          for (const consequent of cs.consequent) {\n            stack.push(consequent);\n          }\n        }\n\n        break;\n\n      case \"TryStatement\":\n        stack.push(node.block);\n\n        if (node.handler) {\n          stack.push(node.handler.body);\n        }\n\n        stack.push(node.finalizer);\n        break;\n\n      case \"FunctionDeclaration\":\n        if (includeFunctionDeclarations) {\n          collectDeclaration(declarations, node.id);\n        }\n\n        break;\n\n      case \"VariableDeclaration\":\n        if (node.kind === \"var\") {\n          for (const decl of node.declarations) {\n            collectDeclaration(declarations, decl.id);\n          }\n        }\n\n        break;\n    }\n  }\n\n  return Array.from(declarations);\n};\n\nclass ConstPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ConstPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n\n      const handler = parser => {\n        parser.hooks.statementIf.tap(\"ConstPlugin\", statement => {\n          const param = parser.evaluateExpression(statement.test);\n          const bool = param.asBool();\n\n          if (typeof bool === \"boolean\") {\n            if (statement.test.type !== \"Literal\") {\n              const dep = new ConstDependency(\"\".concat(bool), param.range);\n              dep.loc = statement.loc;\n              parser.state.current.addDependency(dep);\n            }\n\n            const branchToRemove = bool ? statement.alternate : statement.consequent;\n\n            if (branchToRemove) {\n              // Before removing the dead branch, the hoisted declarations\n              // must be collected.\n              //\n              // Given the following code:\n              //\n              //     if (true) f() else g()\n              //     if (false) {\n              //       function f() {}\n              //       const g = function g() {}\n              //       if (someTest) {\n              //         let a = 1\n              //         var x, {y, z} = obj\n              //       }\n              //     } else {\n              //       …\n              //     }\n              //\n              // the generated code is:\n              //\n              //     if (true) f() else {}\n              //     if (false) {\n              //       var f, x, y, z;   (in loose mode)\n              //       var x, y, z;      (in strict mode)\n              //     } else {\n              //       …\n              //     }\n              //\n              // NOTE: When code runs in strict mode, `var` declarations\n              // are hoisted but `function` declarations don't.\n              //\n              let declarations;\n\n              if (parser.scope.isStrict) {\n                // If the code runs in strict mode, variable declarations\n                // using `var` must be hoisted.\n                declarations = getHoistedDeclarations(branchToRemove, false);\n              } else {\n                // Otherwise, collect all hoisted declaration.\n                declarations = getHoistedDeclarations(branchToRemove, true);\n              }\n\n              let replacement;\n\n              if (declarations.length > 0) {\n                replacement = \"{ var \".concat(declarations.join(\", \"), \"; }\");\n              } else {\n                replacement = \"{}\";\n              }\n\n              const dep = new ConstDependency(replacement, branchToRemove.range);\n              dep.loc = branchToRemove.loc;\n              parser.state.current.addDependency(dep);\n            }\n\n            return bool;\n          }\n        });\n        parser.hooks.expressionConditionalOperator.tap(\"ConstPlugin\", expression => {\n          const param = parser.evaluateExpression(expression.test);\n          const bool = param.asBool();\n\n          if (typeof bool === \"boolean\") {\n            if (expression.test.type !== \"Literal\") {\n              const dep = new ConstDependency(\" \".concat(bool), param.range);\n              dep.loc = expression.loc;\n              parser.state.current.addDependency(dep);\n            } // Expressions do not hoist.\n            // It is safe to remove the dead branch.\n            //\n            // Given the following code:\n            //\n            //   false ? someExpression() : otherExpression();\n            //\n            // the generated code is:\n            //\n            //   false ? undefined : otherExpression();\n            //\n\n\n            const branchToRemove = bool ? expression.alternate : expression.consequent;\n            const dep = new ConstDependency(\"undefined\", branchToRemove.range);\n            dep.loc = branchToRemove.loc;\n            parser.state.current.addDependency(dep);\n            return bool;\n          }\n        });\n        parser.hooks.expressionLogicalOperator.tap(\"ConstPlugin\", expression => {\n          if (expression.operator === \"&&\" || expression.operator === \"||\") {\n            const param = parser.evaluateExpression(expression.left);\n            const bool = param.asBool();\n\n            if (typeof bool === \"boolean\") {\n              // Expressions do not hoist.\n              // It is safe to remove the dead branch.\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   falsyExpression() && false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() && someExpression();\n              //\n              // the generated code is:\n              //\n              //   true && someExpression();\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   truthyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   truthyExpression() || false;\n              //\n              // ------------------------------------------\n              //\n              // Given the following code:\n              //\n              //   falsyExpression() || someExpression();\n              //\n              // the generated code is:\n              //\n              //   false && someExpression();\n              //\n              const keepRight = expression.operator === \"&&\" && bool || expression.operator === \"||\" && !bool;\n\n              if (param.isBoolean() || keepRight) {\n                // for case like\n                //\n                //   return'development'===process.env.NODE_ENV&&'foo'\n                //\n                // we need a space before the bool to prevent result like\n                //\n                //   returnfalse&&'foo'\n                //\n                const dep = new ConstDependency(\" \".concat(bool), param.range);\n                dep.loc = expression.loc;\n                parser.state.current.addDependency(dep);\n              } else {\n                parser.walkExpression(expression.left);\n              }\n\n              if (!keepRight) {\n                const dep = new ConstDependency(\"false\", expression.right.range);\n                dep.loc = expression.loc;\n                parser.state.current.addDependency(dep);\n              }\n\n              return keepRight;\n            }\n          }\n        });\n        parser.hooks.evaluateIdentifier.for(\"__resourceQuery\").tap(\"ConstPlugin\", expr => {\n          if (!parser.state.module) return;\n          return ParserHelpers.evaluateToString(getQuery(parser.state.module.resource))(expr);\n        });\n        parser.hooks.expression.for(\"__resourceQuery\").tap(\"ConstPlugin\", () => {\n          if (!parser.state.module) return;\n          parser.state.current.addVariable(\"__resourceQuery\", JSON.stringify(getQuery(parser.state.module.resource)));\n          return true;\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ConstPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ConstPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = ConstPlugin;","map":null,"metadata":{},"sourceType":"script"}