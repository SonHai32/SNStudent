{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"tapable\"),\n      SyncBailHook = _require.SyncBailHook;\n\nconst HarmonyImportSideEffectDependency = require(\"./HarmonyImportSideEffectDependency\");\n\nconst HarmonyImportSpecifierDependency = require(\"./HarmonyImportSpecifierDependency\");\n\nconst HarmonyAcceptImportDependency = require(\"./HarmonyAcceptImportDependency\");\n\nconst HarmonyAcceptDependency = require(\"./HarmonyAcceptDependency\");\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nmodule.exports = class HarmonyImportDependencyParserPlugin {\n  constructor(moduleOptions) {\n    this.strictExportPresence = moduleOptions.strictExportPresence;\n    this.strictThisContextOnImports = moduleOptions.strictThisContextOnImports;\n  }\n\n  apply(parser) {\n    parser.hooks.import.tap(\"HarmonyImportDependencyParserPlugin\", (statement, source) => {\n      parser.state.lastHarmonyImportOrder = (parser.state.lastHarmonyImportOrder || 0) + 1;\n      const clearDep = new ConstDependency(\"\", statement.range);\n      clearDep.loc = statement.loc;\n      parser.state.module.addDependency(clearDep);\n      const sideEffectDep = new HarmonyImportSideEffectDependency(source, parser.state.module, parser.state.lastHarmonyImportOrder, parser.state.harmonyParserScope);\n      sideEffectDep.loc = statement.loc;\n      parser.state.module.addDependency(sideEffectDep);\n      return true;\n    });\n    parser.hooks.importSpecifier.tap(\"HarmonyImportDependencyParserPlugin\", (statement, source, id, name) => {\n      parser.scope.definitions.delete(name);\n      parser.scope.renames.set(name, \"imported var\");\n\n      if (!parser.state.harmonySpecifier) {\n        parser.state.harmonySpecifier = new Map();\n      }\n\n      parser.state.harmonySpecifier.set(name, {\n        source,\n        id,\n        sourceOrder: parser.state.lastHarmonyImportOrder\n      });\n      return true;\n    });\n    parser.hooks.expression.for(\"imported var\").tap(\"HarmonyImportDependencyParserPlugin\", expr => {\n      const name = expr.name;\n      const settings = parser.state.harmonySpecifier.get(name);\n      const dep = new HarmonyImportSpecifierDependency(settings.source, parser.state.module, settings.sourceOrder, parser.state.harmonyParserScope, settings.id, name, expr.range, this.strictExportPresence);\n      dep.shorthand = parser.scope.inShorthand;\n      dep.directImport = true;\n      dep.loc = expr.loc;\n      parser.state.module.addDependency(dep);\n      return true;\n    });\n    parser.hooks.expressionAnyMember.for(\"imported var\").tap(\"HarmonyImportDependencyParserPlugin\", expr => {\n      const name = expr.object.name;\n      const settings = parser.state.harmonySpecifier.get(name);\n      if (settings.id !== null) return false;\n      const dep = new HarmonyImportSpecifierDependency(settings.source, parser.state.module, settings.sourceOrder, parser.state.harmonyParserScope, expr.property.name || expr.property.value, name, expr.range, this.strictExportPresence);\n      dep.shorthand = parser.scope.inShorthand;\n      dep.directImport = false;\n      dep.loc = expr.loc;\n      parser.state.module.addDependency(dep);\n      return true;\n    });\n\n    if (this.strictThisContextOnImports) {\n      // only in case when we strictly follow the spec we need a special case here\n      parser.hooks.callAnyMember.for(\"imported var\").tap(\"HarmonyImportDependencyParserPlugin\", expr => {\n        if (expr.callee.type !== \"MemberExpression\") return;\n        if (expr.callee.object.type !== \"Identifier\") return;\n        const name = expr.callee.object.name;\n        const settings = parser.state.harmonySpecifier.get(name);\n        if (settings.id !== null) return false;\n        const dep = new HarmonyImportSpecifierDependency(settings.source, parser.state.module, settings.sourceOrder, parser.state.harmonyParserScope, expr.callee.property.name || expr.callee.property.value, name, expr.callee.range, this.strictExportPresence);\n        dep.shorthand = parser.scope.inShorthand;\n        dep.directImport = false;\n        dep.namespaceObjectAsContext = true;\n        dep.loc = expr.callee.loc;\n        parser.state.module.addDependency(dep);\n        if (expr.arguments) parser.walkExpressions(expr.arguments);\n        return true;\n      });\n    }\n\n    parser.hooks.call.for(\"imported var\").tap(\"HarmonyImportDependencyParserPlugin\", expr => {\n      const args = expr.arguments;\n      const fullExpr = expr;\n      expr = expr.callee;\n      if (expr.type !== \"Identifier\") return;\n      const name = expr.name;\n      const settings = parser.state.harmonySpecifier.get(name);\n      const dep = new HarmonyImportSpecifierDependency(settings.source, parser.state.module, settings.sourceOrder, parser.state.harmonyParserScope, settings.id, name, expr.range, this.strictExportPresence);\n      dep.directImport = true;\n      dep.callArgs = args;\n      dep.call = fullExpr;\n      dep.loc = expr.loc;\n      parser.state.module.addDependency(dep);\n      if (args) parser.walkExpressions(args);\n      return true;\n    }); // TODO webpack 5: refactor this, no custom hooks\n\n    if (!parser.hooks.hotAcceptCallback) {\n      parser.hooks.hotAcceptCallback = new SyncBailHook([\"expression\", \"requests\"]);\n    }\n\n    if (!parser.hooks.hotAcceptWithoutCallback) {\n      parser.hooks.hotAcceptWithoutCallback = new SyncBailHook([\"expression\", \"requests\"]);\n    }\n\n    parser.hooks.hotAcceptCallback.tap(\"HarmonyImportDependencyParserPlugin\", (expr, requests) => {\n      const harmonyParserScope = parser.state.harmonyParserScope;\n\n      if (!harmonyParserScope) {\n        // This is not a harmony module, skip it\n        return;\n      }\n\n      const dependencies = requests.map(request => {\n        const dep = new HarmonyAcceptImportDependency(request, parser.state.module, harmonyParserScope);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n        return dep;\n      });\n\n      if (dependencies.length > 0) {\n        const dep = new HarmonyAcceptDependency(expr.range, dependencies, true);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n      }\n    });\n    parser.hooks.hotAcceptWithoutCallback.tap(\"HarmonyImportDependencyParserPlugin\", (expr, requests) => {\n      const dependencies = requests.map(request => {\n        const dep = new HarmonyAcceptImportDependency(request, parser.state.module, parser.state.harmonyParserScope);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n        return dep;\n      });\n\n      if (dependencies.length > 0) {\n        const dep = new HarmonyAcceptDependency(expr.range, dependencies, false);\n        dep.loc = expr.loc;\n        parser.state.module.addDependency(dep);\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}