{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      RawSource = _require.RawSource,\n      ReplaceSource = _require.ReplaceSource;\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n/** @typedef {(d: Dependency) => boolean} DependencyFilterFunction */\n\n/** @typedef {Map<Function, DependencyTemplate>} DependencyTemplates */\n\n\nclass DependenciesBlockVariable {\n  /**\n   * Creates an instance of DependenciesBlockVariable.\n   * @param {string} name name of DependenciesBlockVariable\n   * @param {string} expression expression string\n   * @param {Dependency[]=} dependencies dependencies tied to this varaiable\n   */\n  constructor(name, expression, dependencies) {\n    this.name = name;\n    this.expression = expression;\n    this.dependencies = dependencies || [];\n  }\n  /**\n   * @param {Hash} hash hash for instance to update\n   * @returns {void}\n   */\n\n\n  updateHash(hash) {\n    hash.update(this.name);\n    hash.update(this.expression);\n\n    for (const d of this.dependencies) {\n      d.updateHash(hash);\n    }\n  }\n  /**\n   * @param {DependencyTemplates} dependencyTemplates Dependency constructors and templates Map.\n   * @param {RuntimeTemplate} runtimeTemplate runtimeTemplate to generate expression souce\n   * @returns {ReplaceSource} returns constructed source for expression via templates\n   */\n\n\n  expressionSource(dependencyTemplates, runtimeTemplate) {\n    const source = new ReplaceSource(new RawSource(this.expression));\n\n    for (const dep of this.dependencies) {\n      const template = dependencyTemplates.get(dep.constructor);\n\n      if (!template) {\n        throw new Error(\"No template for dependency: \".concat(dep.constructor.name));\n      }\n\n      template.apply(dep, source, runtimeTemplate, dependencyTemplates);\n    }\n\n    return source;\n  }\n\n  disconnect() {\n    for (const d of this.dependencies) {\n      d.disconnect();\n    }\n  }\n\n  hasDependencies(filter) {\n    if (filter) {\n      return this.dependencies.some(filter);\n    }\n\n    return this.dependencies.length > 0;\n  }\n\n}\n\nmodule.exports = DependenciesBlockVariable;","map":null,"metadata":{},"sourceType":"script"}