{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Sean Larkin @thelarkinn\n*/\n\"use strict\";\n\nconst EntrypointsOverSizeLimitWarning = require(\"./EntrypointsOverSizeLimitWarning\");\n\nconst AssetsOverSizeLimitWarning = require(\"./AssetsOverSizeLimitWarning\");\n\nconst NoAsyncChunksWarning = require(\"./NoAsyncChunksWarning\");\n\nmodule.exports = class SizeLimitsPlugin {\n  constructor(options) {\n    this.hints = options.hints;\n    this.maxAssetSize = options.maxAssetSize;\n    this.maxEntrypointSize = options.maxEntrypointSize;\n    this.assetFilter = options.assetFilter;\n  }\n\n  apply(compiler) {\n    const entrypointSizeLimit = this.maxEntrypointSize;\n    const assetSizeLimit = this.maxAssetSize;\n    const hints = this.hints;\n\n    const assetFilter = this.assetFilter || (asset => !asset.endsWith(\".map\"));\n\n    compiler.hooks.afterEmit.tap(\"SizeLimitsPlugin\", compilation => {\n      const warnings = [];\n\n      const getEntrypointSize = entrypoint => entrypoint.getFiles().reduce((currentSize, file) => {\n        if (assetFilter(file) && compilation.assets[file]) {\n          return currentSize + compilation.assets[file].size();\n        }\n\n        return currentSize;\n      }, 0);\n\n      const assetsOverSizeLimit = [];\n\n      for (const assetName of Object.keys(compilation.assets)) {\n        if (!assetFilter(assetName)) {\n          continue;\n        }\n\n        const asset = compilation.assets[assetName];\n        const size = asset.size();\n\n        if (size > assetSizeLimit) {\n          assetsOverSizeLimit.push({\n            name: assetName,\n            size: size\n          });\n          asset.isOverSizeLimit = true;\n        }\n      }\n\n      const entrypointsOverLimit = [];\n\n      for (const pair of compilation.entrypoints) {\n        const name = pair[0];\n        const entry = pair[1];\n        const size = getEntrypointSize(entry);\n\n        if (size > entrypointSizeLimit) {\n          entrypointsOverLimit.push({\n            name: name,\n            size: size,\n            files: entry.getFiles().filter(assetFilter)\n          });\n          entry.isOverSizeLimit = true;\n        }\n      }\n\n      if (hints) {\n        // 1. Individual Chunk: Size < 250kb\n        // 2. Collective Initial Chunks [entrypoint] (Each Set?): Size < 250kb\n        // 3. No Async Chunks\n        // if !1, then 2, if !2 return\n        if (assetsOverSizeLimit.length > 0) {\n          warnings.push(new AssetsOverSizeLimitWarning(assetsOverSizeLimit, assetSizeLimit));\n        }\n\n        if (entrypointsOverLimit.length > 0) {\n          warnings.push(new EntrypointsOverSizeLimitWarning(entrypointsOverLimit, entrypointSizeLimit));\n        }\n\n        if (warnings.length > 0) {\n          const hasAsyncChunks = compilation.chunks.filter(chunk => !chunk.canBeInitial()).length > 0;\n\n          if (!hasAsyncChunks) {\n            warnings.push(new NoAsyncChunksWarning());\n          }\n\n          if (hints === \"error\") {\n            compilation.errors.push(...warnings);\n          } else {\n            compilation.warnings.push(...warnings);\n          }\n        }\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}