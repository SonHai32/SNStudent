{"ast":null,"code":"\"use strict\";\n/**\n * trace-event - A library to create a trace of your node app per\n * Google's Trace Event format:\n * // JSSTYLED\n *      https://docs.google.com/document/d/1CvAClvFfyA5R-PhYUmn5OOQtYMH4h6I0nSsKchNAySU\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar stream_1 = require(\"stream\");\n\nfunction evCommon() {\n  var hrtime = process.hrtime(); // [seconds, nanoseconds]\n\n  var ts = hrtime[0] * 1000000 + Math.round(hrtime[1] / 1000); // microseconds\n\n  return {\n    ts: ts,\n    pid: process.pid,\n    tid: process.pid // no meaningful tid for node.js\n\n  };\n}\n\nvar Tracer =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Tracer, _super);\n\n  function Tracer(opts) {\n    if (opts === void 0) {\n      opts = {};\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.noStream = false;\n    _this.events = [];\n\n    if (typeof opts !== \"object\") {\n      throw new Error(\"Invalid options passed (must be an object)\");\n    }\n\n    if (opts.parent != null && typeof opts.parent !== \"object\") {\n      throw new Error(\"Invalid option (parent) passed (must be an object)\");\n    }\n\n    if (opts.fields != null && typeof opts.fields !== \"object\") {\n      throw new Error(\"Invalid option (fields) passed (must be an object)\");\n    }\n\n    if (opts.objectMode != null && opts.objectMode !== true && opts.objectMode !== false) {\n      throw new Error(\"Invalid option (objectsMode) passed (must be a boolean)\");\n    }\n\n    _this.noStream = opts.noStream || false;\n    _this.parent = opts.parent;\n\n    if (_this.parent) {\n      _this.fields = Object.assign({}, opts.parent && opts.parent.fields);\n    } else {\n      _this.fields = {};\n    }\n\n    if (opts.fields) {\n      Object.assign(_this.fields, opts.fields);\n    }\n\n    if (!_this.fields.cat) {\n      // trace-viewer *requires* `cat`, so let's have a fallback.\n      _this.fields.cat = \"default\";\n    } else if (Array.isArray(_this.fields.cat)) {\n      _this.fields.cat = _this.fields.cat.join(\",\");\n    }\n\n    if (!_this.fields.args) {\n      // trace-viewer *requires* `args`, so let's have a fallback.\n      _this.fields.args = {};\n    }\n\n    if (_this.parent) {\n      // TODO: Not calling Readable ctor here. Does that cause probs?\n      //      Probably if trying to pipe from the child.\n      //      Might want a serpate TracerChild class for these guys.\n      _this._push = _this.parent._push.bind(_this.parent);\n    } else {\n      _this._objectMode = Boolean(opts.objectMode);\n      var streamOpts = {\n        objectMode: _this._objectMode\n      };\n\n      if (_this._objectMode) {\n        _this._push = _this.push;\n      } else {\n        _this._push = _this._pushString;\n        streamOpts.encoding = \"utf8\";\n      }\n\n      stream_1.Readable.call(_this, streamOpts);\n    }\n\n    return _this;\n  }\n  /**\n   * If in no streamMode in order to flush out the trace\n   * you need to call flush.\n   */\n\n\n  Tracer.prototype.flush = function () {\n    if (this.noStream === true) {\n      for (var _i = 0, _a = this.events; _i < _a.length; _i++) {\n        var evt = _a[_i];\n\n        this._push(evt);\n      }\n\n      this._flush();\n    }\n  };\n\n  Tracer.prototype._read = function (_) {};\n\n  Tracer.prototype._pushString = function (ev) {\n    var separator = \"\";\n\n    if (!this.firstPush) {\n      this.push(\"[\");\n      this.firstPush = true;\n    } else {\n      separator = \",\\n\";\n    }\n\n    this.push(separator + JSON.stringify(ev), \"utf8\");\n  };\n\n  Tracer.prototype._flush = function () {\n    if (!this._objectMode) {\n      this.push(\"]\");\n    }\n  };\n\n  Tracer.prototype.child = function (fields) {\n    return new Tracer({\n      parent: this,\n      fields: fields\n    });\n  };\n\n  Tracer.prototype.begin = function (fields) {\n    return this.mkEventFunc(\"b\")(fields);\n  };\n\n  Tracer.prototype.end = function (fields) {\n    return this.mkEventFunc(\"e\")(fields);\n  };\n\n  Tracer.prototype.completeEvent = function (fields) {\n    return this.mkEventFunc(\"X\")(fields);\n  };\n\n  Tracer.prototype.instantEvent = function (fields) {\n    return this.mkEventFunc(\"I\")(fields);\n  };\n\n  Tracer.prototype.mkEventFunc = function (ph) {\n    var _this = this;\n\n    return function (fields) {\n      var ev = evCommon(); // Assign the event phase.\n\n      ev.ph = ph;\n\n      if (fields) {\n        if (typeof fields === \"string\") {\n          ev.name = fields;\n        } else {\n          for (var _i = 0, _a = Object.keys(fields); _i < _a.length; _i++) {\n            var k = _a[_i];\n\n            if (k === \"cat\") {\n              ev.cat = fields.cat.join(\",\");\n            } else {\n              ev[k] = fields[k];\n            }\n          }\n        }\n      }\n\n      if (!_this.noStream) {\n        _this._push(ev);\n      } else {\n        _this.events.push(ev);\n      }\n    };\n  };\n\n  return Tracer;\n}(stream_1.Readable);\n\nexports.Tracer = Tracer;\n/*\n * These correspond to the \"Async events\" in the Trace Events doc.\n *\n * Required fields:\n * - name\n * - id\n *\n * Optional fields:\n * - cat (array)\n * - args (object)\n * - TODO: stack fields, other optional fields?\n *\n * Dev Note: We don't explicitly assert that correct fields are\n * used for speed (premature optimization alert!).\n */","map":null,"metadata":{},"sourceType":"script"}