{"ast":null,"code":"\"use strict\";\n\nconst util = require('util');\n\nconst hashAlgo = require('./hash-algo');\n\nvar isObject = function (value) {\n  if (value == null) {\n    return false;\n  }\n\n  if (Array.isArray(value)) {\n    return true;\n  }\n\n  if (typeof value !== 'object') {\n    return false;\n  }\n\n  if (value.toString() !== '[object Object]') {\n    return false;\n  }\n\n  return true;\n};\n\nvar valueToString = function (value, set) {\n  return Object.prototype.toString.call(value) + (value == null ? util.inspect(value) : value.toString());\n};\n\nvar objectToString = function (obj, set) {\n  let ary = [];\n\n  for (let key in obj) {\n    ary.push((set && +key >= 0 ? '' : key) + toString(obj[key], set));\n  }\n\n  return (set ? '' : Object.prototype.toString.call(obj)) + ary.sort();\n};\n\nvar toString = function (obj, set) {\n  return isObject(obj) ? '@' + objectToString(obj, set) : valueToString(obj, set);\n};\n\nvar mask = function (str) {\n  let hash = '';\n\n  for (let i = 0; i < str.length; i++) {\n    hash += str.charCodeAt(i).toString(16);\n  }\n\n  return hash;\n};\n\nvar hash = function (obj, algo, set) {\n  let custom = typeof algo == 'function';\n  algo = algo == null || typeof algo == 'string' ? hashAlgo(algo) : algo;\n\n  if (typeof algo != 'function') {\n    set = algo;\n    algo = hashAlgo();\n  }\n\n  if (typeof set != 'boolean') {\n    set = false;\n  }\n\n  let str = toString(obj, set);\n  return algo(custom ? mask(str) : str);\n};\n\nmodule.exports = hash;","map":null,"metadata":{},"sourceType":"script"}