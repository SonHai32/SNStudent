{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst MultiEntryDependency = require(\"./dependencies/MultiEntryDependency\");\n\nconst SingleEntryDependency = require(\"./dependencies/SingleEntryDependency\");\n\nconst MultiModuleFactory = require(\"./MultiModuleFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass MultiEntryPlugin {\n  /**\n   * The MultiEntryPlugin is invoked whenever this.options.entry value is an array of paths\n   * @param {string} context context path\n   * @param {string[]} entries array of entry paths\n   * @param {string} name entry key name\n   */\n  constructor(context, entries, name) {\n    this.context = context;\n    this.entries = entries;\n    this.name = name;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"MultiEntryPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const multiModuleFactory = new MultiModuleFactory();\n      compilation.dependencyFactories.set(MultiEntryDependency, multiModuleFactory);\n      compilation.dependencyFactories.set(SingleEntryDependency, normalModuleFactory);\n    });\n    compiler.hooks.make.tapAsync(\"MultiEntryPlugin\", (compilation, callback) => {\n      const context = this.context,\n            entries = this.entries,\n            name = this.name;\n      const dep = MultiEntryPlugin.createDependency(entries, name);\n      compilation.addEntry(context, dep, name, callback);\n    });\n  }\n  /**\n   * @param {string[]} entries each entry path string\n   * @param {string} name name of the entry\n   * @returns {MultiEntryDependency} returns a constructed Dependency\n   */\n\n\n  static createDependency(entries, name) {\n    return new MultiEntryDependency(entries.map((e, idx) => {\n      const dep = new SingleEntryDependency(e); // Because entrypoints are not dependencies found in an\n      // existing module, we give it a synthetic id\n\n      dep.loc = {\n        name,\n        index: idx\n      };\n      return dep;\n    }), name);\n  }\n\n}\n\nmodule.exports = MultiEntryPlugin;","map":null,"metadata":{},"sourceType":"script"}