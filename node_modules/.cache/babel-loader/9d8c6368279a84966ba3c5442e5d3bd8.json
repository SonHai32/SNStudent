{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      RawSource = _require.RawSource,\n      ReplaceSource = _require.ReplaceSource; // TODO: clean up this file\n// replace with newer constructs\n// TODO: remove DependencyVariables and replace them with something better\n\n\nclass JavascriptGenerator {\n  generate(module, dependencyTemplates, runtimeTemplate) {\n    const originalSource = module.originalSource();\n\n    if (!originalSource) {\n      return new RawSource(\"throw new Error('No source available');\");\n    }\n\n    const source = new ReplaceSource(originalSource);\n    this.sourceBlock(module, module, [], dependencyTemplates, source, runtimeTemplate);\n    return source;\n  }\n\n  sourceBlock(module, block, availableVars, dependencyTemplates, source, runtimeTemplate) {\n    for (const dependency of block.dependencies) {\n      this.sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate);\n    }\n    /**\n     * Get the variables of all blocks that we need to inject.\n     * These will contain the variable name and its expression.\n     * The name will be added as a parameter in a IIFE the expression as its value.\n     */\n\n\n    const vars = block.variables.reduce((result, value) => {\n      const variable = this.sourceVariables(value, availableVars, dependencyTemplates, runtimeTemplate);\n\n      if (variable) {\n        result.push(variable);\n      }\n\n      return result;\n    }, []);\n    /**\n     * if we actually have variables\n     * this is important as how #splitVariablesInUniqueNamedChunks works\n     * it will always return an array in an array which would lead to a IIFE wrapper around\n     * a module if we do this with an empty vars array.\n     */\n\n    if (vars.length > 0) {\n      /**\n       * Split all variables up into chunks of unique names.\n       * e.g. imagine you have the following variable names that need to be injected:\n       * [foo, bar, baz, foo, some, more]\n       * we can not inject \"foo\" twice, therefore we just make two IIFEs like so:\n       * (function(foo, bar, baz){\n       *   (function(foo, some, more){\n       *     …\n       *   }(…));\n       * }(…));\n       *\n       * \"splitVariablesInUniqueNamedChunks\" splits the variables shown above up to this:\n       * [[foo, bar, baz], [foo, some, more]]\n       */\n      const injectionVariableChunks = this.splitVariablesInUniqueNamedChunks(vars); // create all the beginnings of IIFEs\n\n      const functionWrapperStarts = injectionVariableChunks.map(variableChunk => {\n        return this.variableInjectionFunctionWrapperStartCode(variableChunk.map(variable => variable.name));\n      }); // and all the ends\n\n      const functionWrapperEnds = injectionVariableChunks.map(variableChunk => {\n        return this.variableInjectionFunctionWrapperEndCode(module, variableChunk.map(variable => variable.expression), block);\n      }); // join them to one big string\n\n      const varStartCode = functionWrapperStarts.join(\"\"); // reverse the ends first before joining them, as the last added must be the inner most\n\n      const varEndCode = functionWrapperEnds.reverse().join(\"\"); // if we have anything, add it to the source\n\n      if (varStartCode && varEndCode) {\n        const start = block.range ? block.range[0] : -10;\n        const end = block.range ? block.range[1] : module.originalSource().size() + 1;\n        source.insert(start + 0.5, varStartCode);\n        source.insert(end + 0.5, \"\\n/* WEBPACK VAR INJECTION */\" + varEndCode);\n      }\n    }\n\n    for (const childBlock of block.blocks) {\n      this.sourceBlock(module, childBlock, availableVars.concat(vars), dependencyTemplates, source, runtimeTemplate);\n    }\n  }\n\n  sourceDependency(dependency, dependencyTemplates, source, runtimeTemplate) {\n    const template = dependencyTemplates.get(dependency.constructor);\n\n    if (!template) {\n      throw new Error(\"No template for dependency: \" + dependency.constructor.name);\n    }\n\n    template.apply(dependency, source, runtimeTemplate, dependencyTemplates);\n  }\n\n  sourceVariables(variable, availableVars, dependencyTemplates, runtimeTemplate) {\n    const name = variable.name;\n    const expr = variable.expressionSource(dependencyTemplates, runtimeTemplate);\n\n    if (availableVars.some(v => v.name === name && v.expression.source() === expr.source())) {\n      return;\n    }\n\n    return {\n      name: name,\n      expression: expr\n    };\n  }\n  /*\n   * creates the start part of a IIFE around the module to inject a variable name\n   * (function(…){   <- this part\n   * }.call(…))\n   */\n\n\n  variableInjectionFunctionWrapperStartCode(varNames) {\n    const args = varNames.join(\", \");\n    return \"/* WEBPACK VAR INJECTION */(function(\".concat(args, \") {\");\n  }\n\n  contextArgument(module, block) {\n    if (this === block) {\n      return module.exportsArgument;\n    }\n\n    return \"this\";\n  }\n  /*\n   * creates the end part of a IIFE around the module to inject a variable name\n   * (function(…){\n   * }.call(…))   <- this part\n   */\n\n\n  variableInjectionFunctionWrapperEndCode(module, varExpressions, block) {\n    const firstParam = this.contextArgument(module, block);\n    const furtherParams = varExpressions.map(e => e.source()).join(\", \");\n    return \"}.call(\".concat(firstParam, \", \").concat(furtherParams, \"))\");\n  }\n\n  splitVariablesInUniqueNamedChunks(vars) {\n    const startState = [[]];\n    return vars.reduce((chunks, variable) => {\n      const current = chunks[chunks.length - 1]; // check if variable with same name exists already\n      // if so create a new chunk of variables.\n\n      const variableNameAlreadyExists = current.some(v => v.name === variable.name);\n\n      if (variableNameAlreadyExists) {\n        // start new chunk with current variable\n        chunks.push([variable]);\n      } else {\n        // else add it to current chunk\n        current.push(variable);\n      }\n\n      return chunks;\n    }, startState);\n  }\n\n}\n\nmodule.exports = JavascriptGenerator;","map":null,"metadata":{},"sourceType":"script"}