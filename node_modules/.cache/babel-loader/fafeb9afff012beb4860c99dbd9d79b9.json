{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SetVarMainTemplatePlugin = require(\"./SetVarMainTemplatePlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").LibraryCustomUmdObject} LibraryCustomUmdObject */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string[]} accessor the accessor to convert to path\n * @returns {string} the path\n */\n\n\nconst accessorToObjectAccess = accessor => {\n  return accessor.map(a => \"[\".concat(JSON.stringify(a), \"]\")).join(\"\");\n};\n/**\n * @param {string=} base the path prefix\n * @param {string|string[]|LibraryCustomUmdObject} accessor the accessor\n * @param {\"amd\" | \"commonjs\" | \"root\"} umdProperty property used when a custom umd object is provided\n * @param {string=} joinWith the element separator\n * @returns {string} the path\n */\n\n\nconst accessorAccess = (base, accessor, umdProperty, joinWith = \"; \") => {\n  const normalizedAccessor = typeof accessor === \"object\" && !Array.isArray(accessor) ? accessor[umdProperty] : accessor;\n  const accessors = Array.isArray(normalizedAccessor) ? normalizedAccessor : [normalizedAccessor];\n  return accessors.map((_, idx) => {\n    const a = base ? base + accessorToObjectAccess(accessors.slice(0, idx + 1)) : accessors[0] + accessorToObjectAccess(accessors.slice(1, idx + 1));\n    if (idx === accessors.length - 1) return a;\n\n    if (idx === 0 && base === undefined) {\n      return \"\".concat(a, \" = typeof \").concat(a, \" === \\\"object\\\" ? \").concat(a, \" : {}\");\n    }\n\n    return \"\".concat(a, \" = \").concat(a, \" || {}\");\n  }).join(joinWith);\n};\n\nclass LibraryTemplatePlugin {\n  /**\n   * @param {string|string[]|LibraryCustomUmdObject} name name of library\n   * @param {string} target type of library\n   * @param {boolean} umdNamedDefine setting this to true will name the UMD module\n   * @param {string|TODO} auxiliaryComment comment in the UMD wrapper\n   * @param {string|string[]} exportProperty which export should be exposed as library\n   */\n  constructor(name, target, umdNamedDefine, auxiliaryComment, exportProperty) {\n    this.name = name;\n    this.target = target;\n    this.umdNamedDefine = umdNamedDefine;\n    this.auxiliaryComment = auxiliaryComment;\n    this.exportProperty = exportProperty;\n  }\n  /**\n   * @param {Compiler} compiler the compiler instance\n   * @returns {void}\n   */\n\n\n  apply(compiler) {\n    compiler.hooks.thisCompilation.tap(\"LibraryTemplatePlugin\", compilation => {\n      if (this.exportProperty) {\n        const ExportPropertyMainTemplatePlugin = require(\"./ExportPropertyMainTemplatePlugin\");\n\n        new ExportPropertyMainTemplatePlugin(this.exportProperty).apply(compilation);\n      }\n\n      switch (this.target) {\n        case \"var\":\n          if (!this.name || typeof this.name === \"object\" && !Array.isArray(this.name)) {\n            throw new Error(\"library name must be set and not an UMD custom object for non-UMD target\");\n          }\n\n          new SetVarMainTemplatePlugin(\"var \".concat(accessorAccess(undefined, this.name, \"root\")), false).apply(compilation);\n          break;\n\n        case \"assign\":\n          new SetVarMainTemplatePlugin(accessorAccess(undefined, this.name, \"root\"), false).apply(compilation);\n          break;\n\n        case \"this\":\n        case \"self\":\n        case \"window\":\n          if (this.name) {\n            new SetVarMainTemplatePlugin(accessorAccess(this.target, this.name, \"root\"), false).apply(compilation);\n          } else {\n            new SetVarMainTemplatePlugin(this.target, true).apply(compilation);\n          }\n\n          break;\n\n        case \"global\":\n          if (this.name) {\n            new SetVarMainTemplatePlugin(accessorAccess(compilation.runtimeTemplate.outputOptions.globalObject, this.name, \"root\"), false).apply(compilation);\n          } else {\n            new SetVarMainTemplatePlugin(compilation.runtimeTemplate.outputOptions.globalObject, true).apply(compilation);\n          }\n\n          break;\n\n        case \"commonjs\":\n          if (this.name) {\n            new SetVarMainTemplatePlugin(accessorAccess(\"exports\", this.name, \"commonjs\"), false).apply(compilation);\n          } else {\n            new SetVarMainTemplatePlugin(\"exports\", true).apply(compilation);\n          }\n\n          break;\n\n        case \"commonjs2\":\n        case \"commonjs-module\":\n          new SetVarMainTemplatePlugin(\"module.exports\", false).apply(compilation);\n          break;\n\n        case \"amd\":\n        case \"amd-require\":\n          {\n            const AmdMainTemplatePlugin = require(\"./AmdMainTemplatePlugin\");\n\n            if (this.name && typeof this.name !== \"string\") {\n              throw new Error(\"library name must be a string for amd target\");\n            }\n\n            new AmdMainTemplatePlugin({\n              name: this.name,\n              requireAsWrapper: this.target === \"amd-require\"\n            }).apply(compilation);\n            break;\n          }\n\n        case \"umd\":\n        case \"umd2\":\n          {\n            const UmdMainTemplatePlugin = require(\"./UmdMainTemplatePlugin\");\n\n            new UmdMainTemplatePlugin(this.name, {\n              optionalAmdExternalAsGlobal: this.target === \"umd2\",\n              namedDefine: this.umdNamedDefine,\n              auxiliaryComment: this.auxiliaryComment\n            }).apply(compilation);\n            break;\n          }\n\n        case \"jsonp\":\n          {\n            const JsonpExportMainTemplatePlugin = require(\"./web/JsonpExportMainTemplatePlugin\");\n\n            if (typeof this.name !== \"string\") throw new Error(\"library name must be a string for jsonp target\");\n            new JsonpExportMainTemplatePlugin(this.name).apply(compilation);\n            break;\n          }\n\n        case \"system\":\n          {\n            const SystemMainTemplatePlugin = require(\"./SystemMainTemplatePlugin\");\n\n            new SystemMainTemplatePlugin({\n              name: this.name\n            }).apply(compilation);\n            break;\n          }\n\n        default:\n          throw new Error(\"\".concat(this.target, \" is not a valid Library target\"));\n      }\n    });\n  }\n\n}\n\nmodule.exports = LibraryTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}