{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst createHash = require(\"./util/createHash\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/HashedModuleIdsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/HashedModuleIdsPlugin\").HashedModuleIdsPluginOptions} HashedModuleIdsPluginOptions */\n\n\nclass HashedModuleIdsPlugin {\n  /**\n   * @param {HashedModuleIdsPluginOptions=} options options object\n   */\n  constructor(options) {\n    if (!options) options = {};\n    validateOptions(schema, options, \"Hashed Module Ids Plugin\");\n    /** @type {HashedModuleIdsPluginOptions} */\n\n    this.options = Object.assign({\n      context: null,\n      hashFunction: \"md4\",\n      hashDigest: \"base64\",\n      hashDigestLength: 4\n    }, options);\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"HashedModuleIdsPlugin\", compilation => {\n      const usedIds = new Set();\n      compilation.hooks.beforeModuleIds.tap(\"HashedModuleIdsPlugin\", modules => {\n        for (const module of modules) {\n          if (module.id === null && module.libIdent) {\n            const id = module.libIdent({\n              context: this.options.context || compiler.options.context\n            });\n            const hash = createHash(options.hashFunction);\n            hash.update(id);\n            const hashId =\n            /** @type {string} */\n            hash.digest(options.hashDigest);\n            let len = options.hashDigestLength;\n\n            while (usedIds.has(hashId.substr(0, len))) len++;\n\n            module.id = hashId.substr(0, len);\n            usedIds.add(module.id);\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = HashedModuleIdsPlugin;","map":null,"metadata":{},"sourceType":"script"}