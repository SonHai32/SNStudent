{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst AMDRequireDependency = require(\"./AMDRequireDependency\");\n\nconst AMDRequireItemDependency = require(\"./AMDRequireItemDependency\");\n\nconst AMDRequireArrayDependency = require(\"./AMDRequireArrayDependency\");\n\nconst AMDRequireContextDependency = require(\"./AMDRequireContextDependency\");\n\nconst AMDDefineDependency = require(\"./AMDDefineDependency\");\n\nconst UnsupportedDependency = require(\"./UnsupportedDependency\");\n\nconst LocalModuleDependency = require(\"./LocalModuleDependency\");\n\nconst NullFactory = require(\"../NullFactory\");\n\nconst AMDRequireDependenciesBlockParserPlugin = require(\"./AMDRequireDependenciesBlockParserPlugin\");\n\nconst AMDDefineDependencyParserPlugin = require(\"./AMDDefineDependencyParserPlugin\");\n\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass AMDPlugin {\n  constructor(options, amdOptions) {\n    this.amdOptions = amdOptions;\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    const amdOptions = this.amdOptions;\n    compiler.hooks.compilation.tap(\"AMDPlugin\", (compilation, {\n      contextModuleFactory,\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(AMDRequireDependency, new NullFactory());\n      compilation.dependencyTemplates.set(AMDRequireDependency, new AMDRequireDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireItemDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireItemDependency, new AMDRequireItemDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireArrayDependency, new NullFactory());\n      compilation.dependencyTemplates.set(AMDRequireArrayDependency, new AMDRequireArrayDependency.Template());\n      compilation.dependencyFactories.set(AMDRequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(AMDRequireContextDependency, new AMDRequireContextDependency.Template());\n      compilation.dependencyFactories.set(AMDDefineDependency, new NullFactory());\n      compilation.dependencyTemplates.set(AMDDefineDependency, new AMDDefineDependency.Template());\n      compilation.dependencyFactories.set(UnsupportedDependency, new NullFactory());\n      compilation.dependencyTemplates.set(UnsupportedDependency, new UnsupportedDependency.Template());\n      compilation.dependencyFactories.set(LocalModuleDependency, new NullFactory());\n      compilation.dependencyTemplates.set(LocalModuleDependency, new LocalModuleDependency.Template());\n\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.amd !== undefined && !parserOptions.amd) return;\n\n        const setExpressionToModule = (outerExpr, module) => {\n          parser.hooks.expression.for(outerExpr).tap(\"AMDPlugin\", expr => {\n            const dep = new AMDRequireItemDependency(module, expr.range);\n            dep.userRequest = outerExpr;\n            dep.loc = expr.loc;\n            parser.state.current.addDependency(dep);\n            return true;\n          });\n        };\n\n        new AMDRequireDependenciesBlockParserPlugin(options).apply(parser);\n        new AMDDefineDependencyParserPlugin(options).apply(parser);\n        setExpressionToModule(\"require.amd\", \"!!webpack amd options\");\n        setExpressionToModule(\"define.amd\", \"!!webpack amd options\");\n        setExpressionToModule(\"define\", \"!!webpack amd define\");\n        parser.hooks.expression.for(\"__webpack_amd_options__\").tap(\"AMDPlugin\", () => parser.state.current.addVariable(\"__webpack_amd_options__\", JSON.stringify(amdOptions)));\n        parser.hooks.evaluateTypeof.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n        parser.hooks.evaluateTypeof.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(typeof amdOptions));\n        parser.hooks.evaluateIdentifier.for(\"define.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"define.amd\", true));\n        parser.hooks.evaluateIdentifier.for(\"require.amd\").tap(\"AMDPlugin\", ParserHelpers.evaluateToIdentifier(\"require.amd\", true));\n        parser.hooks.typeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n        parser.hooks.canRename.for(\"define\").tap(\"AMDPlugin\", ParserHelpers.approve);\n        parser.hooks.rename.for(\"define\").tap(\"AMDPlugin\", expr => {\n          const dep = new AMDRequireItemDependency(\"!!webpack amd define\", expr.range);\n          dep.userRequest = \"define\";\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          return false;\n        });\n        parser.hooks.typeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"require\").tap(\"AMDPlugin\", ParserHelpers.evaluateToString(\"function\"));\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"AMDPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"AMDPlugin\", handler);\n    });\n    compiler.hooks.afterResolvers.tap(\"AMDPlugin\", () => {\n      compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"AMDPlugin\", resolver => {\n        new AliasPlugin(\"described-resolve\", {\n          name: \"amdefine\",\n          alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n        }, \"resolve\").apply(resolver);\n        new AliasPlugin(\"described-resolve\", {\n          name: \"webpack amd options\",\n          alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-options.js\")\n        }, \"resolve\").apply(resolver);\n        new AliasPlugin(\"described-resolve\", {\n          name: \"webpack amd define\",\n          alias: path.join(__dirname, \"..\", \"..\", \"buildin\", \"amd-define.js\")\n        }, \"resolve\").apply(resolver);\n      });\n    });\n  }\n\n}\n\nmodule.exports = AMDPlugin;","map":null,"metadata":{},"sourceType":"script"}