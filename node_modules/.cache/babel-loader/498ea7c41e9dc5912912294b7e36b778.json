{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SourceNode = require(\"source-map\").SourceNode;\n\nconst SourceListMap = require(\"source-list-map\").SourceListMap;\n\nconst Source = require(\"./Source\");\n\nclass ConcatSource extends Source {\n  constructor() {\n    super();\n    this.children = [];\n\n    for (var i = 0; i < arguments.length; i++) {\n      var item = arguments[i];\n\n      if (item instanceof ConcatSource) {\n        var children = item.children;\n\n        for (var j = 0; j < children.length; j++) this.children.push(children[j]);\n      } else {\n        this.children.push(item);\n      }\n    }\n  }\n\n  add(item) {\n    if (item instanceof ConcatSource) {\n      var children = item.children;\n\n      for (var j = 0; j < children.length; j++) this.children.push(children[j]);\n    } else {\n      this.children.push(item);\n    }\n  }\n\n  source() {\n    let source = \"\";\n    const children = this.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      source += typeof child === \"string\" ? child : child.source();\n    }\n\n    return source;\n  }\n\n  size() {\n    let size = 0;\n    const children = this.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      size += typeof child === \"string\" ? child.length : child.size();\n    }\n\n    return size;\n  }\n\n  node(options) {\n    const node = new SourceNode(null, null, null, this.children.map(function (item) {\n      return typeof item === \"string\" ? item : item.node(options);\n    }));\n    return node;\n  }\n\n  listMap(options) {\n    const map = new SourceListMap();\n    var children = this.children;\n\n    for (var i = 0; i < children.length; i++) {\n      var item = children[i];\n      if (typeof item === \"string\") map.add(item);else map.add(item.listMap(options));\n    }\n\n    return map;\n  }\n\n  updateHash(hash) {\n    var children = this.children;\n\n    for (var i = 0; i < children.length; i++) {\n      var item = children[i];\n      if (typeof item === \"string\") hash.update(item);else item.updateHash(hash);\n    }\n  }\n\n}\n\nrequire(\"./SourceAndMapMixin\")(ConcatSource.prototype);\n\nmodule.exports = ConcatSource;","map":null,"metadata":{},"sourceType":"script"}