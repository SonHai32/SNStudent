{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/LoaderOptionsPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/LoaderOptionsPlugin\").LoaderOptionsPluginOptions} LoaderOptionsPluginOptions */\n\n\nclass LoaderOptionsPlugin {\n  /**\n   * @param {LoaderOptionsPluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options || {}, \"Loader Options Plugin\");\n    if (typeof options !== \"object\") options = {};\n\n    if (!options.test) {\n      options.test = {\n        test: () => true\n      };\n    }\n\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"LoaderOptionsPlugin\", compilation => {\n      compilation.hooks.normalModuleLoader.tap(\"LoaderOptionsPlugin\", (context, module) => {\n        const resource = module.resource;\n        if (!resource) return;\n        const i = resource.indexOf(\"?\");\n\n        if (ModuleFilenameHelpers.matchObject(options, i < 0 ? resource : resource.substr(0, i))) {\n          for (const key of Object.keys(options)) {\n            if (key === \"include\" || key === \"exclude\" || key === \"test\") {\n              continue;\n            }\n\n            context[key] = options[key];\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = LoaderOptionsPlugin;","map":null,"metadata":{},"sourceType":"script"}