{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      ConcatSource = _require.ConcatSource;\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst Template = require(\"./Template\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/BannerPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginArgument} BannerPluginArgument */\n\n/** @typedef {import(\"../declarations/plugins/BannerPlugin\").BannerPluginOptions} BannerPluginOptions */\n\n\nconst wrapComment = str => {\n  if (!str.includes(\"\\n\")) {\n    return Template.toComment(str);\n  }\n\n  return \"/*!\\n * \".concat(str.replace(/\\*\\//g, \"* /\").split(\"\\n\").join(\"\\n * \"), \"\\n */\");\n};\n\nclass BannerPlugin {\n  /**\n   * @param {BannerPluginArgument} options options object\n   */\n  constructor(options) {\n    if (arguments.length > 1) {\n      throw new Error(\"BannerPlugin only takes one argument (pass an options object)\");\n    }\n\n    validateOptions(schema, options, \"Banner Plugin\");\n\n    if (typeof options === \"string\" || typeof options === \"function\") {\n      options = {\n        banner: options\n      };\n    }\n    /** @type {BannerPluginOptions} */\n\n\n    this.options = options;\n    const bannerOption = options.banner;\n\n    if (typeof bannerOption === \"function\") {\n      const getBanner = bannerOption;\n      this.banner = this.options.raw ? getBanner : data => wrapComment(getBanner(data));\n    } else {\n      const banner = this.options.raw ? bannerOption : wrapComment(bannerOption);\n\n      this.banner = () => banner;\n    }\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    const banner = this.banner;\n    const matchObject = ModuleFilenameHelpers.matchObject.bind(undefined, options);\n    compiler.hooks.compilation.tap(\"BannerPlugin\", compilation => {\n      compilation.hooks.optimizeChunkAssets.tap(\"BannerPlugin\", chunks => {\n        for (const chunk of chunks) {\n          if (options.entryOnly && !chunk.canBeInitial()) {\n            continue;\n          }\n\n          for (const file of chunk.files) {\n            if (!matchObject(file)) {\n              continue;\n            }\n\n            let basename;\n            let query = \"\";\n            let filename = file;\n            const hash = compilation.hash;\n            const querySplit = filename.indexOf(\"?\");\n\n            if (querySplit >= 0) {\n              query = filename.substr(querySplit);\n              filename = filename.substr(0, querySplit);\n            }\n\n            const lastSlashIndex = filename.lastIndexOf(\"/\");\n\n            if (lastSlashIndex === -1) {\n              basename = filename;\n            } else {\n              basename = filename.substr(lastSlashIndex + 1);\n            }\n\n            const data = {\n              hash,\n              chunk,\n              filename,\n              basename,\n              query\n            };\n            const comment = compilation.getPath(banner(data), data);\n            compilation.assets[file] = new ConcatSource(comment, \"\\n\", compilation.assets[file]);\n          }\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = BannerPlugin;","map":null,"metadata":{},"sourceType":"script"}