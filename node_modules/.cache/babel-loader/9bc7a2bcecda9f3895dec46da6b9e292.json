{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Module = require(\"./Module\");\n\nconst Template = require(\"./Template\");\n\nconst _require = require(\"webpack-sources\"),\n      RawSource = _require.RawSource;\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nclass MultiModule extends Module {\n  constructor(context, dependencies, name) {\n    super(\"javascript/dynamic\", context); // Info from Factory\n\n    this.dependencies = dependencies;\n    this.name = name;\n    this._identifier = \"multi \".concat(this.dependencies.map(d => d.request).join(\" \"));\n  }\n\n  identifier() {\n    return this._identifier;\n  }\n\n  readableIdentifier(requestShortener) {\n    return \"multi \".concat(this.dependencies.map(d => requestShortener.shorten(d.request)).join(\" \"));\n  }\n\n  build(options, compilation, resolver, fs, callback) {\n    this.built = true;\n    this.buildMeta = {};\n    this.buildInfo = {};\n    return callback();\n  }\n\n  needRebuild() {\n    return false;\n  }\n\n  size() {\n    return 16 + this.dependencies.length * 12;\n  }\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @returns {void}\n   */\n\n\n  updateHash(hash) {\n    hash.update(\"multi module\");\n    hash.update(this.name || \"\");\n    super.updateHash(hash);\n  }\n\n  source(dependencyTemplates, runtimeTemplate) {\n    const str = [];\n    let idx = 0;\n\n    for (const dep of this.dependencies) {\n      if (dep.module) {\n        if (idx === this.dependencies.length - 1) {\n          str.push(\"module.exports = \");\n        }\n\n        str.push(\"__webpack_require__(\");\n\n        if (runtimeTemplate.outputOptions.pathinfo) {\n          str.push(Template.toComment(dep.request));\n        }\n\n        str.push(\"\".concat(JSON.stringify(dep.module.id)));\n        str.push(\")\");\n      } else {\n        const content = require(\"./dependencies/WebpackMissingModule\").module(dep.request);\n\n        str.push(content);\n      }\n\n      str.push(\";\\n\");\n      idx++;\n    }\n\n    return new RawSource(str.join(\"\"));\n  }\n\n}\n\nmodule.exports = MultiModule;","map":null,"metadata":{},"sourceType":"script"}