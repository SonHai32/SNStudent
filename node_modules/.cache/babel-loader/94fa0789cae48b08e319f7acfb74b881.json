{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nconst forEachBail = require(\"./forEachBail\");\n\nconst getPaths = require(\"./getPaths\");\n\nmodule.exports = class ModulesInHierachicDirectoriesPlugin {\n  constructor(source, directories, target) {\n    this.source = source;\n    this.directories = [].concat(directories);\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ModulesInHierachicDirectoriesPlugin\", (request, resolveContext, callback) => {\n      const fs = resolver.fileSystem;\n      const addrs = getPaths(request.path).paths.map(p => {\n        return this.directories.map(d => resolver.join(p, d));\n      }).reduce((array, p) => {\n        array.push.apply(array, p);\n        return array;\n      }, []);\n      forEachBail(addrs, (addr, callback) => {\n        fs.stat(addr, (err, stat) => {\n          if (!err && stat && stat.isDirectory()) {\n            const obj = Object.assign({}, request, {\n              path: addr,\n              request: \"./\" + request.request\n            });\n            const message = \"looking for modules in \" + addr;\n            return resolver.doResolve(target, obj, message, resolveContext, callback);\n          }\n\n          if (resolveContext.log) resolveContext.log(addr + \" doesn't exist or is not a directory\");\n          if (resolveContext.missing) resolveContext.missing.add(addr);\n          return callback();\n        });\n      }, callback);\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}