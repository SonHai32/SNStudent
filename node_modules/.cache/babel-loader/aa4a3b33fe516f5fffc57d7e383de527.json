{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/**\n * Gets the value at path of object\n * @param {object} obj object to query\n * @param {string} path query path\n * @returns {any} - if {@param path} requests element from array, then `undefined` will be returned\n */\n\nconst getProperty = (obj, path) => {\n  let name = path.split(\".\");\n\n  for (let i = 0; i < name.length - 1; i++) {\n    obj = obj[name[i]];\n    if (typeof obj !== \"object\" || !obj || Array.isArray(obj)) return;\n  }\n\n  return obj[name.pop()];\n};\n/**\n * Sets the value at path of object. Stops execution, if {@param path} requests element from array to be set\n * @param {object} obj object to query\n * @param {string} path query path\n * @param {any} value value to be set\n * @returns {void}\n */\n\n\nconst setProperty = (obj, path, value) => {\n  let name = path.split(\".\");\n\n  for (let i = 0; i < name.length - 1; i++) {\n    if (typeof obj[name[i]] !== \"object\" && obj[name[i]] !== undefined) return;\n    if (Array.isArray(obj[name[i]])) return;\n    if (!obj[name[i]]) obj[name[i]] = {};\n    obj = obj[name[i]];\n  }\n\n  obj[name.pop()] = value;\n};\n/**\n * @typedef {'call' | 'make' | 'append'} ConfigType\n */\n\n/**\n * @typedef {(options: object) => any} MakeConfigHandler\n */\n\n/**\n * @typedef {(value: any, options: object) => any} CallConfigHandler\n */\n\n/**\n * @typedef {any[]} AppendConfigValues\n */\n\n\nclass OptionsDefaulter {\n  constructor() {\n    /**\n     * Stores default options settings or functions for computing them\n     */\n    this.defaults = {};\n    /**\n     * Stores configuration for options\n     * @type {{[key: string]: ConfigType}}\n     */\n\n    this.config = {};\n  }\n  /**\n   * Enhancing {@param options} with default values\n   * @param {object} options provided options\n   * @returns {object} - enhanced options\n   * @throws {Error} - will throw error, if configuration value is other then `undefined` or {@link ConfigType}\n   */\n\n\n  process(options) {\n    options = Object.assign({}, options);\n\n    for (let name in this.defaults) {\n      switch (this.config[name]) {\n        /**\n         * If {@link ConfigType} doesn't specified and current value is `undefined`, then default value will be assigned\n         */\n        case undefined:\n          if (getProperty(options, name) === undefined) {\n            setProperty(options, name, this.defaults[name]);\n          }\n\n          break;\n\n        /**\n         * Assign result of {@link CallConfigHandler}\n         */\n\n        case \"call\":\n          setProperty(options, name, this.defaults[name].call(this, getProperty(options, name), options));\n          break;\n\n        /**\n         * Assign result of {@link MakeConfigHandler}, if current value is `undefined`\n         */\n\n        case \"make\":\n          if (getProperty(options, name) === undefined) {\n            setProperty(options, name, this.defaults[name].call(this, options));\n          }\n\n          break;\n\n        /**\n         * Adding {@link AppendConfigValues} at the end of the current array\n         */\n\n        case \"append\":\n          {\n            let oldValue = getProperty(options, name);\n\n            if (!Array.isArray(oldValue)) {\n              oldValue = [];\n            }\n\n            oldValue.push(...this.defaults[name]);\n            setProperty(options, name, oldValue);\n            break;\n          }\n\n        default:\n          throw new Error(\"OptionsDefaulter cannot process \" + this.config[name]);\n      }\n    }\n\n    return options;\n  }\n  /**\n   * Builds up default values\n   * @param {string} name option path\n   * @param {ConfigType | any} config if {@param def} is provided, then only {@link ConfigType} is allowed\n   * @param {MakeConfigHandler | CallConfigHandler | AppendConfigValues} [def] defaults\n   * @returns {void}\n   */\n\n\n  set(name, config, def) {\n    if (def !== undefined) {\n      this.defaults[name] = def;\n      this.config[name] = config;\n    } else {\n      this.defaults[name] = config;\n      delete this.config[name];\n    }\n  }\n\n}\n\nmodule.exports = OptionsDefaulter;","map":null,"metadata":{},"sourceType":"script"}