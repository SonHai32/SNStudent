{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst NORMALIZE_SLASH_DIRECTION_REGEXP = /\\\\/g;\nconst PATH_CHARS_REGEXP = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\nconst SEPARATOR_REGEXP = /[/\\\\]$/;\nconst FRONT_OR_BACK_BANG_REGEXP = /^!|!$/g;\nconst INDEX_JS_REGEXP = /\\/index.js(!|\\?|\\(query\\))/g;\nconst MATCH_RESOURCE_REGEXP = /!=!/;\n\nconst normalizeBackSlashDirection = request => {\n  return request.replace(NORMALIZE_SLASH_DIRECTION_REGEXP, \"/\");\n};\n\nconst createRegExpForPath = path => {\n  const regexpTypePartial = path.replace(PATH_CHARS_REGEXP, \"\\\\$&\");\n  return new RegExp(\"(^|!)\".concat(regexpTypePartial), \"g\");\n};\n\nclass RequestShortener {\n  constructor(directory) {\n    directory = normalizeBackSlashDirection(directory);\n\n    if (SEPARATOR_REGEXP.test(directory)) {\n      directory = directory.substr(0, directory.length - 1);\n    }\n\n    if (directory) {\n      this.currentDirectoryRegExp = createRegExpForPath(directory);\n    }\n\n    const dirname = path.dirname(directory);\n    const endsWithSeparator = SEPARATOR_REGEXP.test(dirname);\n    const parentDirectory = endsWithSeparator ? dirname.substr(0, dirname.length - 1) : dirname;\n\n    if (parentDirectory && parentDirectory !== directory) {\n      this.parentDirectoryRegExp = createRegExpForPath(parentDirectory);\n    }\n\n    if (__dirname.length >= 2) {\n      const buildins = normalizeBackSlashDirection(path.join(__dirname, \"..\"));\n      const buildinsAsModule = this.currentDirectoryRegExp && this.currentDirectoryRegExp.test(buildins);\n      this.buildinsAsModule = buildinsAsModule;\n      this.buildinsRegExp = createRegExpForPath(buildins);\n    }\n\n    this.cache = new Map();\n  }\n\n  shorten(request) {\n    if (!request) return request;\n    const cacheEntry = this.cache.get(request);\n\n    if (cacheEntry !== undefined) {\n      return cacheEntry;\n    }\n\n    let result = normalizeBackSlashDirection(request);\n\n    if (this.buildinsAsModule && this.buildinsRegExp) {\n      result = result.replace(this.buildinsRegExp, \"!(webpack)\");\n    }\n\n    if (this.currentDirectoryRegExp) {\n      result = result.replace(this.currentDirectoryRegExp, \"!.\");\n    }\n\n    if (this.parentDirectoryRegExp) {\n      result = result.replace(this.parentDirectoryRegExp, \"!..\");\n    }\n\n    if (!this.buildinsAsModule && this.buildinsRegExp) {\n      result = result.replace(this.buildinsRegExp, \"!(webpack)\");\n    }\n\n    result = result.replace(INDEX_JS_REGEXP, \"$1\");\n    result = result.replace(FRONT_OR_BACK_BANG_REGEXP, \"\");\n    result = result.replace(MATCH_RESOURCE_REGEXP, \" = \");\n    this.cache.set(request, result);\n    return result;\n  }\n\n}\n\nmodule.exports = RequestShortener;","map":null,"metadata":{},"sourceType":"script"}