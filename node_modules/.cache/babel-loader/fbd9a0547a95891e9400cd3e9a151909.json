{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nconst OptionsDefaulter = require(\"./OptionsDefaulter\");\n\nconst Template = require(\"./Template\");\n\nconst isProductionLikeMode = options => {\n  return options.mode === \"production\" || !options.mode;\n};\n\nconst isWebLikeTarget = options => {\n  return options.target === \"web\" || options.target === \"webworker\";\n};\n\nconst getDevtoolNamespace = library => {\n  // if options.output.library is a string\n  if (Array.isArray(library)) {\n    return library.join(\".\");\n  } else if (typeof library === \"object\") {\n    return getDevtoolNamespace(library.root);\n  }\n\n  return library || \"\";\n};\n\nclass WebpackOptionsDefaulter extends OptionsDefaulter {\n  constructor() {\n    super();\n    this.set(\"entry\", \"./src\");\n    this.set(\"devtool\", \"make\", options => options.mode === \"development\" ? \"eval\" : false);\n    this.set(\"cache\", \"make\", options => options.mode === \"development\");\n    this.set(\"context\", process.cwd());\n    this.set(\"target\", \"web\");\n    this.set(\"module\", \"call\", value => Object.assign({}, value));\n    this.set(\"module.unknownContextRequest\", \".\");\n    this.set(\"module.unknownContextRegExp\", false);\n    this.set(\"module.unknownContextRecursive\", true);\n    this.set(\"module.unknownContextCritical\", true);\n    this.set(\"module.exprContextRequest\", \".\");\n    this.set(\"module.exprContextRegExp\", false);\n    this.set(\"module.exprContextRecursive\", true);\n    this.set(\"module.exprContextCritical\", true);\n    this.set(\"module.wrappedContextRegExp\", /.*/);\n    this.set(\"module.wrappedContextRecursive\", true);\n    this.set(\"module.wrappedContextCritical\", false);\n    this.set(\"module.strictExportPresence\", false);\n    this.set(\"module.strictThisContextOnImports\", false);\n    this.set(\"module.unsafeCache\", \"make\", options => !!options.cache);\n    this.set(\"module.rules\", []);\n    this.set(\"module.defaultRules\", \"make\", options => [{\n      type: \"javascript/auto\",\n      resolve: {}\n    }, {\n      test: /\\.mjs$/i,\n      type: \"javascript/esm\",\n      resolve: {\n        mainFields: options.target === \"web\" || options.target === \"webworker\" || options.target === \"electron-renderer\" ? [\"browser\", \"main\"] : [\"main\"]\n      }\n    }, {\n      test: /\\.json$/i,\n      type: \"json\"\n    }, {\n      test: /\\.wasm$/i,\n      type: \"webassembly/experimental\"\n    }]);\n    this.set(\"output\", \"call\", (value, options) => {\n      if (typeof value === \"string\") {\n        return {\n          filename: value\n        };\n      } else if (typeof value !== \"object\") {\n        return {};\n      } else {\n        return Object.assign({}, value);\n      }\n    });\n    this.set(\"output.filename\", \"[name].js\");\n    this.set(\"output.chunkFilename\", \"make\", options => {\n      const filename = options.output.filename;\n\n      if (typeof filename !== \"function\") {\n        const hasName = filename.includes(\"[name]\");\n        const hasId = filename.includes(\"[id]\");\n        const hasChunkHash = filename.includes(\"[chunkhash]\"); // Anything changing depending on chunk is fine\n\n        if (hasChunkHash || hasName || hasId) return filename; // Elsewise prefix \"[id].\" in front of the basename to make it changing\n\n        return filename.replace(/(^|\\/)([^/]*(?:\\?|$))/, \"$1[id].$2\");\n      }\n\n      return \"[id].js\";\n    });\n    this.set(\"output.webassemblyModuleFilename\", \"[modulehash].module.wasm\");\n    this.set(\"output.library\", \"\");\n    this.set(\"output.hotUpdateFunction\", \"make\", options => {\n      return Template.toIdentifier(\"webpackHotUpdate\" + Template.toIdentifier(options.output.library));\n    });\n    this.set(\"output.jsonpFunction\", \"make\", options => {\n      return Template.toIdentifier(\"webpackJsonp\" + Template.toIdentifier(options.output.library));\n    });\n    this.set(\"output.chunkCallbackName\", \"make\", options => {\n      return Template.toIdentifier(\"webpackChunk\" + Template.toIdentifier(options.output.library));\n    });\n    this.set(\"output.globalObject\", \"make\", options => {\n      switch (options.target) {\n        case \"web\":\n        case \"electron-renderer\":\n        case \"node-webkit\":\n          return \"window\";\n\n        case \"webworker\":\n          return \"self\";\n\n        case \"node\":\n        case \"async-node\":\n        case \"electron-main\":\n          return \"global\";\n\n        default:\n          return \"self\";\n      }\n    });\n    this.set(\"output.devtoolNamespace\", \"make\", options => {\n      return getDevtoolNamespace(options.output.library);\n    });\n    this.set(\"output.libraryTarget\", \"var\");\n    this.set(\"output.path\", path.join(process.cwd(), \"dist\"));\n    this.set(\"output.pathinfo\", \"make\", options => options.mode === \"development\");\n    this.set(\"output.sourceMapFilename\", \"[file].map[query]\");\n    this.set(\"output.hotUpdateChunkFilename\", \"[id].[hash].hot-update.js\");\n    this.set(\"output.hotUpdateMainFilename\", \"[hash].hot-update.json\");\n    this.set(\"output.crossOriginLoading\", false);\n    this.set(\"output.jsonpScriptType\", false);\n    this.set(\"output.chunkLoadTimeout\", 120000);\n    this.set(\"output.hashFunction\", \"md4\");\n    this.set(\"output.hashDigest\", \"hex\");\n    this.set(\"output.hashDigestLength\", 20);\n    this.set(\"output.devtoolLineToLine\", false);\n    this.set(\"output.strictModuleExceptionHandling\", false);\n    this.set(\"node\", \"call\", value => {\n      if (typeof value === \"boolean\") {\n        return value;\n      } else {\n        return Object.assign({}, value);\n      }\n    });\n    this.set(\"node.console\", false);\n    this.set(\"node.process\", true);\n    this.set(\"node.global\", true);\n    this.set(\"node.Buffer\", true);\n    this.set(\"node.setImmediate\", true);\n    this.set(\"node.__filename\", \"mock\");\n    this.set(\"node.__dirname\", \"mock\");\n    this.set(\"performance\", \"call\", (value, options) => {\n      if (value === false) return false;\n      if (value === undefined && (!isProductionLikeMode(options) || !isWebLikeTarget(options))) return false;\n      return Object.assign({}, value);\n    });\n    this.set(\"performance.maxAssetSize\", 250000);\n    this.set(\"performance.maxEntrypointSize\", 250000);\n    this.set(\"performance.hints\", \"make\", options => isProductionLikeMode(options) ? \"warning\" : false);\n    this.set(\"optimization\", \"call\", value => Object.assign({}, value)); // TODO webpack 5: Disable by default in a modes\n\n    this.set(\"optimization.removeAvailableModules\", \"make\", options => options.mode !== \"development\");\n    this.set(\"optimization.removeEmptyChunks\", true);\n    this.set(\"optimization.mergeDuplicateChunks\", true);\n    this.set(\"optimization.flagIncludedChunks\", \"make\", options => isProductionLikeMode(options)); // TODO webpack 5 add `moduleIds: \"named\"` default for development\n    // TODO webpack 5 add `moduleIds: \"size\"` default for production\n    // TODO webpack 5 remove optimization.occurrenceOrder\n\n    this.set(\"optimization.occurrenceOrder\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.sideEffects\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.providedExports\", true);\n    this.set(\"optimization.usedExports\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.concatenateModules\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.splitChunks\", {});\n    this.set(\"optimization.splitChunks.hidePathInfo\", \"make\", options => {\n      return isProductionLikeMode(options);\n    });\n    this.set(\"optimization.splitChunks.chunks\", \"async\");\n    this.set(\"optimization.splitChunks.minSize\", \"make\", options => {\n      return isProductionLikeMode(options) ? 30000 : 10000;\n    });\n    this.set(\"optimization.splitChunks.minChunks\", 1);\n    this.set(\"optimization.splitChunks.maxAsyncRequests\", \"make\", options => {\n      return isProductionLikeMode(options) ? 5 : Infinity;\n    });\n    this.set(\"optimization.splitChunks.automaticNameDelimiter\", \"~\");\n    this.set(\"optimization.splitChunks.automaticNameMaxLength\", 109);\n    this.set(\"optimization.splitChunks.maxInitialRequests\", \"make\", options => {\n      return isProductionLikeMode(options) ? 3 : Infinity;\n    });\n    this.set(\"optimization.splitChunks.name\", true);\n    this.set(\"optimization.splitChunks.cacheGroups\", {});\n    this.set(\"optimization.splitChunks.cacheGroups.default\", {\n      automaticNamePrefix: \"\",\n      reuseExistingChunk: true,\n      minChunks: 2,\n      priority: -20\n    });\n    this.set(\"optimization.splitChunks.cacheGroups.vendors\", {\n      automaticNamePrefix: \"vendors\",\n      test: /[\\\\/]node_modules[\\\\/]/,\n      priority: -10\n    });\n    this.set(\"optimization.runtimeChunk\", \"call\", value => {\n      if (value === \"single\") {\n        return {\n          name: \"runtime\"\n        };\n      }\n\n      if (value === true || value === \"multiple\") {\n        return {\n          name: entrypoint => \"runtime~\".concat(entrypoint.name)\n        };\n      }\n\n      return value;\n    });\n    this.set(\"optimization.noEmitOnErrors\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.checkWasmTypes\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.mangleWasmImports\", false); // TODO webpack 5 remove optimization.namedModules\n\n    this.set(\"optimization.namedModules\", \"make\", options => options.mode === \"development\");\n    this.set(\"optimization.hashedModuleIds\", false); // TODO webpack 5 add `chunkIds: \"named\"` default for development\n    // TODO webpack 5 add `chunkIds: \"size\"` default for production\n    // TODO webpack 5 remove optimization.namedChunks\n\n    this.set(\"optimization.namedChunks\", \"make\", options => options.mode === \"development\");\n    this.set(\"optimization.portableRecords\", \"make\", options => !!(options.recordsInputPath || options.recordsOutputPath || options.recordsPath));\n    this.set(\"optimization.minimize\", \"make\", options => isProductionLikeMode(options));\n    this.set(\"optimization.minimizer\", \"make\", options => [{\n      apply: compiler => {\n        // Lazy load the Terser plugin\n        const TerserPlugin = require(\"terser-webpack-plugin\");\n\n        const SourceMapDevToolPlugin = require(\"./SourceMapDevToolPlugin\");\n\n        new TerserPlugin({\n          cache: true,\n          parallel: true,\n          sourceMap: options.devtool && /source-?map/.test(options.devtool) || options.plugins && options.plugins.some(p => p instanceof SourceMapDevToolPlugin)\n        }).apply(compiler);\n      }\n    }]);\n    this.set(\"optimization.nodeEnv\", \"make\", options => {\n      // TODO: In webpack 5, it should return `false` when mode is `none`\n      return options.mode || \"production\";\n    });\n    this.set(\"resolve\", \"call\", value => Object.assign({}, value));\n    this.set(\"resolve.unsafeCache\", true);\n    this.set(\"resolve.modules\", [\"node_modules\"]);\n    this.set(\"resolve.extensions\", [\".wasm\", \".mjs\", \".js\", \".json\"]);\n    this.set(\"resolve.mainFiles\", [\"index\"]);\n    this.set(\"resolve.aliasFields\", \"make\", options => {\n      if (options.target === \"web\" || options.target === \"webworker\" || options.target === \"electron-renderer\") {\n        return [\"browser\"];\n      } else {\n        return [];\n      }\n    });\n    this.set(\"resolve.mainFields\", \"make\", options => {\n      if (options.target === \"web\" || options.target === \"webworker\" || options.target === \"electron-renderer\") {\n        return [\"browser\", \"module\", \"main\"];\n      } else {\n        return [\"module\", \"main\"];\n      }\n    });\n    this.set(\"resolve.cacheWithContext\", \"make\", options => {\n      return Array.isArray(options.resolve.plugins) && options.resolve.plugins.length > 0;\n    });\n    this.set(\"resolveLoader\", \"call\", value => Object.assign({}, value));\n    this.set(\"resolveLoader.unsafeCache\", true);\n    this.set(\"resolveLoader.mainFields\", [\"loader\", \"main\"]);\n    this.set(\"resolveLoader.extensions\", [\".js\", \".json\"]);\n    this.set(\"resolveLoader.mainFiles\", [\"index\"]);\n    this.set(\"resolveLoader.cacheWithContext\", \"make\", options => {\n      return Array.isArray(options.resolveLoader.plugins) && options.resolveLoader.plugins.length > 0;\n    });\n    this.set(\"infrastructureLogging\", \"call\", value => Object.assign({}, value));\n    this.set(\"infrastructureLogging.level\", \"info\");\n    this.set(\"infrastructureLogging.debug\", false);\n  }\n\n}\n\nmodule.exports = WebpackOptionsDefaulter;","map":null,"metadata":{},"sourceType":"script"}