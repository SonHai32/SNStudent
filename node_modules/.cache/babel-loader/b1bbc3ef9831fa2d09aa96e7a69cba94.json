{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass UseStrictPlugin {\n  /**\n   * @param {Compiler} compiler Webpack Compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"UseStrictPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = parser => {\n        parser.hooks.program.tap(\"UseStrictPlugin\", ast => {\n          const firstNode = ast.body[0];\n\n          if (firstNode && firstNode.type === \"ExpressionStatement\" && firstNode.expression.type === \"Literal\" && firstNode.expression.value === \"use strict\") {\n            // Remove \"use strict\" expression. It will be added later by the renderer again.\n            // This is necessary in order to not break the strict mode when webpack prepends code.\n            // @see https://github.com/webpack/webpack/issues/1970\n            const dep = new ConstDependency(\"\", firstNode.range);\n            dep.loc = firstNode.loc;\n            parser.state.current.addDependency(dep);\n            parser.state.module.buildInfo.strict = true;\n          }\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"UseStrictPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"UseStrictPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"UseStrictPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = UseStrictPlugin;","map":null,"metadata":{},"sourceType":"script"}