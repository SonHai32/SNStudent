{"ast":null,"code":"'use strict';\n\nconst fs = require('graceful-fs');\n\nconst BB = require('bluebird');\n\nconst chmod = BB.promisify(fs.chmod);\nconst unlink = BB.promisify(fs.unlink);\nlet move;\nlet pinflight;\nmodule.exports = moveFile;\n\nfunction moveFile(src, dest) {\n  // This isn't quite an fs.rename -- the assumption is that\n  // if `dest` already exists, and we get certain errors while\n  // trying to move it, we should just not bother.\n  //\n  // In the case of cache corruption, users will receive an\n  // EINTEGRITY error elsewhere, and can remove the offending\n  // content their own way.\n  //\n  // Note that, as the name suggests, this strictly only supports file moves.\n  return BB.fromNode(cb => {\n    fs.link(src, dest, err => {\n      if (err) {\n        if (err.code === 'EEXIST' || err.code === 'EBUSY') {// file already exists, so whatever\n        } else if (err.code === 'EPERM' && process.platform === 'win32') {// file handle stayed open even past graceful-fs limits\n        } else {\n          return cb(err);\n        }\n      }\n\n      return cb();\n    });\n  }).then(() => {\n    // content should never change for any reason, so make it read-only\n    return BB.join(unlink(src), process.platform !== 'win32' && chmod(dest, '0444'));\n  }).catch(() => {\n    if (!pinflight) {\n      pinflight = require('promise-inflight');\n    }\n\n    return pinflight('cacache-move-file:' + dest, () => {\n      return BB.promisify(fs.stat)(dest).catch(err => {\n        if (err.code !== 'ENOENT') {\n          // Something else is wrong here. Bail bail bail\n          throw err;\n        } // file doesn't already exist! let's try a rename -> copy fallback\n\n\n        if (!move) {\n          move = require('move-concurrently');\n        }\n\n        return move(src, dest, {\n          BB,\n          fs\n        });\n      });\n    });\n  });\n}","map":null,"metadata":{},"sourceType":"script"}