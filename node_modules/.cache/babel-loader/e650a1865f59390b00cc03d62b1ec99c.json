{"ast":null,"code":"/*\r\n\tMIT License http://www.opensource.org/licenses/mit-license.php\r\n\tAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nconst concord = require(\"./concord\");\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class ConcordExtensionsPlugin {\n  constructor(source, options, target) {\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"ConcordExtensionsPlugin\", (request, resolveContext, callback) => {\n      const concordField = DescriptionFileUtils.getField(request.descriptionFileData, \"concord\");\n      if (!concordField) return callback();\n      const extensions = concord.getExtensions(request.context, concordField);\n      if (!extensions) return callback();\n      forEachBail(extensions, (appending, callback) => {\n        const obj = Object.assign({}, request, {\n          path: request.path + appending,\n          relativePath: request.relativePath && request.relativePath + appending\n        });\n        resolver.doResolve(target, obj, \"concord extension: \" + appending, resolveContext, callback);\n      }, (err, result) => {\n        if (err) return callback(err); // Don't allow other processing\n\n        if (result === undefined) return callback(null, null);\n        callback(null, result);\n      });\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}