{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nclass CodeNode {\n  constructor(generatedCode) {\n    this.generatedCode = generatedCode;\n  }\n\n  clone() {\n    return new CodeNode(this.generatedCode);\n  }\n\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n\n  getMappings(mappingsContext) {\n    const lines = getNumberOfLines(this.generatedCode);\n    const mapping = Array(lines + 1).join(\";\");\n\n    if (lines > 0) {\n      mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n\n      if (mappingsContext.unfinishedGeneratedLine > 0) {\n        return mapping + \"A\";\n      } else {\n        return mapping;\n      }\n    } else {\n      const prevUnfinished = mappingsContext.unfinishedGeneratedLine;\n      mappingsContext.unfinishedGeneratedLine += getUnfinishedLine(this.generatedCode);\n\n      if (prevUnfinished === 0 && mappingsContext.unfinishedGeneratedLine > 0) {\n        return \"A\";\n      } else {\n        return \"\";\n      }\n    }\n  }\n\n  addGeneratedCode(generatedCode) {\n    this.generatedCode += generatedCode;\n  }\n\n  mapGeneratedCode(fn) {\n    const generatedCode = fn(this.generatedCode);\n    return new CodeNode(generatedCode);\n  }\n\n  getNormalizedNodes() {\n    return [this];\n  }\n\n  merge(otherNode) {\n    if (otherNode instanceof CodeNode) {\n      this.generatedCode += otherNode.generatedCode;\n      return this;\n    }\n\n    return false;\n  }\n\n}\n\nmodule.exports = CodeNode;","map":null,"metadata":{},"sourceType":"script"}