{"ast":null,"code":"'use strict';\n\nmodule.exports = parseJson;\n\nfunction parseJson(txt, reviver, context) {\n  context = context || 20;\n\n  try {\n    return JSON.parse(txt, reviver);\n  } catch (e) {\n    if (typeof txt !== 'string') {\n      const isEmptyArray = Array.isArray(txt) && txt.length === 0;\n      const errorMessage = 'Cannot parse ' + (isEmptyArray ? 'an empty array' : String(txt));\n      throw new TypeError(errorMessage);\n    }\n\n    const syntaxErr = e.message.match(/^Unexpected token.*position\\s+(\\d+)/i);\n    const errIdx = syntaxErr ? +syntaxErr[1] : e.message.match(/^Unexpected end of JSON.*/i) ? txt.length - 1 : null;\n\n    if (errIdx != null) {\n      const start = errIdx <= context ? 0 : errIdx - context;\n      const end = errIdx + context >= txt.length ? txt.length : errIdx + context;\n      e.message += \" while parsing near '\".concat(start === 0 ? '' : '...').concat(txt.slice(start, end)).concat(end === txt.length ? '' : '...', \"'\");\n    } else {\n      e.message += \" while parsing '\".concat(txt.slice(0, context * 2), \"'\");\n    }\n\n    throw e;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}