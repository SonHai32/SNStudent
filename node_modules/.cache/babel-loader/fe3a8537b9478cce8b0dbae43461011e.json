{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst getPaths = require(\"./getPaths\");\n\nconst forEachBail = require(\"./forEachBail\");\n\nmodule.exports = class SymlinkPlugin {\n  constructor(source, target) {\n    this.source = source;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    const fs = resolver.fileSystem;\n    resolver.getHook(this.source).tapAsync(\"SymlinkPlugin\", (request, resolveContext, callback) => {\n      const pathsResult = getPaths(request.path);\n      const pathSeqments = pathsResult.seqments;\n      const paths = pathsResult.paths;\n      let containsSymlink = false;\n      forEachBail.withIndex(paths, (path, idx, callback) => {\n        fs.readlink(path, (err, result) => {\n          if (!err && result) {\n            pathSeqments[idx] = result;\n            containsSymlink = true; // Shortcut when absolute symlink found\n\n            if (/^(\\/|[a-zA-Z]:($|\\\\))/.test(result)) return callback(null, idx);\n          }\n\n          callback();\n        });\n      }, (err, idx) => {\n        if (!containsSymlink) return callback();\n        const resultSeqments = typeof idx === \"number\" ? pathSeqments.slice(0, idx + 1) : pathSeqments.slice();\n        const result = resultSeqments.reverse().reduce((a, b) => {\n          return resolver.join(a, b);\n        });\n        const obj = Object.assign({}, request, {\n          path: result\n        });\n        resolver.doResolve(target, obj, \"resolved symlink to \" + result, resolveContext, callback);\n      });\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}