{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireContextDependency = require(\"./RequireContextDependency\");\n\nmodule.exports = class RequireContextDependencyParserPlugin {\n  apply(parser) {\n    parser.hooks.call.for(\"require.context\").tap(\"RequireContextDependencyParserPlugin\", expr => {\n      let regExp = /^\\.\\/.*$/;\n      let recursive = true;\n      let mode = \"sync\";\n\n      switch (expr.arguments.length) {\n        case 4:\n          {\n            const modeExpr = parser.evaluateExpression(expr.arguments[3]);\n            if (!modeExpr.isString()) return;\n            mode = modeExpr.string;\n          }\n        // falls through\n\n        case 3:\n          {\n            const regExpExpr = parser.evaluateExpression(expr.arguments[2]);\n            if (!regExpExpr.isRegExp()) return;\n            regExp = regExpExpr.regExp;\n          }\n        // falls through\n\n        case 2:\n          {\n            const recursiveExpr = parser.evaluateExpression(expr.arguments[1]);\n            if (!recursiveExpr.isBoolean()) return;\n            recursive = recursiveExpr.bool;\n          }\n        // falls through\n\n        case 1:\n          {\n            const requestExpr = parser.evaluateExpression(expr.arguments[0]);\n            if (!requestExpr.isString()) return;\n            const dep = new RequireContextDependency({\n              request: requestExpr.string,\n              recursive,\n              regExp,\n              mode\n            }, expr.range);\n            dep.loc = expr.loc;\n            dep.optional = parser.scope.inTry;\n            parser.state.current.addDependency(dep);\n            return true;\n          }\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}