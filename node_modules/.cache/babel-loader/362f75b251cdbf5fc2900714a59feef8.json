{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst NullDependency = require(\"./NullDependency\");\n\nclass AMDRequireDependency extends NullDependency {\n  constructor(block) {\n    super();\n    this.block = block;\n  }\n\n}\n\nAMDRequireDependency.Template = class AMDRequireDependencyTemplate {\n  apply(dep, source, runtime) {\n    const depBlock = dep.block;\n    const promise = runtime.blockPromise({\n      block: depBlock,\n      message: \"AMD require\"\n    }); // has array range but no function range\n\n    if (depBlock.arrayRange && !depBlock.functionRange) {\n      const startBlock = \"\".concat(promise, \".then(function() {\");\n      const endBlock = \";}).catch(\".concat(runtime.onError(), \")\");\n      source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);\n      source.replace(depBlock.arrayRange[1], depBlock.outerRange[1] - 1, endBlock);\n      return;\n    } // has function range but no array range\n\n\n    if (depBlock.functionRange && !depBlock.arrayRange) {\n      const startBlock = \"\".concat(promise, \".then((\");\n      const endBlock = \").bind(exports, __webpack_require__, exports, module)).catch(\".concat(runtime.onError(), \")\");\n      source.replace(depBlock.outerRange[0], depBlock.functionRange[0] - 1, startBlock);\n      source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, endBlock);\n      return;\n    } // has array range, function range, and errorCallbackRange\n\n\n    if (depBlock.arrayRange && depBlock.functionRange && depBlock.errorCallbackRange) {\n      const startBlock = \"\".concat(promise, \".then(function() { \");\n      const errorRangeBlock = \"}\".concat(depBlock.functionBindThis ? \".bind(this)\" : \"\", \").catch(\");\n      const endBlock = \"\".concat(depBlock.errorCallbackBindThis ? \".bind(this)\" : \"\", \")\");\n      source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);\n      source.insert(depBlock.arrayRange[0] + 0.9, \"var __WEBPACK_AMD_REQUIRE_ARRAY__ = \");\n      source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, \"; (\");\n      source.insert(depBlock.functionRange[1], \").apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);\");\n      source.replace(depBlock.functionRange[1], depBlock.errorCallbackRange[0] - 1, errorRangeBlock);\n      source.replace(depBlock.errorCallbackRange[1], depBlock.outerRange[1] - 1, endBlock);\n      return;\n    } // has array range, function range, but no errorCallbackRange\n\n\n    if (depBlock.arrayRange && depBlock.functionRange) {\n      const startBlock = \"\".concat(promise, \".then(function() { \");\n      const endBlock = \"}\".concat(depBlock.functionBindThis ? \".bind(this)\" : \"\", \").catch(\").concat(runtime.onError(), \")\");\n      source.replace(depBlock.outerRange[0], depBlock.arrayRange[0] - 1, startBlock);\n      source.insert(depBlock.arrayRange[0] + 0.9, \"var __WEBPACK_AMD_REQUIRE_ARRAY__ = \");\n      source.replace(depBlock.arrayRange[1], depBlock.functionRange[0] - 1, \"; (\");\n      source.insert(depBlock.functionRange[1], \").apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__);\");\n      source.replace(depBlock.functionRange[1], depBlock.outerRange[1] - 1, endBlock);\n    }\n  }\n\n};\nmodule.exports = AMDRequireDependency;","map":null,"metadata":{},"sourceType":"script"}