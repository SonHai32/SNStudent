{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ExternalModule = require(\"./ExternalModule\");\n\nclass ExternalModuleFactoryPlugin {\n  constructor(type, externals) {\n    this.type = type;\n    this.externals = externals;\n  }\n\n  apply(normalModuleFactory) {\n    const globalType = this.type;\n    normalModuleFactory.hooks.factory.tap(\"ExternalModuleFactoryPlugin\", factory => (data, callback) => {\n      const context = data.context;\n      const dependency = data.dependencies[0];\n\n      const handleExternal = (value, type, callback) => {\n        if (typeof type === \"function\") {\n          callback = type;\n          type = undefined;\n        }\n\n        if (value === false) return factory(data, callback);\n        if (value === true) value = dependency.request;\n\n        if (type === undefined && /^[a-z0-9]+ /.test(value)) {\n          const idx = value.indexOf(\" \");\n          type = value.substr(0, idx);\n          value = value.substr(idx + 1);\n        }\n\n        callback(null, new ExternalModule(value, type || globalType, dependency.request));\n        return true;\n      };\n\n      const handleExternals = (externals, callback) => {\n        if (typeof externals === \"string\") {\n          if (externals === dependency.request) {\n            return handleExternal(dependency.request, callback);\n          }\n        } else if (Array.isArray(externals)) {\n          let i = 0;\n\n          const next = () => {\n            let asyncFlag;\n\n            const handleExternalsAndCallback = (err, module) => {\n              if (err) return callback(err);\n\n              if (!module) {\n                if (asyncFlag) {\n                  asyncFlag = false;\n                  return;\n                }\n\n                return next();\n              }\n\n              callback(null, module);\n            };\n\n            do {\n              asyncFlag = true;\n              if (i >= externals.length) return callback();\n              handleExternals(externals[i++], handleExternalsAndCallback);\n            } while (!asyncFlag);\n\n            asyncFlag = false;\n          };\n\n          next();\n          return;\n        } else if (externals instanceof RegExp) {\n          if (externals.test(dependency.request)) {\n            return handleExternal(dependency.request, callback);\n          }\n        } else if (typeof externals === \"function\") {\n          externals.call(null, context, dependency.request, (err, value, type) => {\n            if (err) return callback(err);\n\n            if (value !== undefined) {\n              handleExternal(value, type, callback);\n            } else {\n              callback();\n            }\n          });\n          return;\n        } else if (typeof externals === \"object\" && Object.prototype.hasOwnProperty.call(externals, dependency.request)) {\n          return handleExternal(externals[dependency.request], callback);\n        }\n\n        callback();\n      };\n\n      handleExternals(this.externals, (err, module) => {\n        if (err) return callback(err);\n        if (!module) return handleExternal(false, callback);\n        return callback(null, module);\n      });\n    });\n  }\n\n}\n\nmodule.exports = ExternalModuleFactoryPlugin;","map":null,"metadata":{},"sourceType":"script"}