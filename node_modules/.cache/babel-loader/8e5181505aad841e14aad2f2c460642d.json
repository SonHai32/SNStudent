{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst NullDependency = require(\"./NullDependency\");\n\nclass AMDDefineDependency extends NullDependency {\n  constructor(range, arrayRange, functionRange, objectRange, namedModule) {\n    super();\n    this.range = range;\n    this.arrayRange = arrayRange;\n    this.functionRange = functionRange;\n    this.objectRange = objectRange;\n    this.namedModule = namedModule;\n    this.localModule = null;\n  }\n\n  get type() {\n    return \"amd define\";\n  }\n\n}\n\nAMDDefineDependency.Template = class AMDDefineDependencyTemplate {\n  get definitions() {\n    return {\n      f: [\"var __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_RESULT__ = (#).call(exports, __webpack_require__, exports, module),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n      o: [\"\", \"!(module.exports = #)\"],\n      of: [\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_FACTORY__ = (#),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n      af: [\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_RESULT__ = (#).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n      ao: [\"\", \"!(#, module.exports = #)\"],\n      aof: [\"var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\\n\\t\\t\\t\\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__))\"],\n      lf: [\"var XXX, XXXmodule;\", \"!(XXXmodule = { id: YYY, exports: {}, loaded: false }, XXX = #.call(XXXmodule.exports, __webpack_require__, XXXmodule.exports, XXXmodule), XXXmodule.loaded = true, XXX === undefined && (XXX = XXXmodule.exports))\"],\n      lo: [\"var XXX;\", \"!(XXX = #)\"],\n      lof: [\"var XXX, XXXfactory, XXXmodule;\", \"!(XXXfactory = (#), (XXXmodule = { id: YYY, exports: {}, loaded: false }), XXX = (typeof XXXfactory === 'function' ? (XXXfactory.call(XXXmodule.exports, __webpack_require__, XXXmodule.exports, XXXmodule)) : XXXfactory), (XXXmodule.loaded = true), XXX === undefined && (XXX = XXXmodule.exports))\"],\n      laf: [\"var __WEBPACK_AMD_DEFINE_ARRAY__, XXX;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, XXX = ((#).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)))\"],\n      lao: [\"var XXX;\", \"!(#, XXX = #)\"],\n      laof: [\"var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_FACTORY__, XXX;\", \"!(__WEBPACK_AMD_DEFINE_ARRAY__ = #, __WEBPACK_AMD_DEFINE_FACTORY__ = (#),\\n\\t\\t\\t\\tXXX = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\\n\\t\\t\\t\\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__))\"]\n    };\n  }\n\n  apply(dependency, source) {\n    const branch = this.branch(dependency);\n    const defAndText = this.definitions[branch];\n    const definitions = defAndText[0];\n    const text = defAndText[1];\n    this.replace(dependency, source, definitions, text);\n  }\n\n  localModuleVar(dependency) {\n    return dependency.localModule && dependency.localModule.used && dependency.localModule.variableName();\n  }\n\n  branch(dependency) {\n    const localModuleVar = this.localModuleVar(dependency) ? \"l\" : \"\";\n    const arrayRange = dependency.arrayRange ? \"a\" : \"\";\n    const objectRange = dependency.objectRange ? \"o\" : \"\";\n    const functionRange = dependency.functionRange ? \"f\" : \"\";\n    return localModuleVar + arrayRange + objectRange + functionRange;\n  }\n\n  replace(dependency, source, definition, text) {\n    const localModuleVar = this.localModuleVar(dependency);\n\n    if (localModuleVar) {\n      text = text.replace(/XXX/g, localModuleVar.replace(/\\$/g, \"$$$$\"));\n      definition = definition.replace(/XXX/g, localModuleVar.replace(/\\$/g, \"$$$$\"));\n    }\n\n    if (dependency.namedModule) {\n      text = text.replace(/YYY/g, JSON.stringify(dependency.namedModule));\n    }\n\n    const texts = text.split(\"#\");\n    if (definition) source.insert(0, definition);\n    let current = dependency.range[0];\n\n    if (dependency.arrayRange) {\n      source.replace(current, dependency.arrayRange[0] - 1, texts.shift());\n      current = dependency.arrayRange[1];\n    }\n\n    if (dependency.objectRange) {\n      source.replace(current, dependency.objectRange[0] - 1, texts.shift());\n      current = dependency.objectRange[1];\n    } else if (dependency.functionRange) {\n      source.replace(current, dependency.functionRange[0] - 1, texts.shift());\n      current = dependency.functionRange[1];\n    }\n\n    source.replace(current, dependency.range[1] - 1, texts.shift());\n    if (texts.length > 0) throw new Error(\"Implementation error\");\n  }\n\n};\nmodule.exports = AMDDefineDependency;","map":null,"metadata":{},"sourceType":"script"}