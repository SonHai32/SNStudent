{"ast":null,"code":"export default class ImageResize {\n  constructor(imageUrl, size, getCanvasUrl) {\n    this._imageUrl = imageUrl;\n    this._getCanvasUrl = getCanvasUrl;\n    this._size = size;\n    this._dataUrl = null;\n    this.imageResize(imageUrl, this._size);\n  }\n\n  imageResize(imageUrl, maxWidth) {\n    let setDataGetCanvasUrl = this._getCanvasUrl;\n    let tempImg = new Image();\n    tempImg.src = imageUrl;\n\n    let createCanvas = (img, width, height) => {\n      let canvas = document.createElement('canvas');\n      canvas.width = width;\n      canvas.height = height;\n      let ctx = canvas.getContext('2d');\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n      setDataGetCanvasUrl(canvas.toDataURL());\n      this._dataUrl = canvas.toDataURL();\n    };\n\n    tempImg.onload = () => {\n      let tempW = tempImg.width;\n      let tempH = tempImg.height;\n      let min = tempW >= tempH ? tempH : tempW;\n      maxWidth = maxWidth || min;\n\n      if (tempW <= maxWidth && tempH <= maxWidth) {\n        createCanvas(tempW, tempH, tempImg);\n      }\n\n      let startY = 0;\n\n      if (min !== tempH) {\n        startY = Math.round(tempH / 2 - min / 2);\n      }\n\n      let startX = 0;\n\n      if (min !== tempW) {\n        startX = Math.round(tempW / 2 - min / 2);\n      }\n\n      let finalImage = new Image();\n      finalImage.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n      console.log(finalImage);\n\n      finalImage.onload = () => {\n        createCanvas(finalImage, maxWidth, maxWidth);\n      };\n    };\n  }\n\n  getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio) {\n    let tnCanvas = document.createElement('canvas');\n    let tnContext = tnCanvas.getContext('2d');\n    tnCanvas.width = newWidth;\n    tnCanvas.height = newHeight;\n    let bufferCanvas = document.createElement('canvas');\n    let bufferContext = bufferCanvas.getContext('2d');\n    bufferCanvas.width = imgObj.width;\n    bufferCanvas.height = imgObj.height;\n    bufferContext.drawImage(imgObj, 0, 0);\n    tnContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight);\n    return tnCanvas.toDataURL();\n  }\n\n}","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/ImageResize.js"],"names":["ImageResize","constructor","imageUrl","size","getCanvasUrl","_imageUrl","_getCanvasUrl","_size","_dataUrl","imageResize","maxWidth","setDataGetCanvasUrl","tempImg","Image","src","createCanvas","img","width","height","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","onload","tempW","tempH","min","startY","Math","round","startX","finalImage","getImagePortion","console","log","imgObj","newWidth","newHeight","ratio","tnCanvas","tnContext","bufferCanvas","bufferContext"],"mappings":"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","sourcesContent":["export default class ImageResize {\n    constructor(imageUrl, size, getCanvasUrl) {\n\n        this._imageUrl = imageUrl;\n        this._getCanvasUrl = getCanvasUrl;\n        this._size = size;\n        this._dataUrl = null;\n        this.imageResize(imageUrl, this._size)\n    }\n    imageResize(imageUrl, maxWidth) {\n\n        let setDataGetCanvasUrl = this._getCanvasUrl\n        let tempImg = new Image();\n        tempImg.src = imageUrl;\n\n        let createCanvas = (img, width, height) => {\n            let canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            let ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            setDataGetCanvasUrl(canvas.toDataURL())\n            this._dataUrl = canvas.toDataURL()\n        }\n\n        tempImg.onload = () => {\n            let tempW = tempImg.width;\n            let tempH = tempImg.height;\n            let min = tempW >= tempH ? tempH : tempW\n            maxWidth = maxWidth || min;\n\n            if (tempW <= maxWidth && tempH <= maxWidth) {\n                createCanvas(tempW, tempH, tempImg)\n            }\n\n            let startY = 0;\n            if (min !== tempH) {\n                startY = Math.round(tempH / 2 - (min / 2))\n            }\n            let startX = 0;\n            if (min !== tempW) {\n                startX = Math.round(tempW / 2 - (min / 2))\n            }\n\n            let finalImage = new Image();\n            finalImage.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n            console.log(finalImage)\n            finalImage.onload = () => {\n                createCanvas(finalImage, maxWidth, maxWidth)\n            }\n\n\n\n        }\n\n    }\n\n\n\n\n\n\n\n    getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio) {\n        let tnCanvas = document.createElement('canvas');\n        let tnContext = tnCanvas.getContext('2d');\n        tnCanvas.width = newWidth;\n        tnCanvas.height = newHeight;\n\n        let bufferCanvas = document.createElement('canvas');\n        let bufferContext = bufferCanvas.getContext('2d')\n        bufferCanvas.width = imgObj.width;\n        bufferCanvas.height = imgObj.height;\n\n        bufferContext.drawImage(imgObj, 0, 0);\n\n        tnContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight)\n        return tnCanvas.toDataURL();\n\n\n    }\n\n\n}"]},"metadata":{},"sourceType":"module"}