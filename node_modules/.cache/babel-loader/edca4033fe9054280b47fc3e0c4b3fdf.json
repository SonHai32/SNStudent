{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\n\nclass WebWorkerMainTemplatePlugin {\n  apply(mainTemplate) {\n    const needChunkOnDemandLoadingCode = chunk => {\n      for (const chunkGroup of chunk.groupsIterable) {\n        if (chunkGroup.getNumberOfChildren() > 0) return true;\n      }\n\n      return false;\n    };\n\n    mainTemplate.hooks.localVars.tap(\"WebWorkerMainTemplatePlugin\", (source, chunk) => {\n      if (needChunkOnDemandLoadingCode(chunk)) {\n        return Template.asString([source, \"\", \"// object to store loaded chunks\", '// \"1\" means \"already loaded\"', \"var installedChunks = {\", Template.indent(chunk.ids.map(id => \"\".concat(JSON.stringify(id), \": 1\")).join(\",\\n\")), \"};\"]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.requireEnsure.tap(\"WebWorkerMainTemplatePlugin\", (_, chunk, hash) => {\n      const chunkFilename = mainTemplate.outputOptions.chunkFilename;\n      const chunkMaps = chunk.getChunkMaps();\n      return Template.asString([\"promises.push(Promise.resolve().then(function() {\", Template.indent(['// \"1\" is the signal for \"already loaded\"', \"if(!installedChunks[chunkId]) {\", Template.indent([\"importScripts(\" + \"__webpack_require__.p + \" + mainTemplate.getAssetPath(JSON.stringify(chunkFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n        chunk: {\n          id: '\" + chunkId + \"',\n          hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n\n          hashWithLength(length) {\n            const shortChunkHashMap = Object.create(null);\n\n            for (const chunkId of Object.keys(chunkMaps.hash)) {\n              if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n              }\n            }\n\n            return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n          },\n\n          contentHash: {\n            javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n          },\n          contentHashWithLength: {\n            javascript: length => {\n              const shortContentHashMap = {};\n              const contentHash = chunkMaps.contentHash.javascript;\n\n              for (const chunkId of Object.keys(contentHash)) {\n                if (typeof contentHash[chunkId] === \"string\") {\n                  shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n            }\n          },\n          name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n        },\n        contentHashType: \"javascript\"\n      }) + \");\"]), \"}\"]), \"}));\"]);\n    });\n    mainTemplate.hooks.bootstrap.tap(\"WebWorkerMainTemplatePlugin\", (source, chunk, hash) => {\n      if (needChunkOnDemandLoadingCode(chunk)) {\n        const chunkCallbackName = mainTemplate.outputOptions.chunkCallbackName;\n        const globalObject = mainTemplate.outputOptions.globalObject;\n        return Template.asString([source, \"\".concat(globalObject, \"[\").concat(JSON.stringify(chunkCallbackName), \"] = function webpackChunkCallback(chunkIds, moreModules) {\"), Template.indent([\"for(var moduleId in moreModules) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\", \"while(chunkIds.length)\", Template.indent(\"installedChunks[chunkIds.pop()] = 1;\")]), \"};\"]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.hotBootstrap.tap(\"WebWorkerMainTemplatePlugin\", (source, chunk, hash) => {\n      const hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n      const hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n      const hotUpdateFunction = mainTemplate.outputOptions.hotUpdateFunction;\n      const globalObject = mainTemplate.outputOptions.globalObject;\n      const currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n        chunk: {\n          id: '\" + chunkId + \"'\n        }\n      });\n      const currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\")\n      });\n      return source + \"\\n\" + \"var parentHotUpdateCallback = \".concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"];\\n\") + \"\".concat(globalObject, \"[\").concat(JSON.stringify(hotUpdateFunction), \"] = \") + Template.getFunctionContent(require(\"./WebWorkerMainTemplate.runtime\")).replace(/\\/\\/\\$semicolon/g, \";\").replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename).replace(/\\$hash\\$/g, JSON.stringify(hash));\n    });\n    mainTemplate.hooks.hash.tap(\"WebWorkerMainTemplatePlugin\", hash => {\n      hash.update(\"webworker\");\n      hash.update(\"4\");\n    });\n  }\n\n}\n\nmodule.exports = WebWorkerMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}