{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireEnsureDependenciesBlock = require(\"./RequireEnsureDependenciesBlock\");\n\nconst RequireEnsureItemDependency = require(\"./RequireEnsureItemDependency\");\n\nconst getFunctionExpression = require(\"./getFunctionExpression\");\n\nmodule.exports = class RequireEnsureDependenciesBlockParserPlugin {\n  apply(parser) {\n    parser.hooks.call.for(\"require.ensure\").tap(\"RequireEnsureDependenciesBlockParserPlugin\", expr => {\n      let chunkName = null;\n      let chunkNameRange = null;\n      let errorExpressionArg = null;\n      let errorExpression = null;\n\n      switch (expr.arguments.length) {\n        case 4:\n          {\n            const chunkNameExpr = parser.evaluateExpression(expr.arguments[3]);\n            if (!chunkNameExpr.isString()) return;\n            chunkNameRange = chunkNameExpr.range;\n            chunkName = chunkNameExpr.string;\n          }\n        // falls through\n\n        case 3:\n          {\n            errorExpressionArg = expr.arguments[2];\n            errorExpression = getFunctionExpression(errorExpressionArg);\n\n            if (!errorExpression && !chunkName) {\n              const chunkNameExpr = parser.evaluateExpression(expr.arguments[2]);\n              if (!chunkNameExpr.isString()) return;\n              chunkNameRange = chunkNameExpr.range;\n              chunkName = chunkNameExpr.string;\n            }\n          }\n        // falls through\n\n        case 2:\n          {\n            const dependenciesExpr = parser.evaluateExpression(expr.arguments[0]);\n            const dependenciesItems = dependenciesExpr.isArray() ? dependenciesExpr.items : [dependenciesExpr];\n            const successExpressionArg = expr.arguments[1];\n            const successExpression = getFunctionExpression(successExpressionArg);\n\n            if (successExpression) {\n              parser.walkExpressions(successExpression.expressions);\n            }\n\n            if (errorExpression) {\n              parser.walkExpressions(errorExpression.expressions);\n            }\n\n            const dep = new RequireEnsureDependenciesBlock(expr, successExpression ? successExpression.fn : successExpressionArg, errorExpression ? errorExpression.fn : errorExpressionArg, chunkName, chunkNameRange, parser.state.module, expr.loc);\n            const old = parser.state.current;\n            parser.state.current = dep;\n\n            try {\n              let failed = false;\n              parser.inScope([], () => {\n                for (const ee of dependenciesItems) {\n                  if (ee.isString()) {\n                    const edep = new RequireEnsureItemDependency(ee.string);\n                    edep.loc = dep.loc;\n                    dep.addDependency(edep);\n                  } else {\n                    failed = true;\n                  }\n                }\n              });\n\n              if (failed) {\n                return;\n              }\n\n              if (successExpression) {\n                if (successExpression.fn.body.type === \"BlockStatement\") {\n                  parser.walkStatement(successExpression.fn.body);\n                } else {\n                  parser.walkExpression(successExpression.fn.body);\n                }\n              }\n\n              old.addBlock(dep);\n            } finally {\n              parser.state.current = old;\n            }\n\n            if (!successExpression) {\n              parser.walkExpression(successExpressionArg);\n            }\n\n            if (errorExpression) {\n              if (errorExpression.fn.body.type === \"BlockStatement\") {\n                parser.walkStatement(errorExpression.fn.body);\n              } else {\n                parser.walkExpression(errorExpression.fn.body);\n              }\n            } else if (errorExpressionArg) {\n              parser.walkExpression(errorExpressionArg);\n            }\n\n            return true;\n          }\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}