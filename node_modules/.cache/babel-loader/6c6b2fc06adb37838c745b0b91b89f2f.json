{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"./Template\");\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\nconst ParserHelpers = require(\"./ParserHelpers\");\n\nconst NullFactory = require(\"./NullFactory\");\n\nconst REPLACEMENTS = {\n  // eslint-disable-next-line camelcase\n  __webpack_hash__: \"__webpack_require__.h\",\n  // eslint-disable-next-line camelcase\n  __webpack_chunkname__: \"__webpack_require__.cn\"\n};\nconst REPLACEMENT_TYPES = {\n  // eslint-disable-next-line camelcase\n  __webpack_hash__: \"string\",\n  // eslint-disable-next-line camelcase\n  __webpack_chunkname__: \"string\"\n};\n\nclass ExtendedAPIPlugin {\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"ExtendedAPIPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      const mainTemplate = compilation.mainTemplate;\n      mainTemplate.hooks.requireExtensions.tap(\"ExtendedAPIPlugin\", (source, chunk, hash) => {\n        const buf = [source];\n        buf.push(\"\");\n        buf.push(\"// __webpack_hash__\");\n        buf.push(\"\".concat(mainTemplate.requireFn, \".h = \").concat(JSON.stringify(hash), \";\"));\n        buf.push(\"\");\n        buf.push(\"// __webpack_chunkname__\");\n        buf.push(\"\".concat(mainTemplate.requireFn, \".cn = \").concat(JSON.stringify(chunk.name), \";\"));\n        return Template.asString(buf);\n      });\n      mainTemplate.hooks.globalHash.tap(\"ExtendedAPIPlugin\", () => true);\n\n      const handler = (parser, parserOptions) => {\n        Object.keys(REPLACEMENTS).forEach(key => {\n          parser.hooks.expression.for(key).tap(\"ExtendedAPIPlugin\", ParserHelpers.toConstantDependencyWithWebpackRequire(parser, REPLACEMENTS[key]));\n          parser.hooks.evaluateTypeof.for(key).tap(\"ExtendedAPIPlugin\", ParserHelpers.evaluateToString(REPLACEMENT_TYPES[key]));\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"ExtendedAPIPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"ExtendedAPIPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/esm\").tap(\"ExtendedAPIPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = ExtendedAPIPlugin;","map":null,"metadata":{},"sourceType":"script"}