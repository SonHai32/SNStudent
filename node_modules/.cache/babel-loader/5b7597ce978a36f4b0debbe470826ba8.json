{"ast":null,"code":"var _jsxFileName = \"/home/hari/Desktop/web-dev/React/SNStudent/src/components/NewsFeeds/NewsFeeds.js\";\nimport React from 'react';\nimport { Segment, Header, Icon, Feed, Image, Divider, Button, List, Dropdown, Container, Loader, Dimmer } from 'semantic-ui-react';\nimport uuid from 'uuidv4';\nimport firebase from '../../firebase';\nimport FileModal from './FileModal';\nimport ImageModal from './ImageModal';\nimport * as moment from 'moment';\nimport hash from 'js-hash-code';\nimport editIcon from \"../../Images/edit.svg\";\nimport CreatePostModal from './CreatePostModal';\n\nclass NewsFeeds extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      like: false,\n      user: this.props.currentUser,\n      post: '',\n      fileModal: false,\n      imageModalStatus: false,\n      imageModalURL: '',\n      imagePost: [],\n      postCreate: [],\n      postModal: false,\n      postFromDatabase: [],\n      databaseRef: firebase.database().ref('posts'),\n      imageLoading: false,\n      postLoading: false,\n      postDrowdownOptions: [{\n        key: 'savePost',\n        text: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }, \" \", React.createElement(Icon, {\n          circular: true,\n          size: \"small\",\n          name: \"tag\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 35\n          },\n          __self: this\n        }), \" L\\u01B0u b\\xE0i vi\\u1EBFt \")\n      }, {\n        key: 'postReport',\n        text: React.createElement(\"span\", {\n          onClick: this.handleMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \" \", React.createElement(Icon, {\n          circular: true,\n          size: \"small\",\n          name: \"warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }), \" B\\xE1o c\\xE1o b\\xE0i vi\\u1EBFt \")\n      }]\n    };\n\n    this.addPostListener = () => {\n      const ref = firebase.database().ref('posts');\n      const postLoaded = [];\n      ref.on('child_added', snap => {\n        ref.child(snap.key).on('child_added', snap => postLoaded.push(snap.val()));\n        this.setState({\n          postFromDatabase: postLoaded.sort((a, b) => {\n            return b.timestamp - a.timestamp;\n          })\n        });\n      });\n    };\n\n    this.openImageModal = event => {\n      this.setState({\n        imageModalStatus: true,\n        imageModalURL: event.target.name\n      });\n    };\n\n    this.closeImageModal = () => {\n      this.setState({\n        imageModalStatus: false,\n        imageModalURL: ''\n      });\n    };\n\n    this.openPostModal = () => {\n      this.setState({\n        postModal: true\n      });\n    };\n\n    this.closePostModal = () => {\n      this.setState({\n        postModal: false\n      });\n    };\n\n    this.handleLikeClicked = (event, {\n      name\n    }) => {\n      event.preventDefault();\n      const post = this.state.postFromDatabase.filter((val, key, arr) => {\n        return val.postChild === name;\n      });\n      console.log(post[0].avatar);\n      let postLiked = post[0].liked;\n      const currentUserLiked = postLiked.some(val => {\n        return val.userUID === this.state.user.uid;\n      });\n      const imageNotExist = post[0].postImages === undefined;\n\n      if (currentUserLiked) {\n        postLiked = postLiked.filter((val, index, arr) => {\n          return val.userUID !== this.state.user.uid;\n        });\n      } else {\n        postLiked.push({\n          username: this.state.user.displayName,\n          userUID: this.state.user.uid\n        });\n      }\n\n      let postUpdate;\n\n      if (imageNotExist) {\n        post.forEach(val => {\n          postUpdate = {\n            postChild: val.postChild,\n            createByUid: val.createByUid,\n            createByName: val.createByName,\n            avatar: val.avatar,\n            timestamp: val.timestamp,\n            postText: val.postText,\n            liked: postLiked\n          };\n        });\n      } else {\n        post.forEach(val => {\n          postUpdate = {\n            postChild: val.postChild,\n            createByUid: val.createByUid,\n            createByName: val.createByName,\n            avatar: val.avatar,\n            timestamp: val.timestamp,\n            postImages: val.postImages,\n            postText: val.postText,\n            liked: postLiked\n          };\n        });\n      }\n\n      this.state.databaseRef.child(name).set(postUpdate).then(() => this.addPostListener()).catch(err => console.log(err));\n    };\n\n    this.displayImagePost = ({\n      imagePost\n    }) => // this.state.uploadStatus.includes('uploading')  ? \n    // <Segment size='large' loading={this.state.percentUploaded < 100} >\n    //   <List horizontal>\n    //       {imagePost.map((val,key) => (\n    //         <List.Item key={key+uuid} style={{marginRight: '15px'}}> \n    //             <Image  rounded size='small' key={val.downloadURL} src={val.downloadURL} label={{as: 'a' ,name: key, corner:'right', icon:'remove',size: 'mini',color:'red',onClick: this.removeImagePost}} /> \n    //         </List.Item> ) )}\n    //     <List.Item>\n    //       <Icon style={{cursor: 'pointer', boder: 'solid 2px '}} color='black' inverted name='add' size='big' onClick={this.openModal} />\n    //     </List.Item>\n    //   </List>\n    // </Segment> : ''\n    React.createElement(Dimmer.Dimmable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, React.createElement(Dimmer, {\n      inverted: true,\n      active: this.state.percentUploaded > 0 && this.state.percentUploaded < 100,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }, \" Loading \")), React.createElement(List, {\n      horizontal: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, imagePost.map((val, key) => React.createElement(List.Item, {\n      key: key + uuid,\n      style: {\n        marginRight: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(Image, {\n      wrapped: true,\n      rounded: true,\n      size: \"small\",\n      key: val.downloadURL,\n      src: val.downloadURL,\n      label: {\n        as: 'a',\n        name: key,\n        corner: 'right',\n        icon: 'remove',\n        size: 'tiny',\n        color: 'red',\n        onClick: this.removeImagePost\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 205\n      },\n      __self: this\n    }))), imagePost.length > 0 ? React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      link: true,\n      color: \"black\",\n      inverted: true,\n      name: \"add\",\n      size: \"big\",\n      onClick: this.openFileModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220\n      },\n      __self: this\n    }), \" \") : '', \" \"));\n\n    this.deleteImageFromStorge = imagePath => {\n      if (imagePath) {\n        this.state.storeRef.child(imagePath).delete().then(() => console.log(\"deleted\")).catch(err => console.log(err));\n      }\n    };\n\n    this.removeImagePost = event => {\n      event.preventDefault();\n      let removeIndex = event.target.name;\n      this.deleteImageFromStorge(this.state.imagePost[removeIndex].imagePath);\n      const newImagePost = this.state.imagePost.filter((value, index, arr) => {\n        return index !== removeIndex;\n      });\n      this.setState({\n        imagePost: newImagePost\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.addPostListener();\n  }\n\n  render() {\n    const _this$state = this.state,\n          user = _this$state.user,\n          postFromDatabase = _this$state.postFromDatabase;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, React.createElement(FileModal, {\n      fileModal: this.state.fileModal,\n      uploadFile: this.uploadFile,\n      closeModal: this.closeFileModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 269\n      },\n      __self: this\n    }), \" \", React.createElement(CreatePostModal, {\n      modal: this.state.postModal,\n      closeModal: this.closePostModal,\n      user: user,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      block: true,\n      style: {\n        background: '#F9FCFA'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 282\n      },\n      __self: this\n    }, React.createElement(Header.Content, {\n      style: {\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, \" \", React.createElement(Image, {\n      spaced: \"right\",\n      style: {\n        width: '30px'\n      },\n      src: editIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 289\n      },\n      __self: this\n    }), \"T\\u1EA1o B\\xE0i Vi\\u1EBFt  \")), this.displayImagePost(this.state), React.createElement(Container, {\n      fluid: true,\n      style: {\n        width: '100%',\n        height: '80px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    }, React.createElement(Header, {\n      textAlign: \"left\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308\n      },\n      __self: this\n    }, React.createElement(Image, {\n      size: \"large\",\n      avatar: true,\n      src: user.photoURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 310\n      },\n      __self: this\n    }), \"  \", React.createElement(\"span\", {\n      onClick: this.openPostModal,\n      style: {\n        opacity: 0.5\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }, \" B\\u1EA1n mu\\u1ED1n chia s\\u1EBB \\u0111i\\u1EC1u g\\xEC ? \"), \" \")), \" \", React.createElement(Button, {\n      fluid: true,\n      color: \"teal\",\n      onClick: this.openPostModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"T\\u1EA1o b\\xE0i vi\\u1EBFt c\\u1EE7a b\\u1EA1n \"), this.state.post.length > 0 || this.state.imagePost.length > 0 ? React.createElement(Button, {\n      onClick: this.savePost,\n      fluid: true,\n      style: {\n        marginTop: '20px',\n        background: '#ecf7e7'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 350\n      },\n      __self: this\n    }, \"Post \") : ''), postFromDatabase.length > 0 ? postFromDatabase.map((val, key) => React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365\n      },\n      __self: this\n    }, React.createElement(Feed, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }, React.createElement(Feed.Event, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 370\n      },\n      __self: this\n    }, React.createElement(Feed.Label, {\n      image: val.avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372\n      },\n      __self: this\n    }), \" \", React.createElement(Feed.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374\n      },\n      __self: this\n    }, React.createElement(Feed.Summary, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      inline: true,\n      closeOnChange: true,\n      options: this.state.postDrowdownOptions,\n      pointing: \"top right\",\n      icon: null,\n      style: {\n        float: 'right',\n        zIndex: 1000\n      },\n      trigger: React.createElement(\"i\", {\n        style: {\n          opacity: 0.5\n        },\n        className: \"fas fa-ellipsis-h\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 384\n        },\n        __self: this\n      }, \" \"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }), React.createElement(Feed.User, {\n      content: val.createByName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }), \" \", React.createElement(Feed.Date, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390\n      },\n      __self: this\n    }, moment(val.timestamp).locale('vi').fromNow(), \" \")), \" \", React.createElement(Feed.Summary, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      style: {\n        opacity: 0.5,\n        fontSize: 14\n      },\n      className: \"fas fa-globe-asia\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, \" \"))))), React.createElement(Feed, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422\n      },\n      __self: this\n    }, React.createElement(Feed.Event, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 425\n      },\n      __self: this\n    }, React.createElement(Feed.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      text: true,\n      textAlign: \"justified\",\n      content: val.postText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 429\n      },\n      __self: this\n    }), \" \", val.postImages ? val.postImages.map((value, key) => React.createElement(List, {\n      key: val.createByUid + val.timestamp + uuid() + hash(value.downloadURL),\n      horizontal: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 436\n      },\n      __self: this\n    }, React.createElement(List.Item, {\n      key: 'list' + val.createByUid + val.timestamp + uuid() + hash(value.downloadURL),\n      as: \"a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 439\n      },\n      __self: this\n    }, React.createElement(Image, {\n      centered: true,\n      fluid: true,\n      key: 'image' + val.createByUid + val.timestamp + uuid() + hash(value.downloadURL),\n      src: value.downloadURL,\n      name: value.downloadURL,\n      onClick: this.openImageModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 444\n      },\n      __self: this\n    }), \" \", \" \", React.createElement(ImageModal, {\n      imageModal: this.state.imageModalStatus,\n      closeModal: this.closeImageModal,\n      imageURL: this.state.imageModalURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 452\n      },\n      __self: this\n    }), \" \"), \" \")) : '')), React.createElement(Container, {\n      style: {\n        marginTop: '15px'\n      },\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: val.liked.length - 1 !== 0 ? 'thumbs up' : '',\n      color: \"blue\",\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 479\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 484\n      },\n      __self: this\n    }, \" \", val.liked.length - 1 === 0 ? '' : val.liked.length - 1 + ' Thích', \" \"), \" \", React.createElement(\"span\", {\n      style: {\n        float: 'right',\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 486\n      },\n      __self: this\n    }, \" 20 comnents \"), \" \"), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491\n      },\n      __self: this\n    }), React.createElement(Button.Group, {\n      fluid: true,\n      size: \"small\",\n      compact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493\n      },\n      __self: this\n    }, React.createElement(Button, {\n      name: val.postChild,\n      onClick: this.handleLikeClicked,\n      basic: true,\n      compact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 496\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"thumbs up\",\n      color: val.liked.some(val => {\n        return val.userUID === user.uid;\n      }) ? 'blue' : 'grey',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 501\n      },\n      __self: this\n    }), \" Like \"), \" \", React.createElement(Button, {\n      basic: true,\n      compact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 505\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"comment outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 507\n      },\n      __self: this\n    }), \" Comment \"), \" \", React.createElement(Button, {\n      basic: true,\n      compact: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"share\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 511\n      },\n      __self: this\n    }), \" Share \"), \" \"), \" \", React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 514\n      },\n      __self: this\n    })), \" \")) : '');\n  }\n\n}\n\nexport default NewsFeeds;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/NewsFeeds/NewsFeeds.js"],"names":["React","Segment","Header","Icon","Feed","Image","Divider","Button","List","Dropdown","Container","Loader","Dimmer","uuid","firebase","FileModal","ImageModal","moment","hash","CreatePostModal","NewsFeeds","Component","state","like","user","props","currentUser","post","fileModal","imageModalStatus","imageModalURL","imagePost","postCreate","postModal","postFromDatabase","databaseRef","database","ref","imageLoading","postLoading","postDrowdownOptions","key","text","handleMessage","addPostListener","postLoaded","on","snap","child","push","val","setState","sort","a","b","timestamp","openImageModal","event","target","name","closeImageModal","openPostModal","closePostModal","handleLikeClicked","preventDefault","filter","arr","postChild","console","log","avatar","postLiked","liked","currentUserLiked","some","userUID","uid","imageNotExist","postImages","undefined","index","username","displayName","postUpdate","forEach","createByUid","createByName","postText","set","then","catch","err","displayImagePost","percentUploaded","map","marginRight","downloadURL","as","corner","icon","size","color","onClick","removeImagePost","length","openFileModal","deleteImageFromStorge","imagePath","storeRef","delete","removeIndex","newImagePost","value","componentDidMount","render","uploadFile","closeFileModal","background","opacity","width","editIcon","height","photoURL","savePost","marginTop","float","zIndex","locale","fromNow","fontSize"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,EAAkBC,MAAlB,EAA0BC,IAA1B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6CC,OAA7C,EAAsDC,MAAtD,EAA8DC,IAA9D,EAAoEC,QAApE,EAA8EC,SAA9E,EAAyFC,MAAzF,EAAiGC,MAAjG,QAA+G,mBAA/G;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAOC,QAAP,MAAqB,gBAArB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,QAAxB;AACA,OAAOC,IAAP,MAAiB,cAAjB;;AAEA,OAAOC,eAAP,MAA4B,mBAA5B;;AAMA,MAAMC,SAAN,SAAwBpB,KAAK,CAACqB,SAA9B,CAAwC;AAAA;AAAA;AAAA,SAEhCC,KAFgC,GAExB;AACJC,MAAAA,IAAI,EAAE,KADF;AAEJC,MAAAA,IAAI,EAAE,KAAKC,KAAL,CAAWC,WAFb;AAGJC,MAAAA,IAAI,EAAE,EAHF;AAIJC,MAAAA,SAAS,EAAE,KAJP;AAKJC,MAAAA,gBAAgB,EAAE,KALd;AAMJC,MAAAA,aAAa,EAAE,EANX;AAOJC,MAAAA,SAAS,EAAE,EAPP;AAQJC,MAAAA,UAAU,EAAE,EARR;AASJC,MAAAA,SAAS,EAAE,KATP;AAUJC,MAAAA,gBAAgB,EAAE,EAVd;AAYJC,MAAAA,WAAW,EAAErB,QAAQ,CAACsB,QAAT,GAAoBC,GAApB,CAAwB,OAAxB,CAZT;AAaJC,MAAAA,YAAY,EAAE,KAbV;AAcJC,MAAAA,WAAW,EAAE,KAdT;AAeJC,MAAAA,mBAAmB,EAAE,CAAC;AACdC,QAAAA,GAAG,EAAE,UADS;AAEdC,QAAAA,IAAI,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAAS,oBAAE,IAAF;AAAO,UAAA,QAAQ,MAAf;AAAgB,UAAA,IAAI,EAAG,OAAvB;AACf,UAAA,IAAI,EAAG,KADQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAT;AAFQ,OAAD,EAOjB;AACID,QAAAA,GAAG,EAAE,YADT;AAEIC,QAAAA,IAAI,EAAE;AAAO,UAAA,OAAO,EAAK,KAAKC,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAA0C,oBAAE,IAAF;AAAO,UAAA,QAAQ,MAAf;AAAgB,UAAA,IAAI,EAAG,OAAvB;AAChD,UAAA,IAAI,EAAG,SADyC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAA1C;AAFV,OAPiB;AAfjB,KAFwB;;AAAA,SAwChCC,eAxCgC,GAwCd,MAAM;AAEpB,YAAMP,GAAG,GAAGvB,QAAQ,CAACsB,QAAT,GAAoBC,GAApB,CAAwB,OAAxB,CAAZ;AACA,YAAMQ,UAAU,GAAG,EAAnB;AACAR,MAAAA,GAAG,CAACS,EAAJ,CAAO,aAAP,EAAsBC,IAAI,IAAI;AAC1BV,QAAAA,GAAG,CAACW,KAAJ,CAAUD,IAAI,CAACN,GAAf,EAAoBK,EAApB,CAAuB,aAAvB,EAAsCC,IAAI,IAAIF,UAAU,CAACI,IAAX,CAAgBF,IAAI,CAACG,GAAL,EAAhB,CAA9C;AACA,aAAKC,QAAL,CAAc;AAAEjB,UAAAA,gBAAgB,EAAEW,UAAU,CAACO,IAAX,CAAgB,CAACC,CAAD,EAAIC,CAAJ,KAAU;AAAE,mBAAOA,CAAC,CAACC,SAAF,GAAcF,CAAC,CAACE,SAAvB;AAAkC,WAA9D;AAApB,SAAd;AAEH,OAJD;AAOH,KAnD+B;;AAAA,SAyDhCC,cAzDgC,GAyDfC,KAAK,IAAI;AAEtB,WAAKN,QAAL,CAAc;AAAEtB,QAAAA,gBAAgB,EAAE,IAApB;AAA0BC,QAAAA,aAAa,EAAE2B,KAAK,CAACC,MAAN,CAAaC;AAAtD,OAAd;AACH,KA5D+B;;AAAA,SA8DhCC,eA9DgC,GA8Dd,MAAM;AACpB,WAAKT,QAAL,CAAc;AAAEtB,QAAAA,gBAAgB,EAAE,KAApB;AAA2BC,QAAAA,aAAa,EAAE;AAA1C,OAAd;AAEH,KAjE+B;;AAAA,SAmEhC+B,aAnEgC,GAmEhB,MAAM;AAClB,WAAKV,QAAL,CAAc;AAAElB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KArE+B;;AAAA,SAuEhC6B,cAvEgC,GAuEf,MAAM;AACnB,WAAKX,QAAL,CAAc;AAAElB,QAAAA,SAAS,EAAE;AAAb,OAAd;AACH,KAzE+B;;AAAA,SAgFhC8B,iBAhFgC,GAgFZ,CAACN,KAAD,EAAQ;AAAEE,MAAAA;AAAF,KAAR,KAAqB;AAErCF,MAAAA,KAAK,CAACO,cAAN;AACA,YAAMrC,IAAI,GAAG,KAAKL,KAAL,CAAWY,gBAAX,CAA4B+B,MAA5B,CAAmC,CAACf,GAAD,EAAMT,GAAN,EAAWyB,GAAX,KAAmB;AAC/D,eAAOhB,GAAG,CAACiB,SAAJ,KAAkBR,IAAzB;AACH,OAFY,CAAb;AAIAS,MAAAA,OAAO,CAACC,GAAR,CAAY1C,IAAI,CAAC,CAAD,CAAJ,CAAQ2C,MAApB;AAIA,UAAIC,SAAS,GAAG5C,IAAI,CAAC,CAAD,CAAJ,CAAQ6C,KAAxB;AAEA,YAAMC,gBAAgB,GAAGF,SAAS,CAACG,IAAV,CAAexB,GAAG,IAAI;AAE3C,eAAOA,GAAG,CAACyB,OAAJ,KAAgB,KAAKrD,KAAL,CAAWE,IAAX,CAAgBoD,GAAvC;AAEH,OAJwB,CAAzB;AAOA,YAAMC,aAAa,GAAGlD,IAAI,CAAC,CAAD,CAAJ,CAAQmD,UAAR,KAAuBC,SAA7C;;AAEA,UAAIN,gBAAJ,EAAsB;AAClBF,QAAAA,SAAS,GAAGA,SAAS,CAACN,MAAV,CAAiB,CAACf,GAAD,EAAM8B,KAAN,EAAad,GAAb,KAAqB;AAC9C,iBAAOhB,GAAG,CAACyB,OAAJ,KAAgB,KAAKrD,KAAL,CAAWE,IAAX,CAAgBoD,GAAvC;AACH,SAFW,CAAZ;AAGH,OAJD,MAIO;AACHL,QAAAA,SAAS,CAACtB,IAAV,CAAe;AAAEgC,UAAAA,QAAQ,EAAE,KAAK3D,KAAL,CAAWE,IAAX,CAAgB0D,WAA5B;AAAyCP,UAAAA,OAAO,EAAE,KAAKrD,KAAL,CAAWE,IAAX,CAAgBoD;AAAlE,SAAf;AACH;;AAED,UAAIO,UAAJ;;AACA,UAAIN,aAAJ,EAAmB;AACflD,QAAAA,IAAI,CAACyD,OAAL,CAAalC,GAAG,IAAI;AAChBiC,UAAAA,UAAU,GAAG;AACThB,YAAAA,SAAS,EAAEjB,GAAG,CAACiB,SADN;AAETkB,YAAAA,WAAW,EAAEnC,GAAG,CAACmC,WAFR;AAGTC,YAAAA,YAAY,EAAEpC,GAAG,CAACoC,YAHT;AAIThB,YAAAA,MAAM,EAAEpB,GAAG,CAACoB,MAJH;AAKTf,YAAAA,SAAS,EAAEL,GAAG,CAACK,SALN;AAMTgC,YAAAA,QAAQ,EAAErC,GAAG,CAACqC,QANL;AAOTf,YAAAA,KAAK,EAAED;AAPE,WAAb;AAWH,SAZD;AAcH,OAfD,MAeO;AACH5C,QAAAA,IAAI,CAACyD,OAAL,CAAalC,GAAG,IAAI;AAChBiC,UAAAA,UAAU,GAAG;AACThB,YAAAA,SAAS,EAAEjB,GAAG,CAACiB,SADN;AAETkB,YAAAA,WAAW,EAAEnC,GAAG,CAACmC,WAFR;AAGTC,YAAAA,YAAY,EAAEpC,GAAG,CAACoC,YAHT;AAIThB,YAAAA,MAAM,EAAEpB,GAAG,CAACoB,MAJH;AAKTf,YAAAA,SAAS,EAAEL,GAAG,CAACK,SALN;AAMTuB,YAAAA,UAAU,EAAE5B,GAAG,CAAC4B,UANP;AAOTS,YAAAA,QAAQ,EAAErC,GAAG,CAACqC,QAPL;AAQTf,YAAAA,KAAK,EAAED;AARE,WAAb;AAYH,SAbD;AAcH;;AAGD,WAAKjD,KAAL,CAAWa,WAAX,CAAuBa,KAAvB,CAA6BW,IAA7B,EAAmC6B,GAAnC,CAAuCL,UAAvC,EAAmDM,IAAnD,CAAwD,MAAM,KAAK7C,eAAL,EAA9D,EAAsF8C,KAAtF,CAA4FC,GAAG,IAAIvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ,CAAnG;AAGH,KAnJ+B;;AAAA,SAwJhCC,gBAxJgC,GAwJb,CAAC;AAAE7D,MAAAA;AAAF,KAAD,KACX;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA,wBACA,MADA,CACO,QADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,MADA;AACO,MAAA,QAAQ,MADf;AACgB,MAAA,MAAM,EAAK,KAAKT,KAAL,CAAWuE,eAAX,GAA6B,CAA7B,IAAkC,KAAKvE,KAAL,CAAWuE,eAAX,GAA6B,GAD1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,MADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFA,CAFA,EAUA,oBACA,IADA;AACK,MAAA,UAAU,MADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAII9D,SAAS,CAAC+D,GAAV,CAAc,CAAC5C,GAAD,EAAMT,GAAN,KAAgB,oBACtB,IADsB,CACjB,IADiB;AACZ,MAAA,GAAG,EAAKA,GAAG,GAAG5B,IADF;AAEtB,MAAA,KAAK,EACD;AAAEkF,QAAAA,WAAW,EAAE;AAAf,OAHkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKtB,oBACA,KADA;AACM,MAAA,OAAO,MADb;AACc,MAAA,OAAO,MADrB;AACsB,MAAA,IAAI,EAAG,OAD7B;AAEA,MAAA,GAAG,EAAK7C,GAAG,CAAC8C,WAFZ;AAGA,MAAA,GAAG,EAAK9C,GAAG,CAAC8C,WAHZ;AAIA,MAAA,KAAK,EACD;AAAEC,QAAAA,EAAE,EAAE,GAAN;AAAWtC,QAAAA,IAAI,EAAElB,GAAjB;AAAsByD,QAAAA,MAAM,EAAE,OAA9B;AAAuCC,QAAAA,IAAI,EAAE,QAA7C;AAAuDC,QAAAA,IAAI,EAAE,MAA7D;AAAqEC,QAAAA,KAAK,EAAE,KAA5E;AAAmFC,QAAAA,OAAO,EAAE,KAAKC;AAAjG,OALJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALsB,CAA9B,CAJJ,EAqBgBxE,SAAS,CAACyE,MAAV,GAAmB,CAAnB,GACI,oBACA,IADA,CACK,IADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,IADA;AACK,MAAA,IAAI,MADT;AACU,MAAA,KAAK,EAAG,OADlB;AAEJ,MAAA,QAAQ,MAFJ;AAEK,MAAA,IAAI,EAAG,KAFZ;AAGJ,MAAA,IAAI,EAAG,KAHH;AAIJ,MAAA,OAAO,EAAK,KAAKC,aAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,MADJ,GASa,EA9B7B,MAVA,CA1KwB;;AAAA,SA6NhBC,qBA7NgB,GA6NQC,SAAS,IAAI;AACjC,UAAIA,SAAJ,EAAe;AACX,aAAKrF,KAAL,CAAWsF,QAAX,CAAoB5D,KAApB,CAA0B2D,SAA1B,EAAqCE,MAArC,GAA8CpB,IAA9C,CAAmD,MAAMrB,OAAO,CAACC,GAAR,CAAY,SAAZ,CAAzD,EAAiFqB,KAAjF,CAAuFC,GAAG,IAAIvB,OAAO,CAACC,GAAR,CAAYsB,GAAZ,CAA9F;AACH;AAEJ,KAlOe;;AAAA,SAoOhBY,eApOgB,GAoOE9C,KAAK,IAAI;AACvBA,MAAAA,KAAK,CAACO,cAAN;AACA,UAAI8C,WAAW,GAAGrD,KAAK,CAACC,MAAN,CAAaC,IAA/B;AAEA,WAAK+C,qBAAL,CAA2B,KAAKpF,KAAL,CAAWS,SAAX,CAAqB+E,WAArB,EAAkCH,SAA7D;AAEA,YAAMI,YAAY,GAAG,KAAKzF,KAAL,CAAWS,SAAX,CAAqBkC,MAArB,CAA4B,CAAC+C,KAAD,EAAQhC,KAAR,EAAed,GAAf,KAAuB;AACpE,eAAOc,KAAK,KAAK8B,WAAjB;AACH,OAFoB,CAArB;AAKA,WAAK3D,QAAL,CAAc;AAAEpB,QAAAA,SAAS,EAAEgF;AAAb,OAAd;AAGH,KAlPe;AAAA;;AAoChCE,EAAAA,iBAAiB,GAAG;AAChB,SAAKrE,eAAL;AACH;;AAgNesE,EAAAA,MAAM,GAAG;AAAA,wBAC8B,KAAK5F,KADnC;AAAA,UACGE,IADH,eACGA,IADH;AAAA,UACSU,gBADT,eACSA,gBADT;AAIL,WAAS,oBACL,KADK,CACC,QADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGL,oBACA,SADA;AACU,MAAA,SAAS,EAAK,KAAKZ,KAAL,CAAWM,SADnC;AAEA,MAAA,UAAU,EAAK,KAAKuF,UAFpB;AAGA,MAAA,UAAU,EAAK,KAAKC,cAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAHK,OAOF,oBACH,eADG;AACa,MAAA,KAAK,EAAK,KAAK9F,KAAL,CAAWW,SADlC;AAEH,MAAA,UAAU,EAAK,KAAK6B,cAFjB;AAGH,MAAA,IAAI,EAAKtC,IAHN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPE,EAaL,oBACA,OADA;AACQ,MAAA,OAAO,MADf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA,oBACA,MADA;AACO,MAAA,EAAE,EAAG,IADZ;AAEA,MAAA,KAAK,MAFL;AAEM,MAAA,KAAK,EACP;AAAE6F,QAAAA,UAAU,EAAE;AAAd,OAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKA,oBACA,MADA,CACO,OADP;AACe,MAAA,KAAK,EAChB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAEyB,oBAAE,KAAF;AAAQ,MAAA,MAAM,EAAG,OAAjB;AACzB,MAAA,KAAK,EACD;AAAEC,QAAAA,KAAK,EAAE;AAAT,OAFqB;AAGzB,MAAA,GAAG,EAAKC,QAHiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFzB,gCALA,CAHA,EAmBE,KAAK5B,gBAAL,CAAsB,KAAKtE,KAA3B,CAnBF,EAwBA,oBACA,SADA;AACU,MAAA,KAAK,MADf;AACgB,MAAA,KAAK,EACjB;AAAEiG,QAAAA,KAAK,EAAE,MAAT;AAAiBE,QAAAA,MAAM,EAAE;AAAzB,OAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKA,oBACA,MADA;AACO,MAAA,SAAS,EAAG,MADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,KADA;AACM,MAAA,IAAI,EAAG,OADb;AAEA,MAAA,MAAM,MAFN;AAEO,MAAA,GAAG,EAAKjG,IAAI,CAACkG,QAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,QAKI;AACC,MAAA,OAAO,EAAK,KAAK7D,aADlB;AAEJ,MAAA,KAAK,EACD;AAAEyD,QAAAA,OAAO,EAAE;AAAX,OAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEALJ,MALA,CAxBA,OA0CY,oBACZ,MADY;AACL,MAAA,KAAK,MADA;AACC,MAAA,KAAK,EAAG,MADT;AAEZ,MAAA,OAAO,EAAK,KAAKzD,aAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sDA1CZ,EAuEI,KAAKvC,KAAL,CAAWK,IAAX,CAAgB6E,MAAhB,GAAyB,CAAzB,IAA8B,KAAKlF,KAAL,CAAWS,SAAX,CAAqByE,MAArB,GAA8B,CAA5D,GAAgE,oBAAE,MAAF;AAAS,MAAA,OAAO,EAAK,KAAKmB,QAA1B;AAChE,MAAA,KAAK,MAD2D;AAC1D,MAAA,KAAK,EACH;AAAEC,QAAAA,SAAS,EAAE,MAAb;AAAqBP,QAAAA,UAAU,EAAE;AAAjC,OAFwD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAhE,GAIe,EA3EnB,CAbK,EAgGGnF,gBAAgB,CAACsE,MAAjB,GAA0B,CAA1B,GACItE,gBAAgB,CAAC4D,GAAjB,CAAqB,CAAC5C,GAAD,EAAMT,GAAN,KAEjB,oBACA,OADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA,oBACA,IADA;AACK,MAAA,IAAI,EAAG,OADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,IADA,CACK,KADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,IADA,CACK,KADL;AACW,MAAA,KAAK,EAAKS,GAAG,CAACoB,MADzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,OAIG,oBACH,IADG,CACE,OADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEH,oBACA,IADA,CACK,OADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,QADA;AACS,MAAA,MAAM,MADf;AACgB,MAAA,aAAa,MAD7B;AAC8B,MAAA,OAAO,EAAK,KAAKhD,KAAL,CAAWkB,mBADrD;AAEA,MAAA,QAAQ,EAAG,WAFX;AAGA,MAAA,IAAI,EAAK,IAHT;AAIA,MAAA,KAAK,EACD;AAAEqF,QAAAA,KAAK,EAAE,OAAT;AAAkBC,QAAAA,MAAM,EAAE;AAA1B,OALJ;AAMA,MAAA,OAAO,EAAK;AAAI,QAAA,KAAK,EACb;AAAER,UAAAA,OAAO,EAAE;AAAX,SADI;AAER,QAAA,SAAS,EAAG,mBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,EAYI,oBACA,IADA,CACK,IADL;AACU,MAAA,OAAO,EAAKpE,GAAG,CAACoC,YAD1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAZJ,OAcO,oBACH,IADG,CACE,IADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGDrE,MAAM,CAACiC,GAAG,CAACK,SAAL,CAAN,CAAsBwE,MAAtB,CAA6B,IAA7B,EAAmCC,OAAnC,EAHC,MAdP,CAFG,OA0BgB,oBACf,IADe,CACV,OADU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEf;AACE,MAAA,KAAK,EACH;AAAEV,QAAAA,OAAO,EAAE,GAAX;AAAgBW,QAAAA,QAAQ,EAAE;AAA1B,OAFJ;AAGA,MAAA,SAAS,EAAG,mBAHZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFe,CA1BhB,CAJH,CAFA,CAHA,EAyDI,oBACA,IADA;AACK,MAAA,IAAI,EAAG,OADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA,oBACA,IADA,CACK,KADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,IADA,CACK,OADL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEA,oBACA,SADA;AACU,MAAA,KAAK,MADf;AACgB,MAAA,IAAI,MADpB;AACqB,MAAA,SAAS,EAAG,WADjC;AAEA,MAAA,OAAO,EAAK/E,GAAG,CAACqC,QAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFA,OAQIrC,GAAG,CAAC4B,UAAJ,GACI5B,GAAG,CAAC4B,UAAJ,CAAegB,GAAf,CAAmB,CAACkB,KAAD,EAAQvE,GAAR,KAAkB,oBACjC,IADiC;AAC5B,MAAA,GAAG,EAAKS,GAAG,CAACmC,WAAJ,GAAkBnC,GAAG,CAACK,SAAtB,GAAkC1C,IAAI,EAAtC,GAA2CK,IAAI,CAAC8F,KAAK,CAAChB,WAAP,CAD3B;AAEjC,MAAA,UAAU,MAFuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGjC,oBACA,IADA,CACK,IADL;AACU,MAAA,GAAG,EAAK,SAAS9C,GAAG,CAACmC,WAAb,GAA2BnC,GAAG,CAACK,SAA/B,GAA2C1C,IAAI,EAA/C,GAAoDK,IAAI,CAAC8F,KAAK,CAAChB,WAAP,CAD1E;AAEA,MAAA,EAAE,EAAG,GAFL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKA,oBACA,KADA;AACM,MAAA,QAAQ,MADd;AACe,MAAA,KAAK,MADpB;AACqB,MAAA,GAAG,EAAK,UAAU9C,GAAG,CAACmC,WAAd,GAA4BnC,GAAG,CAACK,SAAhC,GAA4C1C,IAAI,EAAhD,GAAqDK,IAAI,CAAC8F,KAAK,CAAChB,WAAP,CADtF;AAEA,MAAA,GAAG,EAAKgB,KAAK,CAAChB,WAFd;AAGA,MAAA,IAAI,EAAKgB,KAAK,CAAChB,WAHf;AAIA,MAAA,OAAO,EAAK,KAAKxC,cAJjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,YAaE,oBACF,UADE;AAGF,MAAA,UAAU,EAAK,KAAKlC,KAAL,CAAWO,gBAHxB;AAIF,MAAA,UAAU,EAAK,KAAK+B,eAJlB;AAKF,MAAA,QAAQ,EAAK,KAAKtC,KAAL,CAAWQ,aALtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAbF,MAHiC,MAArC,CADJ,GA6BI,EArCR,CAFA,CAHA,EAqDA,oBACA,SADA;AACU,MAAA,KAAK,EACX;AAAE8F,QAAAA,SAAS,EAAE;AAAb,OAFJ;AAGA,MAAA,KAAK,MAHL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIA,oBACA,IADA;AAEA,MAAA,IAAI,EAAK1E,GAAG,CAACsB,KAAJ,CAAUgC,MAAV,GAAmB,CAAnB,KAAyB,CAAzB,GAA6B,WAA7B,GAA2C,EAFpD;AAGA,MAAA,KAAK,EAAG,MAHR;AAIA,MAAA,IAAI,EAAG,OAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJA,EASA;AACK,MAAA,KAAK,EACN;AAAEc,QAAAA,OAAO,EAAE;AAAX,OAFJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAE2BpE,GAAG,CAACsB,KAAJ,CAAUgC,MAAV,GAAmB,CAAnB,KAAyB,CAAzB,GAA6B,EAA7B,GAAkCtD,GAAG,CAACsB,KAAJ,CAAUgC,MAAV,GAAmB,CAAnB,GAAuB,QAFpF,MATA,OAWwG;AACnG,MAAA,KAAK,EACN;AAAEqB,QAAAA,KAAK,EAAE,OAAT;AAAkBP,QAAAA,OAAO,EAAE;AAA3B,OAFoG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAXxG,MArDA,EAqEA,oBACA,OADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MArEA,EAuEA,oBACA,MADA,CACO,KADP;AACa,MAAA,KAAK,MADlB;AACmB,MAAA,IAAI,EAAG,OAD1B;AAEA,MAAA,OAAO,MAFP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGA,oBACA,MADA;AACO,MAAA,IAAI,EAAKpE,GAAG,CAACiB,SADpB;AAEA,MAAA,OAAO,EAAK,KAAKJ,iBAFjB;AAGA,MAAA,KAAK,MAHL;AAGM,MAAA,OAAO,MAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKA,oBACA,IADA;AACK,MAAA,IAAI,EAAG,WADZ;AAEA,MAAA,KAAK,EAAKb,GAAG,CAACsB,KAAJ,CAAUE,IAAV,CAAexB,GAAG,IAAI;AAAE,eAAOA,GAAG,CAACyB,OAAJ,KAAgBnD,IAAI,CAACoD,GAA5B;AAAiC,OAAzD,IAA6D,MAA7D,GAAsE,MAFhF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALA,WAHA,OAYS,oBACT,MADS;AACF,MAAA,KAAK,MADH;AACI,MAAA,OAAO,MADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAET,oBACA,IADA;AACK,MAAA,IAAI,EAAG,iBADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFS,cAZT,OAgBS,oBACT,MADS;AACF,MAAA,KAAK,MADH;AACI,MAAA,OAAO,MADX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAET,oBACA,IADA;AACK,MAAA,IAAI,EAAG,OADZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFS,YAhBT,MAvEA,OA4Fe,oBACf,OADe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA5Ff,CAzDJ,MAFJ,CADJ,GAgKa,EAhQhB,CAAT;AA8QK;;AAxgBO;;AA4gBZ,eAAexD,SAAf","sourcesContent":["import React from 'react'\nimport { Segment, Header, Icon, Feed, Image, Divider, Button, List, Dropdown, Container, Loader, Dimmer } from 'semantic-ui-react'\nimport uuid from 'uuidv4'\nimport firebase from '../../firebase'\nimport FileModal from './FileModal'\nimport ImageModal from './ImageModal'\nimport * as moment from 'moment'\nimport hash from 'js-hash-code'\nimport editIcon from '../../Images/edit.svg'\nimport CreatePostModal from './CreatePostModal'\n\n\n\n\n\nclass NewsFeeds extends React.Component {\n\n        state = {\n            like: false,\n            user: this.props.currentUser,\n            post: '',\n            fileModal: false,\n            imageModalStatus: false,\n            imageModalURL: '',\n            imagePost: [],\n            postCreate: [],\n            postModal: false,\n            postFromDatabase: [],\n\n            databaseRef: firebase.database().ref('posts'),\n            imageLoading: false,\n            postLoading: false,\n            postDrowdownOptions: [{\n                    key: 'savePost',\n                    text: < span > < Icon circular size = 'small'\n                    name = 'tag' / > Lưu bài viết < /span>,\n\n\n                },\n                {\n                    key: 'postReport',\n                    text: < span onClick = { this.handleMessage } > < Icon circular size = 'small'\n                    name = 'warning' / > Báo cáo bài viết < /span>,\n\n\n                },\n\n            ]\n\n        }\n\n        componentDidMount() {\n            this.addPostListener()\n        }\n\n        addPostListener = () => {\n\n            const ref = firebase.database().ref('posts')\n            const postLoaded = []\n            ref.on('child_added', snap => {\n                ref.child(snap.key).on('child_added', snap => postLoaded.push(snap.val()));\n                this.setState({ postFromDatabase: postLoaded.sort((a, b) => { return b.timestamp - a.timestamp }) })\n\n            })\n\n\n        }\n\n\n\n\n\n        openImageModal = event => {\n\n            this.setState({ imageModalStatus: true, imageModalURL: event.target.name })\n        }\n\n        closeImageModal = () => {\n            this.setState({ imageModalStatus: false, imageModalURL: '' })\n\n        }\n\n        openPostModal = () => {\n            this.setState({ postModal: true })\n        }\n\n        closePostModal = () => {\n            this.setState({ postModal: false })\n        }\n\n\n\n\n\n\n        handleLikeClicked = (event, { name }) => {\n\n            event.preventDefault();\n            const post = this.state.postFromDatabase.filter((val, key, arr) => {\n                return val.postChild === name\n            })\n\n            console.log(post[0].avatar);\n\n\n\n            let postLiked = post[0].liked;\n\n            const currentUserLiked = postLiked.some(val => {\n\n                return val.userUID === this.state.user.uid;\n\n            })\n\n\n            const imageNotExist = post[0].postImages === undefined;\n\n            if (currentUserLiked) {\n                postLiked = postLiked.filter((val, index, arr) => {\n                    return val.userUID !== this.state.user.uid\n                })\n            } else {\n                postLiked.push({ username: this.state.user.displayName, userUID: this.state.user.uid })\n            }\n\n            let postUpdate;\n            if (imageNotExist) {\n                post.forEach(val => {\n                    postUpdate = {\n                        postChild: val.postChild,\n                        createByUid: val.createByUid,\n                        createByName: val.createByName,\n                        avatar: val.avatar,\n                        timestamp: val.timestamp,\n                        postText: val.postText,\n                        liked: postLiked\n                    }\n\n\n                })\n\n            } else {\n                post.forEach(val => {\n                    postUpdate = {\n                        postChild: val.postChild,\n                        createByUid: val.createByUid,\n                        createByName: val.createByName,\n                        avatar: val.avatar,\n                        timestamp: val.timestamp,\n                        postImages: val.postImages,\n                        postText: val.postText,\n                        liked: postLiked\n                    }\n\n\n                })\n            }\n\n\n            this.state.databaseRef.child(name).set(postUpdate).then(() => this.addPostListener()).catch(err => console.log(err))\n\n\n        }\n\n\n\n\n        displayImagePost = ({ imagePost }) => (\n                // this.state.uploadStatus.includes('uploading')  ? \n                // <Segment size='large' loading={this.state.percentUploaded < 100} >\n                //   <List horizontal>\n\n                //       {imagePost.map((val,key) => (\n                //         <List.Item key={key+uuid} style={{marginRight: '15px'}}> \n\n                //             <Image  rounded size='small' key={val.downloadURL} src={val.downloadURL} label={{as: 'a' ,name: key, corner:'right', icon:'remove',size: 'mini',color:'red',onClick: this.removeImagePost}} /> \n\n                //         </List.Item> ) )}\n\n                //     <List.Item>\n                //       <Icon style={{cursor: 'pointer', boder: 'solid 2px '}} color='black' inverted name='add' size='big' onClick={this.openModal} />\n                //     </List.Item>\n                //   </List>\n\n                // </Segment> : ''\n                <\n                Dimmer.Dimmable >\n                <\n                Dimmer inverted active = { this.state.percentUploaded > 0 && this.state.percentUploaded < 100 } >\n                <\n                Loader > Loading < /Loader>\n\n                <\n                /Dimmer>\n\n                <\n                List horizontal >\n\n                {\n                    imagePost.map((val, key) => ( <\n                            List.Item key = { key + uuid }\n                            style = {\n                                { marginRight: '15px' } } >\n\n                            <\n                            Image wrapped rounded size = 'small'\n                            key = { val.downloadURL }\n                            src = { val.downloadURL }\n                            label = {\n                                { as: 'a', name: key, corner: 'right', icon: 'remove', size: 'tiny', color: 'red', onClick: this.removeImagePost } }\n                            /> \n\n                            <\n                            /List.Item> ) )}\n\n                            {\n                                imagePost.length > 0 ?\n                                    <\n                                    List.Item >\n                                    <\n                                    Icon link color = 'black'\n                                inverted name = 'add'\n                                size = 'big'\n                                onClick = { this.openFileModal }\n                                /> <\n                                /List.Item>: ''\n                            } <\n                            /List>\n\n\n\n\n                            <\n                            /Dimmer.Dimmable>\n                        )\n\n                        deleteImageFromStorge = imagePath => {\n                            if (imagePath) {\n                                this.state.storeRef.child(imagePath).delete().then(() => console.log(\"deleted\")).catch(err => console.log(err))\n                            }\n\n                        }\n\n                        removeImagePost = event => {\n                            event.preventDefault();\n                            let removeIndex = event.target.name;\n\n                            this.deleteImageFromStorge(this.state.imagePost[removeIndex].imagePath)\n\n                            const newImagePost = this.state.imagePost.filter((value, index, arr) => {\n                                return index !== removeIndex\n                            })\n\n\n                            this.setState({ imagePost: newImagePost })\n\n\n                        }\n\n\n\n                        render() {\n                            const { user, postFromDatabase } = this.state;\n\n\n                            return ( <\n                                React.Fragment >\n\n                                <\n                                FileModal fileModal = { this.state.fileModal }\n                                uploadFile = { this.uploadFile }\n                                closeModal = { this.closeFileModal }\n                                /> <\n                                CreatePostModal modal = { this.state.postModal }\n                                closeModal = { this.closePostModal }\n                                user = { user }\n                                />\n\n                                <\n                                Segment stacked >\n\n                                <\n                                Header as = 'h3'\n                                block style = {\n                                    { background: '#F9FCFA' } } >\n\n                                <\n                                Header.Content style = {\n                                    { opacity: 0.6 } } > < Image spaced = 'right'\n                                style = {\n                                    { width: '30px' } }\n                                src = { editIcon }\n                                />Tạo Bài Viết  </Header.Content >\n\n                                <\n                                /Header>\n\n                                { this.displayImagePost(this.state) }\n\n\n\n\n                                <\n                                Container fluid style = {\n                                    { width: '100%', height: '80px' } } >\n\n\n                                <\n                                Header textAlign = 'left' >\n                                <\n                                Image size = 'large'\n                                avatar src = { user.photoURL }\n                                />  <\n                                span onClick = { this.openPostModal }\n                                style = {\n                                    { opacity: 0.5 } } > Bạn muốn chia sẻ điều gì ? < /span> <\n                                /Header>\n\n\n                                <\n                                /Container> <\n                                Button fluid color = 'teal'\n                                onClick = { this.openPostModal } >\n                                Tạo bài viết của bạn <\n                                /Button>\n\n                                {\n                                    /* <Button.Group  compact fluid widths={4}  >\n                                            \n                                          <Button inverted style={{background: '#6FBE42'}}  onClick={this.openFileModal}  >\n                                                  <Icon name='photo' /> Ảnh/Video\n                                                </Button>\n                                                <Button inverted style={{background: '#6FBE42'}}>\n                                                  <Icon name='user plus' /> Tag Friends\n                                                </Button>\n                                             \n                                             \n                                                <Button inverted style={{background: '#6FBE42'}}>\n                                                  <Icon name='smile outline' /> Cảm Xúc\n                                                </Button>\n                                              \n                                                <Button inverted style={{background: '#6FBE42'}}>\n                                                  <Icon name='list' /> Khác\n                                                 </Button>\n                                          </Button.Group> */\n                                }\n\n\n                                {\n                                    this.state.post.length > 0 || this.state.imagePost.length > 0 ? < Button onClick = { this.savePost }\n                                    fluid style = {\n                                            { marginTop: '20px', background: '#ecf7e7' } } >\n                                        Post <\n                                        /Button> : ''}\n\n                                    <\n                                    /Segment>\n\n\n\n                                    {\n                                        postFromDatabase.length > 0 ? (\n                                            postFromDatabase.map((val, key) => (\n\n                                                <\n                                                Segment >\n\n                                                <\n                                                Feed size = 'large' >\n                                                <\n                                                Feed.Event >\n                                                <\n                                                Feed.Label image = { val.avatar }\n                                                /> <\n                                                Feed.Content >\n                                                <\n                                                Feed.Summary >\n                                                <\n                                                Dropdown inline closeOnChange options = { this.state.postDrowdownOptions }\n                                                pointing = 'top right'\n                                                icon = { null }\n                                                style = {\n                                                    { float: 'right', zIndex: 1000 } }\n                                                trigger = { < i style = {\n                                                        { opacity: 0.5 } }\n                                                    className = \"fas fa-ellipsis-h\" > < /i>} /\n                                                    >\n                                                    <\n                                                    Feed.User content = { val.createByName }\n                                                    /> <\n                                                    Feed.Date >\n\n                                                    { moment(val.timestamp).locale('vi').fromNow() } { /* {moment(val.timestamp).fromNow()} */ }\n\n\n                                                    <\n                                                    /Feed.Date>\n\n                                                    <\n                                                    /Feed.Summary> <\n                                                    Feed.Summary >\n                                                    <\n                                                    i style = {\n                                                        { opacity: 0.5, fontSize: 14 } }\n                                                    className = \"fas fa-globe-asia\" > < /i> \n\n                                                    <\n                                                    /Feed.Summary>\n\n\n\n\n                                                    <\n                                                    /Feed.Content>\n\n                                                    <\n                                                    /Feed.Event>\n\n                                                    <\n                                                    /Feed>\n\n                                                    <\n                                                    Feed size = 'large' >\n\n                                                    <\n                                                    Feed.Event >\n                                                    <\n                                                    Feed.Content >\n                                                    <\n                                                    Container fluid text textAlign = 'justified'\n                                                    content = { val.postText } >\n\n                                                    <\n                                                    /Container> {\n                                                        val.postImages ? (\n                                                            val.postImages.map((value, key) => ( <\n                                                                List key = { val.createByUid + val.timestamp + uuid() + hash(value.downloadURL) }\n                                                                horizontal >\n                                                                <\n                                                                List.Item key = { 'list' + val.createByUid + val.timestamp + uuid() + hash(value.downloadURL) }\n                                                                as = 'a' >\n\n\n                                                                <\n                                                                Image centered fluid key = { 'image' + val.createByUid + val.timestamp + uuid() + hash(value.downloadURL) }\n                                                                src = { value.downloadURL }\n                                                                name = { value.downloadURL }\n                                                                onClick = { this.openImageModal }\n                                                                /> {\n                                                                    /* <img style={{padding: '10px 10px'}} src={value.downloadURL} name={value.downloadURL} onClick={this.openImageModal} />\n                                                                     */\n                                                                } <\n                                                                ImageModal\n\n                                                                imageModal = { this.state.imageModalStatus }\n                                                                closeModal = { this.closeImageModal }\n                                                                imageURL = { this.state.imageModalURL }\n                                                                /> <\n                                                                /List.Item> <\n                                                                /List>\n\n\n                                                            ))\n                                                        ) : ''\n                                                    }\n\n\n                                                    <\n                                                    /Feed.Content>\n\n                                                    <\n                                                    /Feed.Event>\n\n\n                                                    <\n                                                    Container style = {\n                                                        { marginTop: '15px' } }\n                                                    fluid >\n                                                    <\n                                                    Icon\n                                                    name = { val.liked.length - 1 !== 0 ? 'thumbs up' : '' }\n                                                    color = 'blue'\n                                                    size = 'small' / >\n                                                    <\n                                                    span style = {\n                                                        { opacity: 0.6 } } > { val.liked.length - 1 === 0 ? '' : val.liked.length - 1 + ' Thích' } < /span> <\n                                                    span style = {\n                                                        { float: 'right', opacity: 0.6 } } > 20 comnents < /span> <\n                                                    /Container>\n\n                                                    <\n                                                    Divider / >\n                                                    <\n                                                    Button.Group fluid size = 'small'\n                                                    compact >\n                                                    <\n                                                    Button name = { val.postChild }\n                                                    onClick = { this.handleLikeClicked }\n                                                    basic compact >\n\n                                                    <\n                                                    Icon name = 'thumbs up'\n                                                    color = { val.liked.some(val => { return val.userUID === user.uid }) ? 'blue' : 'grey' }\n                                                    /> Like <\n                                                    /Button> <\n                                                    Button basic compact >\n                                                    <\n                                                    Icon name = 'comment outline' / > Comment <\n                                                    /Button> <\n                                                    Button basic compact >\n                                                    <\n                                                    Icon name = 'share' / > Share <\n                                                    /Button> <\n                                                    /Button.Group> <\n                                                    Divider / >\n\n\n\n                                                    <\n                                                    /Feed> <\n                                                    /Segment>\n                                                ))): ''\n                                        }\n\n\n\n\n\n\n                                        <\n                                        /React.Fragment>\n\n\n\n                                    )\n                                }\n\n                            }\n\n                            export default NewsFeeds"]},"metadata":{},"sourceType":"module"}