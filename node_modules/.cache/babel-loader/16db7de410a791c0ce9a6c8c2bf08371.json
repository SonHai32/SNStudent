{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      OriginalSource = _require.OriginalSource,\n      RawSource = _require.RawSource;\n\nconst Module = require(\"./Module\");\n\nconst WebpackMissingModule = require(\"./dependencies/WebpackMissingModule\");\n\nconst DelegatedSourceDependency = require(\"./dependencies/DelegatedSourceDependency\");\n\nconst DelegatedExportsDependency = require(\"./dependencies/DelegatedExportsDependency\");\n/** @typedef {import(\"./dependencies/ModuleDependency\")} ModuleDependency */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n\n\nclass DelegatedModule extends Module {\n  constructor(sourceRequest, data, type, userRequest, originalRequest) {\n    super(\"javascript/dynamic\", null); // Info from Factory\n\n    this.sourceRequest = sourceRequest;\n    this.request = data.id;\n    this.type = type;\n    this.userRequest = userRequest;\n    this.originalRequest = originalRequest;\n    this.delegateData = data; // Build info\n\n    this.delegatedSourceDependency = undefined;\n  }\n\n  libIdent(options) {\n    return typeof this.originalRequest === \"string\" ? this.originalRequest : this.originalRequest.libIdent(options);\n  }\n\n  identifier() {\n    return \"delegated \".concat(JSON.stringify(this.request), \" from \").concat(this.sourceRequest);\n  }\n\n  readableIdentifier() {\n    return \"delegated \".concat(this.userRequest, \" from \").concat(this.sourceRequest);\n  }\n\n  needRebuild() {\n    return false;\n  }\n\n  build(options, compilation, resolver, fs, callback) {\n    this.built = true;\n    this.buildMeta = Object.assign({}, this.delegateData.buildMeta);\n    this.buildInfo = {};\n    this.delegatedSourceDependency = new DelegatedSourceDependency(this.sourceRequest);\n    this.addDependency(this.delegatedSourceDependency);\n    this.addDependency(new DelegatedExportsDependency(this, this.delegateData.exports || true));\n    callback();\n  }\n\n  source(depTemplates, runtime) {\n    const dep =\n    /** @type {DelegatedSourceDependency} */\n    this.dependencies[0];\n    const sourceModule = dep.module;\n    let str;\n\n    if (!sourceModule) {\n      str = WebpackMissingModule.moduleCode(this.sourceRequest);\n    } else {\n      str = \"module.exports = (\".concat(runtime.moduleExports({\n        module: sourceModule,\n        request: dep.request\n      }), \")\");\n\n      switch (this.type) {\n        case \"require\":\n          str += \"(\".concat(JSON.stringify(this.request), \")\");\n          break;\n\n        case \"object\":\n          str += \"[\".concat(JSON.stringify(this.request), \"]\");\n          break;\n      }\n\n      str += \";\";\n    }\n\n    if (this.useSourceMap) {\n      return new OriginalSource(str, this.identifier());\n    } else {\n      return new RawSource(str);\n    }\n  }\n\n  size() {\n    return 42;\n  }\n  /**\n   * @param {Hash} hash the hash used to track dependencies\n   * @returns {void}\n   */\n\n\n  updateHash(hash) {\n    hash.update(this.type);\n    hash.update(JSON.stringify(this.request));\n    super.updateHash(hash);\n  }\n\n}\n\nmodule.exports = DelegatedModule;","map":null,"metadata":{},"sourceType":"script"}