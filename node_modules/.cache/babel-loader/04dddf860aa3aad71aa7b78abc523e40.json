{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n/**\n * @param {any[]} args items to be truncated\n * @param {number} maxLength maximum length of args including spaces between\n * @returns {string[]} truncated args\n */\n\nconst truncateArgs = (args, maxLength) => {\n  const lengths = args.map(a => \"\".concat(a).length);\n  const availableLength = maxLength - lengths.length + 1;\n\n  if (availableLength > 0 && args.length === 1) {\n    if (availableLength >= args[0].length) {\n      return args;\n    } else if (availableLength > 3) {\n      return [\"...\" + args[0].slice(-availableLength + 3)];\n    } else {\n      return [args[0].slice(-availableLength)];\n    }\n  } // Check if there is space for at least 4 chars per arg\n\n\n  if (availableLength < lengths.reduce((s, i) => s + Math.min(i, 6), 0)) {\n    // remove args\n    if (args.length > 1) return truncateArgs(args.slice(0, args.length - 1), maxLength);\n    return [];\n  }\n\n  let currentLength = lengths.reduce((a, b) => a + b, 0); // Check if all fits into maxLength\n\n  if (currentLength <= availableLength) return args; // Try to remove chars from the longest items until it fits\n\n  while (currentLength > availableLength) {\n    const maxLength = Math.max(...lengths);\n    const shorterItems = lengths.filter(l => l !== maxLength);\n    const nextToMaxLength = shorterItems.length > 0 ? Math.max(...shorterItems) : 0;\n    const maxReduce = maxLength - nextToMaxLength;\n    let maxItems = lengths.length - shorterItems.length;\n    let overrun = currentLength - availableLength;\n\n    for (let i = 0; i < lengths.length; i++) {\n      if (lengths[i] === maxLength) {\n        const reduce = Math.min(Math.floor(overrun / maxItems), maxReduce);\n        lengths[i] -= reduce;\n        currentLength -= reduce;\n        overrun -= reduce;\n        maxItems--;\n      }\n    }\n  } // Return args reduced to length in lengths\n\n\n  return args.map((a, i) => {\n    const str = \"\".concat(a);\n    const length = lengths[i];\n\n    if (str.length === length) {\n      return str;\n    } else if (length > 5) {\n      return \"...\" + str.slice(-length + 3);\n    } else if (length > 0) {\n      return str.slice(-length);\n    } else {\n      return \"\";\n    }\n  });\n};\n\nmodule.exports = truncateArgs;","map":null,"metadata":{},"sourceType":"script"}