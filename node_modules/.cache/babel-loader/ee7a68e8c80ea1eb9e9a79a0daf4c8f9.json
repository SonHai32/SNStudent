{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst CodeNode = require(\"./CodeNode\");\n\nconst SourceNode = require(\"./SourceNode\");\n\nconst MappingsContext = require(\"./MappingsContext\");\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nclass SourceListMap {\n  constructor(generatedCode, source, originalSource) {\n    if (Array.isArray(generatedCode)) {\n      this.children = generatedCode;\n    } else {\n      this.children = [];\n      if (generatedCode || source) this.add(generatedCode, source, originalSource);\n    }\n  }\n\n  add(generatedCode, source, originalSource) {\n    if (typeof generatedCode === \"string\") {\n      if (source) {\n        this.children.push(new SourceNode(generatedCode, source, originalSource));\n      } else if (this.children.length > 0 && this.children[this.children.length - 1] instanceof CodeNode) {\n        this.children[this.children.length - 1].addGeneratedCode(generatedCode);\n      } else {\n        this.children.push(new CodeNode(generatedCode));\n      }\n    } else if (generatedCode.getMappings && generatedCode.getGeneratedCode) {\n      this.children.push(generatedCode);\n    } else if (generatedCode.children) {\n      generatedCode.children.forEach(function (sln) {\n        this.children.push(sln);\n      }, this);\n    } else {\n      throw new Error(\"Invalid arguments to SourceListMap.protfotype.add: Expected string, Node or SourceListMap\");\n    }\n  }\n\n  preprend(generatedCode, source, originalSource) {\n    if (typeof generatedCode === \"string\") {\n      if (source) {\n        this.children.unshift(new SourceNode(generatedCode, source, originalSource));\n      } else if (this.children.length > 0 && this.children[this.children.length - 1].preprendGeneratedCode) {\n        this.children[this.children.length - 1].preprendGeneratedCode(generatedCode);\n      } else {\n        this.children.unshift(new CodeNode(generatedCode));\n      }\n    } else if (generatedCode.getMappings && generatedCode.getGeneratedCode) {\n      this.children.unshift(generatedCode);\n    } else if (generatedCode.children) {\n      generatedCode.children.slice().reverse().forEach(function (sln) {\n        this.children.unshift(sln);\n      }, this);\n    } else {\n      throw new Error(\"Invalid arguments to SourceListMap.protfotype.prerend: Expected string, Node or SourceListMap\");\n    }\n  }\n\n  mapGeneratedCode(fn) {\n    const normalizedNodes = [];\n    this.children.forEach(function (sln) {\n      sln.getNormalizedNodes().forEach(function (newNode) {\n        normalizedNodes.push(newNode);\n      });\n    });\n    const optimizedNodes = [];\n    normalizedNodes.forEach(function (sln) {\n      sln = sln.mapGeneratedCode(fn);\n\n      if (optimizedNodes.length === 0) {\n        optimizedNodes.push(sln);\n      } else {\n        const last = optimizedNodes[optimizedNodes.length - 1];\n        const mergedNode = last.merge(sln);\n\n        if (mergedNode) {\n          optimizedNodes[optimizedNodes.length - 1] = mergedNode;\n        } else {\n          optimizedNodes.push(sln);\n        }\n      }\n    });\n    return new SourceListMap(optimizedNodes);\n  }\n\n  toString() {\n    return this.children.map(function (sln) {\n      return sln.getGeneratedCode();\n    }).join(\"\");\n  }\n\n  toStringWithSourceMap(options) {\n    const mappingsContext = new MappingsContext();\n    const source = this.children.map(function (sln) {\n      return sln.getGeneratedCode();\n    }).join(\"\");\n    const mappings = this.children.map(function (sln) {\n      return sln.getMappings(mappingsContext);\n    }).join(\"\");\n    const arrays = mappingsContext.getArrays();\n    return {\n      source,\n      map: {\n        version: 3,\n        file: options && options.file,\n        sources: arrays.sources,\n        sourcesContent: mappingsContext.hasSourceContent ? arrays.sourcesContent : undefined,\n        mappings: mappings\n      }\n    };\n  }\n\n}\n\nmodule.exports = SourceListMap;","map":null,"metadata":{},"sourceType":"script"}