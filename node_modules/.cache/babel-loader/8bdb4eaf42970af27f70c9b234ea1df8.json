{"ast":null,"code":"/*\r\nMIT License http://www.opensource.org/licenses/mit-license.php\r\nAuthor Tobias Koppers @sokra\r\n*/\n\"use strict\";\n\nconst DescriptionFileUtils = require(\"./DescriptionFileUtils\");\n\nmodule.exports = class DescriptionFilePlugin {\n  constructor(source, filenames, target) {\n    this.source = source;\n    this.filenames = [].concat(filenames);\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"DescriptionFilePlugin\", (request, resolveContext, callback) => {\n      const directory = request.path;\n      DescriptionFileUtils.loadDescriptionFile(resolver, directory, this.filenames, resolveContext, (err, result) => {\n        if (err) return callback(err);\n\n        if (!result) {\n          if (resolveContext.missing) {\n            this.filenames.forEach(filename => {\n              resolveContext.missing.add(resolver.join(directory, filename));\n            });\n          }\n\n          if (resolveContext.log) resolveContext.log(\"No description file found\");\n          return callback();\n        }\n\n        const relativePath = \".\" + request.path.substr(result.directory.length).replace(/\\\\/g, \"/\");\n        const obj = Object.assign({}, request, {\n          descriptionFilePath: result.path,\n          descriptionFileData: result.content,\n          descriptionFileRoot: result.directory,\n          relativePath: relativePath\n        });\n        resolver.doResolve(target, obj, \"using description file: \" + result.path + \" (relative path: \" + relativePath + \")\", resolveContext, (err, result) => {\n          if (err) return callback(err); // Don't allow other processing\n\n          if (result === undefined) return callback(null, null);\n          callback(null, result);\n        });\n      });\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}