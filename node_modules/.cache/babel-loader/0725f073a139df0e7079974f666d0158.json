{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DelegatedModule = require(\"./DelegatedModule\"); // options.source\n// options.type\n// options.context\n// options.scope\n// options.content\n\n\nclass DelegatedModuleFactoryPlugin {\n  constructor(options) {\n    this.options = options;\n    options.type = options.type || \"require\";\n    options.extensions = options.extensions || [\"\", \".wasm\", \".mjs\", \".js\", \".json\"];\n  }\n\n  apply(normalModuleFactory) {\n    const scope = this.options.scope;\n\n    if (scope) {\n      normalModuleFactory.hooks.factory.tap(\"DelegatedModuleFactoryPlugin\", factory => (data, callback) => {\n        const dependency = data.dependencies[0];\n        const request = dependency.request;\n\n        if (request && request.indexOf(scope + \"/\") === 0) {\n          const innerRequest = \".\" + request.substr(scope.length);\n          let resolved;\n\n          if (innerRequest in this.options.content) {\n            resolved = this.options.content[innerRequest];\n            return callback(null, new DelegatedModule(this.options.source, resolved, this.options.type, innerRequest, request));\n          }\n\n          for (let i = 0; i < this.options.extensions.length; i++) {\n            const extension = this.options.extensions[i];\n            const requestPlusExt = innerRequest + extension;\n\n            if (requestPlusExt in this.options.content) {\n              resolved = this.options.content[requestPlusExt];\n              return callback(null, new DelegatedModule(this.options.source, resolved, this.options.type, requestPlusExt, request + extension));\n            }\n          }\n        }\n\n        return factory(data, callback);\n      });\n    } else {\n      normalModuleFactory.hooks.module.tap(\"DelegatedModuleFactoryPlugin\", module => {\n        if (module.libIdent) {\n          const request = module.libIdent(this.options);\n\n          if (request && request in this.options.content) {\n            const resolved = this.options.content[request];\n            return new DelegatedModule(this.options.source, resolved, this.options.type, request, module);\n          }\n        }\n\n        return module;\n      });\n    }\n  }\n\n}\n\nmodule.exports = DelegatedModuleFactoryPlugin;","map":null,"metadata":{},"sourceType":"script"}