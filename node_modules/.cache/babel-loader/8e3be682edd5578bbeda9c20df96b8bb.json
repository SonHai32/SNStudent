{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst DependencyReference = require(\"./DependencyReference\");\n\nconst HarmonyImportDependency = require(\"./HarmonyImportDependency\");\n\nconst Template = require(\"../Template\");\n\nconst HarmonyLinkingError = require(\"../HarmonyLinkingError\");\n/** @typedef {import(\"../Module\")} Module */\n\n/** @typedef {\"missing\"|\"unused\"|\"empty-star\"|\"reexport-non-harmony-default\"|\"reexport-named-default\"|\"reexport-namespace-object\"|\"reexport-non-harmony-default-strict\"|\"reexport-fake-namespace-object\"|\"rexport-non-harmony-undefined\"|\"safe-reexport\"|\"checked-reexport\"|\"dynamic-reexport\"} ExportModeType */\n\n/** @type {Map<string, string>} */\n\n\nconst EMPTY_MAP = new Map();\n\nclass ExportMode {\n  /**\n   * @param {ExportModeType} type type of the mode\n   */\n  constructor(type) {\n    /** @type {ExportModeType} */\n    this.type = type;\n    /** @type {string|null} */\n\n    this.name = null;\n    /** @type {Map<string, string>} */\n\n    this.map = EMPTY_MAP;\n    /** @type {Module|null} */\n\n    this.module = null;\n    /** @type {string|null} */\n\n    this.userRequest = null;\n  }\n\n}\n\nconst EMPTY_STAR_MODE = new ExportMode(\"empty-star\");\n\nclass HarmonyExportImportedSpecifierDependency extends HarmonyImportDependency {\n  constructor(request, originModule, sourceOrder, parserScope, id, name, activeExports, otherStarExports, strictExportPresence) {\n    super(request, originModule, sourceOrder, parserScope);\n    this.id = id;\n    this.redirectedId = undefined;\n    this.name = name;\n    this.activeExports = activeExports;\n    this.otherStarExports = otherStarExports;\n    this.strictExportPresence = strictExportPresence;\n  }\n\n  get type() {\n    return \"harmony export imported specifier\";\n  }\n\n  get _id() {\n    return this.redirectedId || this.id;\n  }\n\n  getMode(ignoreUnused) {\n    const name = this.name;\n    const id = this._id;\n    const used = this.originModule.isUsed(name);\n    const importedModule = this._module;\n\n    if (!importedModule) {\n      const mode = new ExportMode(\"missing\");\n      mode.userRequest = this.userRequest;\n      return mode;\n    }\n\n    if (!ignoreUnused && (name ? !used : this.originModule.usedExports === false)) {\n      const mode = new ExportMode(\"unused\");\n      mode.name = name || \"*\";\n      return mode;\n    }\n\n    const strictHarmonyModule = this.originModule.buildMeta.strictHarmonyModule;\n\n    if (name && id === \"default\" && importedModule.buildMeta) {\n      if (!importedModule.buildMeta.exportsType) {\n        const mode = new ExportMode(strictHarmonyModule ? \"reexport-non-harmony-default-strict\" : \"reexport-non-harmony-default\");\n        mode.name = name;\n        mode.module = importedModule;\n        return mode;\n      } else if (importedModule.buildMeta.exportsType === \"named\") {\n        const mode = new ExportMode(\"reexport-named-default\");\n        mode.name = name;\n        mode.module = importedModule;\n        return mode;\n      }\n    }\n\n    const isNotAHarmonyModule = importedModule.buildMeta && !importedModule.buildMeta.exportsType;\n\n    if (name) {\n      let mode;\n\n      if (id) {\n        // export { name as name }\n        if (isNotAHarmonyModule && strictHarmonyModule) {\n          mode = new ExportMode(\"rexport-non-harmony-undefined\");\n          mode.name = name;\n        } else {\n          mode = new ExportMode(\"safe-reexport\");\n          mode.map = new Map([[name, id]]);\n        }\n      } else {\n        // export { * as name }\n        if (isNotAHarmonyModule && strictHarmonyModule) {\n          mode = new ExportMode(\"reexport-fake-namespace-object\");\n          mode.name = name;\n        } else {\n          mode = new ExportMode(\"reexport-namespace-object\");\n          mode.name = name;\n        }\n      }\n\n      mode.module = importedModule;\n      return mode;\n    }\n\n    const hasUsedExports = Array.isArray(this.originModule.usedExports);\n    const hasProvidedExports = Array.isArray(importedModule.buildMeta.providedExports);\n\n    const activeFromOtherStarExports = this._discoverActiveExportsFromOtherStartExports(); // export *\n\n\n    if (hasUsedExports) {\n      // reexport * with known used exports\n      if (hasProvidedExports) {\n        const map = new Map(this.originModule.usedExports.filter(id => {\n          if (id === \"default\") return false;\n          if (this.activeExports.has(id)) return false;\n          if (activeFromOtherStarExports.has(id)) return false;\n          if (!importedModule.buildMeta.providedExports.includes(id)) return false;\n          return true;\n        }).map(item => [item, item]));\n\n        if (map.size === 0) {\n          return EMPTY_STAR_MODE;\n        }\n\n        const mode = new ExportMode(\"safe-reexport\");\n        mode.module = importedModule;\n        mode.map = map;\n        return mode;\n      }\n\n      const map = new Map(this.originModule.usedExports.filter(id => {\n        if (id === \"default\") return false;\n        if (this.activeExports.has(id)) return false;\n        if (activeFromOtherStarExports.has(id)) return false;\n        return true;\n      }).map(item => [item, item]));\n\n      if (map.size === 0) {\n        return EMPTY_STAR_MODE;\n      }\n\n      const mode = new ExportMode(\"checked-reexport\");\n      mode.module = importedModule;\n      mode.map = map;\n      return mode;\n    }\n\n    if (hasProvidedExports) {\n      const map = new Map(importedModule.buildMeta.providedExports.filter(id => {\n        if (id === \"default\") return false;\n        if (this.activeExports.has(id)) return false;\n        if (activeFromOtherStarExports.has(id)) return false;\n        return true;\n      }).map(item => [item, item]));\n\n      if (map.size === 0) {\n        return EMPTY_STAR_MODE;\n      }\n\n      const mode = new ExportMode(\"safe-reexport\");\n      mode.module = importedModule;\n      mode.map = map;\n      return mode;\n    }\n\n    const mode = new ExportMode(\"dynamic-reexport\");\n    mode.module = importedModule;\n    return mode;\n  }\n\n  getReference() {\n    const mode = this.getMode(false);\n\n    switch (mode.type) {\n      case \"missing\":\n      case \"unused\":\n      case \"empty-star\":\n        return null;\n\n      case \"reexport-non-harmony-default\":\n      case \"reexport-named-default\":\n        return new DependencyReference(mode.module, [\"default\"], false, this.sourceOrder);\n\n      case \"reexport-namespace-object\":\n      case \"reexport-non-harmony-default-strict\":\n      case \"reexport-fake-namespace-object\":\n      case \"rexport-non-harmony-undefined\":\n        return new DependencyReference(mode.module, true, false, this.sourceOrder);\n\n      case \"safe-reexport\":\n      case \"checked-reexport\":\n        return new DependencyReference(mode.module, Array.from(mode.map.values()), false, this.sourceOrder);\n\n      case \"dynamic-reexport\":\n        return new DependencyReference(mode.module, true, false, this.sourceOrder);\n\n      default:\n        throw new Error(\"Unknown mode \".concat(mode.type));\n    }\n  }\n\n  _discoverActiveExportsFromOtherStartExports() {\n    if (!this.otherStarExports) return new Set();\n    const result = new Set(); // try to learn impossible exports from other star exports with provided exports\n\n    for (const otherStarExport of this.otherStarExports) {\n      const otherImportedModule = otherStarExport._module;\n\n      if (otherImportedModule && Array.isArray(otherImportedModule.buildMeta.providedExports)) {\n        for (const exportName of otherImportedModule.buildMeta.providedExports) {\n          result.add(exportName);\n        }\n      }\n    }\n\n    return result;\n  }\n\n  getExports() {\n    if (this.name) {\n      return {\n        exports: [this.name],\n        dependencies: undefined\n      };\n    }\n\n    const importedModule = this._module;\n\n    if (!importedModule) {\n      // no imported module available\n      return {\n        exports: null,\n        dependencies: undefined\n      };\n    }\n\n    if (Array.isArray(importedModule.buildMeta.providedExports)) {\n      return {\n        exports: importedModule.buildMeta.providedExports.filter(id => id !== \"default\"),\n        dependencies: [importedModule]\n      };\n    }\n\n    if (importedModule.buildMeta.providedExports) {\n      return {\n        exports: true,\n        dependencies: undefined\n      };\n    }\n\n    return {\n      exports: null,\n      dependencies: [importedModule]\n    };\n  }\n\n  getWarnings() {\n    if (this.strictExportPresence || this.originModule.buildMeta.strictHarmonyModule) {\n      return [];\n    }\n\n    return this._getErrors();\n  }\n\n  getErrors() {\n    if (this.strictExportPresence || this.originModule.buildMeta.strictHarmonyModule) {\n      return this._getErrors();\n    }\n\n    return [];\n  }\n\n  _getErrors() {\n    const importedModule = this._module;\n\n    if (!importedModule) {\n      return;\n    }\n\n    if (!importedModule.buildMeta || !importedModule.buildMeta.exportsType) {\n      // It's not an harmony module\n      if (this.originModule.buildMeta.strictHarmonyModule && this._id && this._id !== \"default\") {\n        // In strict harmony modules we only support the default export\n        return [new HarmonyLinkingError(\"Can't reexport the named export '\".concat(this._id, \"' from non EcmaScript module (only default export is available)\"))];\n      }\n\n      return;\n    }\n\n    if (!this._id) {\n      return;\n    }\n\n    if (importedModule.isProvided(this._id) !== false) {\n      // It's provided or we are not sure\n      return;\n    } // We are sure that it's not provided\n\n\n    const idIsNotNameMessage = this._id !== this.name ? \" (reexported as '\".concat(this.name, \"')\") : \"\";\n    const errorMessage = \"\\\"export '\".concat(this._id, \"'\").concat(idIsNotNameMessage, \" was not found in '\").concat(this.userRequest, \"'\");\n    return [new HarmonyLinkingError(errorMessage)];\n  }\n\n  updateHash(hash) {\n    super.updateHash(hash);\n    const hashValue = this.getHashValue(this._module);\n    hash.update(hashValue);\n  }\n\n  getHashValue(importedModule) {\n    if (!importedModule) {\n      return \"\";\n    }\n\n    const stringifiedUsedExport = JSON.stringify(importedModule.usedExports);\n    const stringifiedProvidedExport = JSON.stringify(importedModule.buildMeta.providedExports);\n    return importedModule.used + stringifiedUsedExport + stringifiedProvidedExport;\n  }\n\n  disconnect() {\n    super.disconnect();\n    this.redirectedId = undefined;\n  }\n\n}\n\nmodule.exports = HarmonyExportImportedSpecifierDependency;\nHarmonyExportImportedSpecifierDependency.Template = class HarmonyExportImportedSpecifierDependencyTemplate extends HarmonyImportDependency.Template {\n  harmonyInit(dep, source, runtime, dependencyTemplates) {\n    super.harmonyInit(dep, source, runtime, dependencyTemplates);\n    const content = this.getContent(dep);\n    source.insert(-1, content);\n  }\n\n  getHarmonyInitOrder(dep) {\n    if (dep.name) {\n      const used = dep.originModule.isUsed(dep.name);\n      if (!used) return NaN;\n    } else {\n      const importedModule = dep._module;\n\n      const activeFromOtherStarExports = dep._discoverActiveExportsFromOtherStartExports();\n\n      if (Array.isArray(dep.originModule.usedExports)) {\n        // we know which exports are used\n        const unused = dep.originModule.usedExports.every(id => {\n          if (id === \"default\") return true;\n          if (dep.activeExports.has(id)) return true;\n          if (importedModule.isProvided(id) === false) return true;\n          if (activeFromOtherStarExports.has(id)) return true;\n          return false;\n        });\n        if (unused) return NaN;\n      } else if (dep.originModule.usedExports && importedModule && Array.isArray(importedModule.buildMeta.providedExports)) {\n        // not sure which exports are used, but we know which are provided\n        const unused = importedModule.buildMeta.providedExports.every(id => {\n          if (id === \"default\") return true;\n          if (dep.activeExports.has(id)) return true;\n          if (activeFromOtherStarExports.has(id)) return true;\n          return false;\n        });\n        if (unused) return NaN;\n      }\n    }\n\n    return super.getHarmonyInitOrder(dep);\n  }\n\n  getContent(dep) {\n    const mode = dep.getMode(false);\n    const module = dep.originModule;\n    const importedModule = dep._module;\n    const importVar = dep.getImportVar();\n\n    switch (mode.type) {\n      case \"missing\":\n        return \"throw new Error(\".concat(JSON.stringify(\"Cannot find module '\".concat(mode.userRequest, \"'\")), \");\\n\");\n\n      case \"unused\":\n        return \"\".concat(Template.toNormalComment(\"unused harmony reexport \".concat(mode.name)), \"\\n\");\n\n      case \"reexport-non-harmony-default\":\n        return \"/* harmony reexport (default from non-harmony) */ \" + this.getReexportStatement(module, module.isUsed(mode.name), importVar, null);\n\n      case \"reexport-named-default\":\n        return \"/* harmony reexport (default from named exports) */ \" + this.getReexportStatement(module, module.isUsed(mode.name), importVar, \"\");\n\n      case \"reexport-fake-namespace-object\":\n        return \"/* harmony reexport (fake namespace object from non-harmony) */ \" + this.getReexportFakeNamespaceObjectStatement(module, module.isUsed(mode.name), importVar);\n\n      case \"rexport-non-harmony-undefined\":\n        return \"/* harmony reexport (non default export from non-harmony) */ \" + this.getReexportStatement(module, module.isUsed(mode.name), \"undefined\", \"\");\n\n      case \"reexport-non-harmony-default-strict\":\n        return \"/* harmony reexport (default from non-harmony) */ \" + this.getReexportStatement(module, module.isUsed(mode.name), importVar, \"\");\n\n      case \"reexport-namespace-object\":\n        return \"/* harmony reexport (module object) */ \" + this.getReexportStatement(module, module.isUsed(mode.name), importVar, \"\");\n\n      case \"empty-star\":\n        return \"/* empty/unused harmony star reexport */\";\n\n      case \"safe-reexport\":\n        return Array.from(mode.map.entries()).map(item => {\n          return \"/* harmony reexport (safe) */ \" + this.getReexportStatement(module, module.isUsed(item[0]), importVar, importedModule.isUsed(item[1])) + \"\\n\";\n        }).join(\"\");\n\n      case \"checked-reexport\":\n        return Array.from(mode.map.entries()).map(item => {\n          return \"/* harmony reexport (checked) */ \" + this.getConditionalReexportStatement(module, item[0], importVar, item[1]) + \"\\n\";\n        }).join(\"\");\n\n      case \"dynamic-reexport\":\n        {\n          const activeExports = new Set([...dep.activeExports, ...dep._discoverActiveExportsFromOtherStartExports()]);\n          let content = \"/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in \" + importVar + \") \"; // Filter out exports which are defined by other exports\n          // and filter out default export because it cannot be reexported with *\n\n          if (activeExports.size > 0) {\n            content += \"if(\" + JSON.stringify(Array.from(activeExports).concat(\"default\")) + \".indexOf(__WEBPACK_IMPORT_KEY__) < 0) \";\n          } else {\n            content += \"if(__WEBPACK_IMPORT_KEY__ !== 'default') \";\n          }\n\n          const exportsName = dep.originModule.exportsArgument;\n          return content + \"(function(key) { __webpack_require__.d(\".concat(exportsName, \", key, function() { return \").concat(importVar, \"[key]; }) }(__WEBPACK_IMPORT_KEY__));\\n\");\n        }\n\n      default:\n        throw new Error(\"Unknown mode \".concat(mode.type));\n    }\n  }\n\n  getReexportStatement(module, key, name, valueKey) {\n    const exportsName = module.exportsArgument;\n    const returnValue = this.getReturnValue(name, valueKey);\n    return \"__webpack_require__.d(\".concat(exportsName, \", \").concat(JSON.stringify(key), \", function() { return \").concat(returnValue, \"; });\\n\");\n  }\n\n  getReexportFakeNamespaceObjectStatement(module, key, name) {\n    const exportsName = module.exportsArgument;\n    return \"__webpack_require__.d(\".concat(exportsName, \", \").concat(JSON.stringify(key), \", function() { return __webpack_require__.t(\").concat(name, \"); });\\n\");\n  }\n\n  getConditionalReexportStatement(module, key, name, valueKey) {\n    if (valueKey === false) {\n      return \"/* unused export */\\n\";\n    }\n\n    const exportsName = module.exportsArgument;\n    const returnValue = this.getReturnValue(name, valueKey);\n    return \"if(__webpack_require__.o(\".concat(name, \", \").concat(JSON.stringify(valueKey), \")) __webpack_require__.d(\").concat(exportsName, \", \").concat(JSON.stringify(key), \", function() { return \").concat(returnValue, \"; });\\n\");\n  }\n\n  getReturnValue(name, valueKey) {\n    if (valueKey === null) {\n      return \"\".concat(name, \"_default.a\");\n    }\n\n    if (valueKey === \"\") {\n      return name;\n    }\n\n    if (valueKey === false) {\n      return \"/* unused export */ undefined\";\n    }\n\n    return \"\".concat(name, \"[\").concat(JSON.stringify(valueKey), \"]\");\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}