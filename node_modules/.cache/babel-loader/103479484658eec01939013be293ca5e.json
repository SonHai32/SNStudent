{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nclass AggressiveMergingPlugin {\n  constructor(options) {\n    if (options !== undefined && typeof options !== \"object\" || Array.isArray(options)) {\n      throw new Error(\"Argument should be an options object. To use defaults, pass in nothing.\\nFor more info on options, see https://webpack.js.org/plugins/\");\n    }\n\n    this.options = options || {};\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    const minSizeReduce = options.minSizeReduce || 1.5;\n    compiler.hooks.thisCompilation.tap(\"AggressiveMergingPlugin\", compilation => {\n      compilation.hooks.optimizeChunksAdvanced.tap(\"AggressiveMergingPlugin\", chunks => {\n        let combinations = [];\n        chunks.forEach((a, idx) => {\n          if (a.canBeInitial()) return;\n\n          for (let i = 0; i < idx; i++) {\n            const b = chunks[i];\n            if (b.canBeInitial()) continue;\n            combinations.push({\n              a,\n              b,\n              improvement: undefined\n            });\n          }\n        });\n\n        for (const pair of combinations) {\n          const a = pair.b.size({\n            chunkOverhead: 0\n          });\n          const b = pair.a.size({\n            chunkOverhead: 0\n          });\n          const ab = pair.b.integratedSize(pair.a, {\n            chunkOverhead: 0\n          });\n          let newSize;\n\n          if (ab === false) {\n            pair.improvement = false;\n            return;\n          } else {\n            newSize = ab;\n          }\n\n          pair.improvement = (a + b) / newSize;\n        }\n\n        combinations = combinations.filter(pair => {\n          return pair.improvement !== false;\n        });\n        combinations.sort((a, b) => {\n          return b.improvement - a.improvement;\n        });\n        const pair = combinations[0];\n        if (!pair) return;\n        if (pair.improvement < minSizeReduce) return;\n\n        if (pair.b.integrate(pair.a, \"aggressive-merge\")) {\n          chunks.splice(chunks.indexOf(pair.a), 1);\n          return true;\n        }\n      });\n    });\n  }\n\n}\n\nmodule.exports = AggressiveMergingPlugin;","map":null,"metadata":{},"sourceType":"script"}