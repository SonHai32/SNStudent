{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nconst asyncLib = require(\"neo-async\");\n\nconst util = require(\"util\");\n\nconst _require = require(\"webpack-sources\"),\n      CachedSource = _require.CachedSource;\n\nconst _require2 = require(\"tapable\"),\n      Tapable = _require2.Tapable,\n      SyncHook = _require2.SyncHook,\n      SyncBailHook = _require2.SyncBailHook,\n      SyncWaterfallHook = _require2.SyncWaterfallHook,\n      AsyncSeriesHook = _require2.AsyncSeriesHook;\n\nconst EntryModuleNotFoundError = require(\"./EntryModuleNotFoundError\");\n\nconst ModuleNotFoundError = require(\"./ModuleNotFoundError\");\n\nconst ModuleDependencyWarning = require(\"./ModuleDependencyWarning\");\n\nconst ModuleDependencyError = require(\"./ModuleDependencyError\");\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n\nconst Chunk = require(\"./Chunk\");\n\nconst Entrypoint = require(\"./Entrypoint\");\n\nconst MainTemplate = require(\"./MainTemplate\");\n\nconst ChunkTemplate = require(\"./ChunkTemplate\");\n\nconst HotUpdateChunkTemplate = require(\"./HotUpdateChunkTemplate\");\n\nconst ModuleTemplate = require(\"./ModuleTemplate\");\n\nconst RuntimeTemplate = require(\"./RuntimeTemplate\");\n\nconst ChunkRenderError = require(\"./ChunkRenderError\");\n\nconst Stats = require(\"./Stats\");\n\nconst Semaphore = require(\"./util/Semaphore\");\n\nconst createHash = require(\"./util/createHash\");\n\nconst SortableSet = require(\"./util/SortableSet\");\n\nconst GraphHelpers = require(\"./GraphHelpers\");\n\nconst ModuleDependency = require(\"./dependencies/ModuleDependency\");\n\nconst compareLocations = require(\"./compareLocations\");\n\nconst _require3 = require(\"./logging/Logger\"),\n      Logger = _require3.Logger,\n      LogType = _require3.LogType;\n\nconst ErrorHelpers = require(\"./ErrorHelpers\");\n\nconst buildChunkGraph = require(\"./buildChunkGraph\");\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./WebpackError\")} WebpackError */\n\n/** @typedef {import(\"./DependenciesBlockVariable\")} DependenciesBlockVariable */\n\n/** @typedef {import(\"./dependencies/SingleEntryDependency\")} SingleEntryDependency */\n\n/** @typedef {import(\"./dependencies/MultiEntryDependency\")} MultiEntryDependency */\n\n/** @typedef {import(\"./dependencies/DllEntryDependency\")} DllEntryDependency */\n\n/** @typedef {import(\"./dependencies/DependencyReference\")} DependencyReference */\n\n/** @typedef {import(\"./DependenciesBlock\")} DependenciesBlock */\n\n/** @typedef {import(\"./AsyncDependenciesBlock\")} AsyncDependenciesBlock */\n\n/** @typedef {import(\"./Dependency\")} Dependency */\n\n/** @typedef {import(\"./Dependency\").DependencyLocation} DependencyLocation */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/** @typedef {import(\"./util/createHash\").Hash} Hash */\n// TODO use @callback\n\n/** @typedef {{[assetName: string]: Source}} CompilationAssets */\n\n/** @typedef {(err: Error|null, result?: Module) => void } ModuleCallback */\n\n/** @typedef {(err?: Error|null, result?: Module) => void } ModuleChainCallback */\n\n/** @typedef {(module: Module) => void} OnModuleCallback */\n\n/** @typedef {(err?: Error|null) => void} Callback */\n\n/** @typedef {(d: Dependency) => any} DepBlockVarDependenciesCallback */\n\n/** @typedef {new (...args: any[]) => Dependency} DepConstructor */\n\n/** @typedef {{apply: () => void}} Plugin */\n\n/**\n * @typedef {Object} ModuleFactoryCreateDataContextInfo\n * @property {string} issuer\n * @property {string} compiler\n */\n\n/**\n * @typedef {Object} ModuleFactoryCreateData\n * @property {ModuleFactoryCreateDataContextInfo} contextInfo\n * @property {any=} resolveOptions\n * @property {string} context\n * @property {Dependency[]} dependencies\n */\n\n/**\n * @typedef {Object} ModuleFactory\n * @property {(data: ModuleFactoryCreateData, callback: ModuleCallback) => any} create\n */\n\n/**\n * @typedef {Object} SortedDependency\n * @property {ModuleFactory} factory\n * @property {Dependency[]} dependencies\n */\n\n/**\n * @typedef {Object} DependenciesBlockLike\n * @property {Dependency[]} dependencies\n * @property {AsyncDependenciesBlock[]} blocks\n * @property {DependenciesBlockVariable[]} variables\n */\n\n/**\n * @typedef {Object} LogEntry\n * @property {string} type\n * @property {any[]} args\n * @property {number} time\n * @property {string[]=} trace\n */\n\n/**\n * @param {Chunk} a first chunk to sort by id\n * @param {Chunk} b second chunk to sort by id\n * @returns {-1|0|1} sort value\n */\n\n\nconst byId = (a, b) => {\n  if (typeof a.id !== typeof b.id) {\n    return typeof a.id < typeof b.id ? -1 : 1;\n  }\n\n  if (a.id < b.id) return -1;\n  if (a.id > b.id) return 1;\n  return 0;\n};\n/**\n * @param {Module} a first module to sort by\n * @param {Module} b second module to sort by\n * @returns {-1|0|1} sort value\n */\n\n\nconst byIdOrIdentifier = (a, b) => {\n  if (typeof a.id !== typeof b.id) {\n    return typeof a.id < typeof b.id ? -1 : 1;\n  }\n\n  if (a.id < b.id) return -1;\n  if (a.id > b.id) return 1;\n  const identA = a.identifier();\n  const identB = b.identifier();\n  if (identA < identB) return -1;\n  if (identA > identB) return 1;\n  return 0;\n};\n/**\n * @param {Module} a first module to sort by\n * @param {Module} b second module to sort by\n * @returns {-1|0|1} sort value\n */\n\n\nconst byIndexOrIdentifier = (a, b) => {\n  if (a.index < b.index) return -1;\n  if (a.index > b.index) return 1;\n  const identA = a.identifier();\n  const identB = b.identifier();\n  if (identA < identB) return -1;\n  if (identA > identB) return 1;\n  return 0;\n};\n/**\n * @param {Compilation} a first compilation to sort by\n * @param {Compilation} b second compilation to sort by\n * @returns {-1|0|1} sort value\n */\n\n\nconst byNameOrHash = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  if (a.fullHash < b.fullHash) return -1;\n  if (a.fullHash > b.fullHash) return 1;\n  return 0;\n};\n/**\n * @param {DependenciesBlockVariable[]} variables DepBlock Variables to iterate over\n * @param {DepBlockVarDependenciesCallback} fn callback to apply on iterated elements\n * @returns {void}\n */\n\n\nconst iterationBlockVariable = (variables, fn) => {\n  for (let indexVariable = 0; indexVariable < variables.length; indexVariable++) {\n    const varDep = variables[indexVariable].dependencies;\n\n    for (let indexVDep = 0; indexVDep < varDep.length; indexVDep++) {\n      fn(varDep[indexVDep]);\n    }\n  }\n};\n/**\n * @template T\n * @param {T[]} arr array of elements to iterate over\n * @param {function(T): void} fn callback applied to each element\n * @returns {void}\n */\n\n\nconst iterationOfArrayCallback = (arr, fn) => {\n  for (let index = 0; index < arr.length; index++) {\n    fn(arr[index]);\n  }\n};\n/**\n * @template T\n * @param {Set<T>} set set to add items to\n * @param {Set<T>} otherSet set to add items from\n * @returns {void}\n */\n\n\nconst addAllToSet = (set, otherSet) => {\n  for (const item of otherSet) {\n    set.add(item);\n  }\n};\n\nclass Compilation extends Tapable {\n  /**\n   * Creates an instance of Compilation.\n   * @param {Compiler} compiler the compiler which created the compilation\n   */\n  constructor(compiler) {\n    super();\n    this.hooks = {\n      /** @type {SyncHook<Module>} */\n      buildModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook<Module>} */\n      rebuildModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook<Module, Error>} */\n      failedModule: new SyncHook([\"module\", \"error\"]),\n\n      /** @type {SyncHook<Module>} */\n      succeedModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook<Dependency, string>} */\n      addEntry: new SyncHook([\"entry\", \"name\"]),\n\n      /** @type {SyncHook<Dependency, string, Error>} */\n      failedEntry: new SyncHook([\"entry\", \"name\", \"error\"]),\n\n      /** @type {SyncHook<Dependency, string, Module>} */\n      succeedEntry: new SyncHook([\"entry\", \"name\", \"module\"]),\n\n      /** @type {SyncWaterfallHook<DependencyReference, Dependency, Module>} */\n      dependencyReference: new SyncWaterfallHook([\"dependencyReference\", \"dependency\", \"module\"]),\n\n      /** @type {AsyncSeriesHook<Module[]>} */\n      finishModules: new AsyncSeriesHook([\"modules\"]),\n\n      /** @type {SyncHook<Module>} */\n      finishRebuildingModule: new SyncHook([\"module\"]),\n\n      /** @type {SyncHook} */\n      unseal: new SyncHook([]),\n\n      /** @type {SyncHook} */\n      seal: new SyncHook([]),\n\n      /** @type {SyncHook} */\n      beforeChunks: new SyncHook([]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterChunks: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeDependenciesBasic: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeDependencies: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeDependenciesAdvanced: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      afterOptimizeDependencies: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook} */\n      optimize: new SyncHook([]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeModulesBasic: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeModules: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Module[]>} */\n      optimizeModulesAdvanced: new SyncBailHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      afterOptimizeModules: new SyncHook([\"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], ChunkGroup[]>} */\n      optimizeChunksBasic: new SyncBailHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {SyncBailHook<Chunk[], ChunkGroup[]>} */\n      optimizeChunks: new SyncBailHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {SyncBailHook<Chunk[], ChunkGroup[]>} */\n      optimizeChunksAdvanced: new SyncBailHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {SyncHook<Chunk[], ChunkGroup[]>} */\n      afterOptimizeChunks: new SyncHook([\"chunks\", \"chunkGroups\"]),\n\n      /** @type {AsyncSeriesHook<Chunk[], Module[]>} */\n      optimizeTree: new AsyncSeriesHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncHook<Chunk[], Module[]>} */\n      afterOptimizeTree: new SyncHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], Module[]>} */\n      optimizeChunkModulesBasic: new SyncBailHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], Module[]>} */\n      optimizeChunkModules: new SyncBailHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook<Chunk[], Module[]>} */\n      optimizeChunkModulesAdvanced: new SyncBailHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncHook<Chunk[], Module[]>} */\n      afterOptimizeChunkModules: new SyncHook([\"chunks\", \"modules\"]),\n\n      /** @type {SyncBailHook} */\n      shouldRecord: new SyncBailHook([]),\n\n      /** @type {SyncHook<Module[], any>} */\n      reviveModules: new SyncHook([\"modules\", \"records\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      optimizeModuleOrder: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      advancedOptimizeModuleOrder: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      beforeModuleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      moduleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      optimizeModuleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Module[]>} */\n      afterOptimizeModuleIds: new SyncHook([\"modules\"]),\n\n      /** @type {SyncHook<Chunk[], any>} */\n      reviveChunks: new SyncHook([\"chunks\", \"records\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      optimizeChunkOrder: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      beforeChunkIds: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      optimizeChunkIds: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterOptimizeChunkIds: new SyncHook([\"chunks\"]),\n\n      /** @type {SyncHook<Module[], any>} */\n      recordModules: new SyncHook([\"modules\", \"records\"]),\n\n      /** @type {SyncHook<Chunk[], any>} */\n      recordChunks: new SyncHook([\"chunks\", \"records\"]),\n\n      /** @type {SyncHook} */\n      beforeHash: new SyncHook([]),\n\n      /** @type {SyncHook<Chunk>} */\n      contentHash: new SyncHook([\"chunk\"]),\n\n      /** @type {SyncHook} */\n      afterHash: new SyncHook([]),\n\n      /** @type {SyncHook<any>} */\n      recordHash: new SyncHook([\"records\"]),\n\n      /** @type {SyncHook<Compilation, any>} */\n      record: new SyncHook([\"compilation\", \"records\"]),\n\n      /** @type {SyncHook} */\n      beforeModuleAssets: new SyncHook([]),\n\n      /** @type {SyncBailHook} */\n      shouldGenerateChunkAssets: new SyncBailHook([]),\n\n      /** @type {SyncHook} */\n      beforeChunkAssets: new SyncHook([]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      additionalChunkAssets: new SyncHook([\"chunks\"]),\n\n      /** @type {AsyncSeriesHook} */\n      additionalAssets: new AsyncSeriesHook([]),\n\n      /** @type {AsyncSeriesHook<Chunk[]>} */\n      optimizeChunkAssets: new AsyncSeriesHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterOptimizeChunkAssets: new SyncHook([\"chunks\"]),\n\n      /** @type {AsyncSeriesHook<CompilationAssets>} */\n      optimizeAssets: new AsyncSeriesHook([\"assets\"]),\n\n      /** @type {SyncHook<CompilationAssets>} */\n      afterOptimizeAssets: new SyncHook([\"assets\"]),\n\n      /** @type {SyncBailHook} */\n      needAdditionalSeal: new SyncBailHook([]),\n\n      /** @type {AsyncSeriesHook} */\n      afterSeal: new AsyncSeriesHook([]),\n\n      /** @type {SyncHook<Chunk, Hash>} */\n      chunkHash: new SyncHook([\"chunk\", \"chunkHash\"]),\n\n      /** @type {SyncHook<Module, string>} */\n      moduleAsset: new SyncHook([\"module\", \"filename\"]),\n\n      /** @type {SyncHook<Chunk, string>} */\n      chunkAsset: new SyncHook([\"chunk\", \"filename\"]),\n\n      /** @type {SyncWaterfallHook<string, TODO>} */\n      assetPath: new SyncWaterfallHook([\"filename\", \"data\"]),\n      // TODO MainTemplate\n\n      /** @type {SyncBailHook} */\n      needAdditionalPass: new SyncBailHook([]),\n\n      /** @type {SyncHook<Compiler, string, number>} */\n      childCompiler: new SyncHook([\"childCompiler\", \"compilerName\", \"compilerIndex\"]),\n\n      /** @type {SyncBailHook<string, LogEntry>} */\n      log: new SyncBailHook([\"origin\", \"logEntry\"]),\n      // TODO the following hooks are weirdly located here\n      // TODO move them for webpack 5\n\n      /** @type {SyncHook<object, Module>} */\n      normalModuleLoader: new SyncHook([\"loaderContext\", \"module\"]),\n\n      /** @type {SyncBailHook<Chunk[]>} */\n      optimizeExtractedChunksBasic: new SyncBailHook([\"chunks\"]),\n\n      /** @type {SyncBailHook<Chunk[]>} */\n      optimizeExtractedChunks: new SyncBailHook([\"chunks\"]),\n\n      /** @type {SyncBailHook<Chunk[]>} */\n      optimizeExtractedChunksAdvanced: new SyncBailHook([\"chunks\"]),\n\n      /** @type {SyncHook<Chunk[]>} */\n      afterOptimizeExtractedChunks: new SyncHook([\"chunks\"])\n    };\n\n    this._pluginCompat.tap(\"Compilation\", options => {\n      switch (options.name) {\n        case \"optimize-tree\":\n        case \"additional-assets\":\n        case \"optimize-chunk-assets\":\n        case \"optimize-assets\":\n        case \"after-seal\":\n          options.async = true;\n          break;\n      }\n    });\n    /** @type {string=} */\n\n\n    this.name = undefined;\n    /** @type {Compiler} */\n\n    this.compiler = compiler;\n    this.resolverFactory = compiler.resolverFactory;\n    this.inputFileSystem = compiler.inputFileSystem;\n    this.requestShortener = compiler.requestShortener;\n    const options = compiler.options;\n    this.options = options;\n    this.outputOptions = options && options.output;\n    /** @type {boolean=} */\n\n    this.bail = options && options.bail;\n    this.profile = options && options.profile;\n    this.performance = options && options.performance;\n    this.mainTemplate = new MainTemplate(this.outputOptions);\n    this.chunkTemplate = new ChunkTemplate(this.outputOptions);\n    this.hotUpdateChunkTemplate = new HotUpdateChunkTemplate(this.outputOptions);\n    this.runtimeTemplate = new RuntimeTemplate(this.outputOptions, this.requestShortener);\n    this.moduleTemplates = {\n      javascript: new ModuleTemplate(this.runtimeTemplate, \"javascript\"),\n      webassembly: new ModuleTemplate(this.runtimeTemplate, \"webassembly\")\n    };\n    this.semaphore = new Semaphore(options.parallelism || 100);\n    this.entries = [];\n    /** @private @type {{name: string, request: string, module: Module}[]} */\n\n    this._preparedEntrypoints = [];\n    this.entrypoints = new Map();\n    /** @type {Chunk[]} */\n\n    this.chunks = [];\n    /** @type {ChunkGroup[]} */\n\n    this.chunkGroups = [];\n    /** @type {Map<string, ChunkGroup>} */\n\n    this.namedChunkGroups = new Map();\n    /** @type {Map<string, Chunk>} */\n\n    this.namedChunks = new Map();\n    /** @type {Module[]} */\n\n    this.modules = [];\n    /** @private @type {Map<string, Module>} */\n\n    this._modules = new Map();\n    this.cache = null;\n    this.records = null;\n    /** @type {string[]} */\n\n    this.additionalChunkAssets = [];\n    /** @type {CompilationAssets} */\n\n    this.assets = {};\n    /** @type {WebpackError[]} */\n\n    this.errors = [];\n    /** @type {WebpackError[]} */\n\n    this.warnings = [];\n    /** @type {Compilation[]} */\n\n    this.children = [];\n    /** @type {Map<string, LogEntry[]>} */\n\n    this.logging = new Map();\n    /** @type {Map<DepConstructor, ModuleFactory>} */\n\n    this.dependencyFactories = new Map();\n    /** @type {Map<DepConstructor, DependencyTemplate>} */\n\n    this.dependencyTemplates = new Map(); // TODO refactor this in webpack 5 to a custom DependencyTemplates class with a hash property\n    // @ts-ignore\n\n    this.dependencyTemplates.set(\"hash\", \"\");\n    this.childrenCounters = {};\n    /** @type {Set<number|string>} */\n\n    this.usedChunkIds = null;\n    /** @type {Set<number>} */\n\n    this.usedModuleIds = null;\n    /** @type {Map<string, number>=} */\n\n    this.fileTimestamps = undefined;\n    /** @type {Map<string, number>=} */\n\n    this.contextTimestamps = undefined;\n    /** @type {Set<string>=} */\n\n    this.compilationDependencies = undefined;\n    /** @private @type {Map<Module, Callback[]>} */\n\n    this._buildingModules = new Map();\n    /** @private @type {Map<Module, Callback[]>} */\n\n    this._rebuildingModules = new Map();\n    /** @type {Set<string>} */\n\n    this.emittedAssets = new Set();\n  }\n\n  getStats() {\n    return new Stats(this);\n  }\n  /**\n   * @param {string | (function(): string)} name name of the logger, or function called once to get the logger name\n   * @returns {Logger} a logger with that name\n   */\n\n\n  getLogger(name) {\n    if (!name) {\n      throw new TypeError(\"Compilation.getLogger(name) called without a name\");\n    }\n    /** @type {LogEntry[] | undefined} */\n\n\n    let logEntries;\n    return new Logger((type, args) => {\n      if (typeof name === \"function\") {\n        name = name();\n\n        if (!name) {\n          throw new TypeError(\"Compilation.getLogger(name) called with a function not returning a name\");\n        }\n      }\n\n      let trace;\n\n      switch (type) {\n        case LogType.warn:\n        case LogType.error:\n        case LogType.trace:\n          trace = ErrorHelpers.cutOffLoaderExecution(new Error(\"Trace\").stack).split(\"\\n\").slice(3);\n          break;\n      }\n      /** @type {LogEntry} */\n\n\n      const logEntry = {\n        time: Date.now(),\n        type,\n        args,\n        trace\n      };\n\n      if (this.hooks.log.call(name, logEntry) === undefined) {\n        if (logEntry.type === LogType.profileEnd) {\n          // eslint-disable-next-line node/no-unsupported-features/node-builtins\n          if (typeof console.profileEnd === \"function\") {\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            console.profileEnd(\"[\".concat(name, \"] \").concat(logEntry.args[0]));\n          }\n        }\n\n        if (logEntries === undefined) {\n          logEntries = this.logging.get(name);\n\n          if (logEntries === undefined) {\n            logEntries = [];\n            this.logging.set(name, logEntries);\n          }\n        }\n\n        logEntries.push(logEntry);\n\n        if (logEntry.type === LogType.profile) {\n          // eslint-disable-next-line node/no-unsupported-features/node-builtins\n          if (typeof console.profile === \"function\") {\n            // eslint-disable-next-line node/no-unsupported-features/node-builtins\n            console.profile(\"[\".concat(name, \"] \").concat(logEntry.args[0]));\n          }\n        }\n      }\n    });\n  }\n  /**\n   * @typedef {Object} AddModuleResult\n   * @property {Module} module the added or existing module\n   * @property {boolean} issuer was this the first request for this module\n   * @property {boolean} build should the module be build\n   * @property {boolean} dependencies should dependencies be walked\n   */\n\n  /**\n   * @param {Module} module module to be added that was created\n   * @param {any=} cacheGroup cacheGroup it is apart of\n   * @returns {AddModuleResult} returns meta about whether or not the module had built\n   * had an issuer, or any dependnecies\n   */\n\n\n  addModule(module, cacheGroup) {\n    const identifier = module.identifier();\n\n    const alreadyAddedModule = this._modules.get(identifier);\n\n    if (alreadyAddedModule) {\n      return {\n        module: alreadyAddedModule,\n        issuer: false,\n        build: false,\n        dependencies: false\n      };\n    }\n\n    const cacheName = (cacheGroup || \"m\") + identifier;\n\n    if (this.cache && this.cache[cacheName]) {\n      const cacheModule = this.cache[cacheName];\n\n      if (typeof cacheModule.updateCacheModule === \"function\") {\n        cacheModule.updateCacheModule(module);\n      }\n\n      let rebuild = true;\n\n      if (this.fileTimestamps && this.contextTimestamps) {\n        rebuild = cacheModule.needRebuild(this.fileTimestamps, this.contextTimestamps);\n      }\n\n      if (!rebuild) {\n        cacheModule.disconnect();\n\n        this._modules.set(identifier, cacheModule);\n\n        this.modules.push(cacheModule);\n\n        for (const err of cacheModule.errors) {\n          this.errors.push(err);\n        }\n\n        for (const err of cacheModule.warnings) {\n          this.warnings.push(err);\n        }\n\n        return {\n          module: cacheModule,\n          issuer: true,\n          build: false,\n          dependencies: true\n        };\n      }\n\n      cacheModule.unbuild();\n      module = cacheModule;\n    }\n\n    this._modules.set(identifier, module);\n\n    if (this.cache) {\n      this.cache[cacheName] = module;\n    }\n\n    this.modules.push(module);\n    return {\n      module: module,\n      issuer: true,\n      build: true,\n      dependencies: true\n    };\n  }\n  /**\n   * Fetches a module from a compilation by its identifier\n   * @param {Module} module the module provided\n   * @returns {Module} the module requested\n   */\n\n\n  getModule(module) {\n    const identifier = module.identifier();\n    return this._modules.get(identifier);\n  }\n  /**\n   * Attempts to search for a module by its identifier\n   * @param {string} identifier identifier (usually path) for module\n   * @returns {Module|undefined} attempt to search for module and return it, else undefined\n   */\n\n\n  findModule(identifier) {\n    return this._modules.get(identifier);\n  }\n  /**\n   * @param {Module} module module with its callback list\n   * @param {Callback} callback the callback function\n   * @returns {void}\n   */\n\n\n  waitForBuildingFinished(module, callback) {\n    let callbackList = this._buildingModules.get(module);\n\n    if (callbackList) {\n      callbackList.push(() => callback());\n    } else {\n      process.nextTick(callback);\n    }\n  }\n  /**\n   * Builds the module object\n   *\n   * @param {Module} module module to be built\n   * @param {boolean} optional optional flag\n   * @param {Module=} origin origin module this module build was requested from\n   * @param {Dependency[]=} dependencies optional dependencies from the module to be built\n   * @param {TODO} thisCallback the callback\n   * @returns {TODO} returns the callback function with results\n   */\n\n\n  buildModule(module, optional, origin, dependencies, thisCallback) {\n    let callbackList = this._buildingModules.get(module);\n\n    if (callbackList) {\n      callbackList.push(thisCallback);\n      return;\n    }\n\n    this._buildingModules.set(module, callbackList = [thisCallback]);\n\n    const callback = err => {\n      this._buildingModules.delete(module);\n\n      for (const cb of callbackList) {\n        cb(err);\n      }\n    };\n\n    this.hooks.buildModule.call(module);\n    module.build(this.options, this, this.resolverFactory.get(\"normal\", module.resolveOptions), this.inputFileSystem, error => {\n      const errors = module.errors;\n\n      for (let indexError = 0; indexError < errors.length; indexError++) {\n        const err = errors[indexError];\n        err.origin = origin;\n        err.dependencies = dependencies;\n\n        if (optional) {\n          this.warnings.push(err);\n        } else {\n          this.errors.push(err);\n        }\n      }\n\n      const warnings = module.warnings;\n\n      for (let indexWarning = 0; indexWarning < warnings.length; indexWarning++) {\n        const war = warnings[indexWarning];\n        war.origin = origin;\n        war.dependencies = dependencies;\n        this.warnings.push(war);\n      }\n\n      const originalMap = module.dependencies.reduce((map, v, i) => {\n        map.set(v, i);\n        return map;\n      }, new Map());\n      module.dependencies.sort((a, b) => {\n        const cmp = compareLocations(a.loc, b.loc);\n        if (cmp) return cmp;\n        return originalMap.get(a) - originalMap.get(b);\n      });\n\n      if (error) {\n        this.hooks.failedModule.call(module, error);\n        return callback(error);\n      }\n\n      this.hooks.succeedModule.call(module);\n      return callback();\n    });\n  }\n  /**\n   * @param {Module} module to be processed for deps\n   * @param {ModuleCallback} callback callback to be triggered\n   * @returns {void}\n   */\n\n\n  processModuleDependencies(module, callback) {\n    const dependencies = new Map();\n\n    const addDependency = dep => {\n      const resourceIdent = dep.getResourceIdentifier();\n\n      if (resourceIdent) {\n        const factory = this.dependencyFactories.get(dep.constructor);\n\n        if (factory === undefined) {\n          throw new Error(\"No module factory available for dependency type: \".concat(dep.constructor.name));\n        }\n\n        let innerMap = dependencies.get(factory);\n\n        if (innerMap === undefined) {\n          dependencies.set(factory, innerMap = new Map());\n        }\n\n        let list = innerMap.get(resourceIdent);\n        if (list === undefined) innerMap.set(resourceIdent, list = []);\n        list.push(dep);\n      }\n    };\n\n    const addDependenciesBlock = block => {\n      if (block.dependencies) {\n        iterationOfArrayCallback(block.dependencies, addDependency);\n      }\n\n      if (block.blocks) {\n        iterationOfArrayCallback(block.blocks, addDependenciesBlock);\n      }\n\n      if (block.variables) {\n        iterationBlockVariable(block.variables, addDependency);\n      }\n    };\n\n    try {\n      addDependenciesBlock(module);\n    } catch (e) {\n      callback(e);\n    }\n\n    const sortedDependencies = [];\n\n    for (const pair1 of dependencies) {\n      for (const pair2 of pair1[1]) {\n        sortedDependencies.push({\n          factory: pair1[0],\n          dependencies: pair2[1]\n        });\n      }\n    }\n\n    this.addModuleDependencies(module, sortedDependencies, this.bail, null, true, callback);\n  }\n  /**\n   * @param {Module} module module to add deps to\n   * @param {SortedDependency[]} dependencies set of sorted dependencies to iterate through\n   * @param {(boolean|null)=} bail whether to bail or not\n   * @param {TODO} cacheGroup optional cacheGroup\n   * @param {boolean} recursive whether it is recursive traversal\n   * @param {function} callback callback for when dependencies are finished being added\n   * @returns {void}\n   */\n\n\n  addModuleDependencies(module, dependencies, bail, cacheGroup, recursive, callback) {\n    const start = this.profile && Date.now();\n    const currentProfile = this.profile && {};\n    asyncLib.forEach(dependencies, (item, callback) => {\n      const dependencies = item.dependencies;\n\n      const errorAndCallback = err => {\n        err.origin = module;\n        err.dependencies = dependencies;\n        this.errors.push(err);\n\n        if (bail) {\n          callback(err);\n        } else {\n          callback();\n        }\n      };\n\n      const warningAndCallback = err => {\n        err.origin = module;\n        this.warnings.push(err);\n        callback();\n      };\n\n      const semaphore = this.semaphore;\n      semaphore.acquire(() => {\n        const factory = item.factory;\n        factory.create({\n          contextInfo: {\n            issuer: module.nameForCondition && module.nameForCondition(),\n            compiler: this.compiler.name\n          },\n          resolveOptions: module.resolveOptions,\n          context: module.context,\n          dependencies: dependencies\n        }, (err, dependentModule) => {\n          let afterFactory;\n\n          const isOptional = () => {\n            return dependencies.every(d => d.optional);\n          };\n\n          const errorOrWarningAndCallback = err => {\n            if (isOptional()) {\n              return warningAndCallback(err);\n            } else {\n              return errorAndCallback(err);\n            }\n          };\n\n          if (err) {\n            semaphore.release();\n            return errorOrWarningAndCallback(new ModuleNotFoundError(module, err));\n          }\n\n          if (!dependentModule) {\n            semaphore.release();\n            return process.nextTick(callback);\n          }\n\n          if (currentProfile) {\n            afterFactory = Date.now();\n            currentProfile.factory = afterFactory - start;\n          }\n\n          const iterationDependencies = depend => {\n            for (let index = 0; index < depend.length; index++) {\n              const dep = depend[index];\n              dep.module = dependentModule;\n              dependentModule.addReason(module, dep);\n            }\n          };\n\n          const addModuleResult = this.addModule(dependentModule, cacheGroup);\n          dependentModule = addModuleResult.module;\n          iterationDependencies(dependencies);\n\n          const afterBuild = () => {\n            if (recursive && addModuleResult.dependencies) {\n              this.processModuleDependencies(dependentModule, callback);\n            } else {\n              return callback();\n            }\n          };\n\n          if (addModuleResult.issuer) {\n            if (currentProfile) {\n              dependentModule.profile = currentProfile;\n            }\n\n            dependentModule.issuer = module;\n          } else {\n            if (this.profile) {\n              if (module.profile) {\n                const time = Date.now() - start;\n\n                if (!module.profile.dependencies || time > module.profile.dependencies) {\n                  module.profile.dependencies = time;\n                }\n              }\n            }\n          }\n\n          if (addModuleResult.build) {\n            this.buildModule(dependentModule, isOptional(), module, dependencies, err => {\n              if (err) {\n                semaphore.release();\n                return errorOrWarningAndCallback(err);\n              }\n\n              if (currentProfile) {\n                const afterBuilding = Date.now();\n                currentProfile.building = afterBuilding - afterFactory;\n              }\n\n              semaphore.release();\n              afterBuild();\n            });\n          } else {\n            semaphore.release();\n            this.waitForBuildingFinished(dependentModule, afterBuild);\n          }\n        });\n      });\n    }, err => {\n      // In V8, the Error objects keep a reference to the functions on the stack. These warnings &\n      // errors are created inside closures that keep a reference to the Compilation, so errors are\n      // leaking the Compilation object.\n      if (err) {\n        // eslint-disable-next-line no-self-assign\n        err.stack = err.stack;\n        return callback(err);\n      }\n\n      return process.nextTick(callback);\n    });\n  }\n  /**\n   *\n   * @param {string} context context string path\n   * @param {Dependency} dependency dependency used to create Module chain\n   * @param {OnModuleCallback} onModule function invoked on modules creation\n   * @param {ModuleChainCallback} callback callback for when module chain is complete\n   * @returns {void} will throw if dependency instance is not a valid Dependency\n   */\n\n\n  _addModuleChain(context, dependency, onModule, callback) {\n    const start = this.profile && Date.now();\n    const currentProfile = this.profile && {};\n    const errorAndCallback = this.bail ? err => {\n      callback(err);\n    } : err => {\n      err.dependencies = [dependency];\n      this.errors.push(err);\n      callback();\n    };\n\n    if (typeof dependency !== \"object\" || dependency === null || !dependency.constructor) {\n      throw new Error(\"Parameter 'dependency' must be a Dependency\");\n    }\n\n    const Dep =\n    /** @type {DepConstructor} */\n    dependency.constructor;\n    const moduleFactory = this.dependencyFactories.get(Dep);\n\n    if (!moduleFactory) {\n      throw new Error(\"No dependency factory available for this dependency type: \".concat(dependency.constructor.name));\n    }\n\n    this.semaphore.acquire(() => {\n      moduleFactory.create({\n        contextInfo: {\n          issuer: \"\",\n          compiler: this.compiler.name\n        },\n        context: context,\n        dependencies: [dependency]\n      }, (err, module) => {\n        if (err) {\n          this.semaphore.release();\n          return errorAndCallback(new EntryModuleNotFoundError(err));\n        }\n\n        let afterFactory;\n\n        if (currentProfile) {\n          afterFactory = Date.now();\n          currentProfile.factory = afterFactory - start;\n        }\n\n        const addModuleResult = this.addModule(module);\n        module = addModuleResult.module;\n        onModule(module);\n        dependency.module = module;\n        module.addReason(null, dependency);\n\n        const afterBuild = () => {\n          if (addModuleResult.dependencies) {\n            this.processModuleDependencies(module, err => {\n              if (err) return callback(err);\n              callback(null, module);\n            });\n          } else {\n            return callback(null, module);\n          }\n        };\n\n        if (addModuleResult.issuer) {\n          if (currentProfile) {\n            module.profile = currentProfile;\n          }\n        }\n\n        if (addModuleResult.build) {\n          this.buildModule(module, false, null, null, err => {\n            if (err) {\n              this.semaphore.release();\n              return errorAndCallback(err);\n            }\n\n            if (currentProfile) {\n              const afterBuilding = Date.now();\n              currentProfile.building = afterBuilding - afterFactory;\n            }\n\n            this.semaphore.release();\n            afterBuild();\n          });\n        } else {\n          this.semaphore.release();\n          this.waitForBuildingFinished(module, afterBuild);\n        }\n      });\n    });\n  }\n  /**\n   *\n   * @param {string} context context path for entry\n   * @param {Dependency} entry entry dependency being created\n   * @param {string} name name of entry\n   * @param {ModuleCallback} callback callback function\n   * @returns {void} returns\n   */\n\n\n  addEntry(context, entry, name, callback) {\n    this.hooks.addEntry.call(entry, name);\n    const slot = {\n      name: name,\n      // TODO webpack 5 remove `request`\n      request: null,\n      module: null\n    };\n\n    if (entry instanceof ModuleDependency) {\n      slot.request = entry.request;\n    } // TODO webpack 5: merge modules instead when multiple entry modules are supported\n\n\n    const idx = this._preparedEntrypoints.findIndex(slot => slot.name === name);\n\n    if (idx >= 0) {\n      // Overwrite existing entrypoint\n      this._preparedEntrypoints[idx] = slot;\n    } else {\n      this._preparedEntrypoints.push(slot);\n    }\n\n    this._addModuleChain(context, entry, module => {\n      this.entries.push(module);\n    }, (err, module) => {\n      if (err) {\n        this.hooks.failedEntry.call(entry, name, err);\n        return callback(err);\n      }\n\n      if (module) {\n        slot.module = module;\n      } else {\n        const idx = this._preparedEntrypoints.indexOf(slot);\n\n        if (idx >= 0) {\n          this._preparedEntrypoints.splice(idx, 1);\n        }\n      }\n\n      this.hooks.succeedEntry.call(entry, name, module);\n      return callback(null, module);\n    });\n  }\n  /**\n   * @param {string} context context path string\n   * @param {Dependency} dependency dep used to create module\n   * @param {ModuleCallback} callback module callback sending module up a level\n   * @returns {void}\n   */\n\n\n  prefetch(context, dependency, callback) {\n    this._addModuleChain(context, dependency, module => {\n      module.prefetched = true;\n    }, callback);\n  }\n  /**\n   * @param {Module} module module to be rebuilt\n   * @param {Callback} thisCallback callback when module finishes rebuilding\n   * @returns {void}\n   */\n\n\n  rebuildModule(module, thisCallback) {\n    let callbackList = this._rebuildingModules.get(module);\n\n    if (callbackList) {\n      callbackList.push(thisCallback);\n      return;\n    }\n\n    this._rebuildingModules.set(module, callbackList = [thisCallback]);\n\n    const callback = err => {\n      this._rebuildingModules.delete(module);\n\n      for (const cb of callbackList) {\n        cb(err);\n      }\n    };\n\n    this.hooks.rebuildModule.call(module);\n    const oldDependencies = module.dependencies.slice();\n    const oldVariables = module.variables.slice();\n    const oldBlocks = module.blocks.slice();\n    module.unbuild();\n    this.buildModule(module, false, module, null, err => {\n      if (err) {\n        this.hooks.finishRebuildingModule.call(module);\n        return callback(err);\n      }\n\n      this.processModuleDependencies(module, err => {\n        if (err) return callback(err);\n        this.removeReasonsOfDependencyBlock(module, {\n          dependencies: oldDependencies,\n          variables: oldVariables,\n          blocks: oldBlocks\n        });\n        this.hooks.finishRebuildingModule.call(module);\n        callback();\n      });\n    });\n  }\n\n  finish(callback) {\n    const modules = this.modules;\n    this.hooks.finishModules.callAsync(modules, err => {\n      if (err) return callback(err);\n\n      for (let index = 0; index < modules.length; index++) {\n        const module = modules[index];\n        this.reportDependencyErrorsAndWarnings(module, [module]);\n      }\n\n      callback();\n    });\n  }\n\n  unseal() {\n    this.hooks.unseal.call();\n    this.chunks.length = 0;\n    this.chunkGroups.length = 0;\n    this.namedChunks.clear();\n    this.namedChunkGroups.clear();\n    this.additionalChunkAssets.length = 0;\n    this.assets = {};\n\n    for (const module of this.modules) {\n      module.unseal();\n    }\n  }\n  /**\n   * @param {Callback} callback signals when the seal method is finishes\n   * @returns {void}\n   */\n\n\n  seal(callback) {\n    this.hooks.seal.call();\n\n    while (this.hooks.optimizeDependenciesBasic.call(this.modules) || this.hooks.optimizeDependencies.call(this.modules) || this.hooks.optimizeDependenciesAdvanced.call(this.modules)) {\n      /* empty */\n    }\n\n    this.hooks.afterOptimizeDependencies.call(this.modules);\n    this.hooks.beforeChunks.call();\n\n    for (const preparedEntrypoint of this._preparedEntrypoints) {\n      const module = preparedEntrypoint.module;\n      const name = preparedEntrypoint.name;\n      const chunk = this.addChunk(name);\n      const entrypoint = new Entrypoint(name);\n      entrypoint.setRuntimeChunk(chunk);\n      entrypoint.addOrigin(null, name, preparedEntrypoint.request);\n      this.namedChunkGroups.set(name, entrypoint);\n      this.entrypoints.set(name, entrypoint);\n      this.chunkGroups.push(entrypoint);\n      GraphHelpers.connectChunkGroupAndChunk(entrypoint, chunk);\n      GraphHelpers.connectChunkAndModule(chunk, module);\n      chunk.entryModule = module;\n      chunk.name = name;\n      this.assignDepth(module);\n    }\n\n    buildChunkGraph(this,\n    /** @type {Entrypoint[]} */\n    this.chunkGroups.slice());\n    this.sortModules(this.modules);\n    this.hooks.afterChunks.call(this.chunks);\n    this.hooks.optimize.call();\n\n    while (this.hooks.optimizeModulesBasic.call(this.modules) || this.hooks.optimizeModules.call(this.modules) || this.hooks.optimizeModulesAdvanced.call(this.modules)) {\n      /* empty */\n    }\n\n    this.hooks.afterOptimizeModules.call(this.modules);\n\n    while (this.hooks.optimizeChunksBasic.call(this.chunks, this.chunkGroups) || this.hooks.optimizeChunks.call(this.chunks, this.chunkGroups) || this.hooks.optimizeChunksAdvanced.call(this.chunks, this.chunkGroups)) {\n      /* empty */\n    }\n\n    this.hooks.afterOptimizeChunks.call(this.chunks, this.chunkGroups);\n    this.hooks.optimizeTree.callAsync(this.chunks, this.modules, err => {\n      if (err) {\n        return callback(err);\n      }\n\n      this.hooks.afterOptimizeTree.call(this.chunks, this.modules);\n\n      while (this.hooks.optimizeChunkModulesBasic.call(this.chunks, this.modules) || this.hooks.optimizeChunkModules.call(this.chunks, this.modules) || this.hooks.optimizeChunkModulesAdvanced.call(this.chunks, this.modules)) {\n        /* empty */\n      }\n\n      this.hooks.afterOptimizeChunkModules.call(this.chunks, this.modules);\n      const shouldRecord = this.hooks.shouldRecord.call() !== false;\n      this.hooks.reviveModules.call(this.modules, this.records);\n      this.hooks.optimizeModuleOrder.call(this.modules);\n      this.hooks.advancedOptimizeModuleOrder.call(this.modules);\n      this.hooks.beforeModuleIds.call(this.modules);\n      this.hooks.moduleIds.call(this.modules);\n      this.applyModuleIds();\n      this.hooks.optimizeModuleIds.call(this.modules);\n      this.hooks.afterOptimizeModuleIds.call(this.modules);\n      this.sortItemsWithModuleIds();\n      this.hooks.reviveChunks.call(this.chunks, this.records);\n      this.hooks.optimizeChunkOrder.call(this.chunks);\n      this.hooks.beforeChunkIds.call(this.chunks);\n      this.applyChunkIds();\n      this.hooks.optimizeChunkIds.call(this.chunks);\n      this.hooks.afterOptimizeChunkIds.call(this.chunks);\n      this.sortItemsWithChunkIds();\n\n      if (shouldRecord) {\n        this.hooks.recordModules.call(this.modules, this.records);\n        this.hooks.recordChunks.call(this.chunks, this.records);\n      }\n\n      this.hooks.beforeHash.call();\n      this.createHash();\n      this.hooks.afterHash.call();\n\n      if (shouldRecord) {\n        this.hooks.recordHash.call(this.records);\n      }\n\n      this.hooks.beforeModuleAssets.call();\n      this.createModuleAssets();\n\n      if (this.hooks.shouldGenerateChunkAssets.call() !== false) {\n        this.hooks.beforeChunkAssets.call();\n        this.createChunkAssets();\n      }\n\n      this.hooks.additionalChunkAssets.call(this.chunks);\n      this.summarizeDependencies();\n\n      if (shouldRecord) {\n        this.hooks.record.call(this, this.records);\n      }\n\n      this.hooks.additionalAssets.callAsync(err => {\n        if (err) {\n          return callback(err);\n        }\n\n        this.hooks.optimizeChunkAssets.callAsync(this.chunks, err => {\n          if (err) {\n            return callback(err);\n          }\n\n          this.hooks.afterOptimizeChunkAssets.call(this.chunks);\n          this.hooks.optimizeAssets.callAsync(this.assets, err => {\n            if (err) {\n              return callback(err);\n            }\n\n            this.hooks.afterOptimizeAssets.call(this.assets);\n\n            if (this.hooks.needAdditionalSeal.call()) {\n              this.unseal();\n              return this.seal(callback);\n            }\n\n            return this.hooks.afterSeal.callAsync(callback);\n          });\n        });\n      });\n    });\n  }\n  /**\n   * @param {Module[]} modules the modules array on compilation to perform the sort for\n   * @returns {void}\n   */\n\n\n  sortModules(modules) {\n    // TODO webpack 5: this should only be enabled when `moduleIds: \"natural\"`\n    // TODO move it into a plugin (NaturalModuleIdsPlugin) and use this in WebpackOptionsApply\n    // TODO remove this method\n    modules.sort(byIndexOrIdentifier);\n  }\n  /**\n   * @param {Module} module moulde to report from\n   * @param {DependenciesBlock[]} blocks blocks to report from\n   * @returns {void}\n   */\n\n\n  reportDependencyErrorsAndWarnings(module, blocks) {\n    for (let indexBlock = 0; indexBlock < blocks.length; indexBlock++) {\n      const block = blocks[indexBlock];\n      const dependencies = block.dependencies;\n\n      for (let indexDep = 0; indexDep < dependencies.length; indexDep++) {\n        const d = dependencies[indexDep];\n        const warnings = d.getWarnings();\n\n        if (warnings) {\n          for (let indexWar = 0; indexWar < warnings.length; indexWar++) {\n            const w = warnings[indexWar];\n            const warning = new ModuleDependencyWarning(module, w, d.loc);\n            this.warnings.push(warning);\n          }\n        }\n\n        const errors = d.getErrors();\n\n        if (errors) {\n          for (let indexErr = 0; indexErr < errors.length; indexErr++) {\n            const e = errors[indexErr];\n            const error = new ModuleDependencyError(module, e, d.loc);\n            this.errors.push(error);\n          }\n        }\n      }\n\n      this.reportDependencyErrorsAndWarnings(module, block.blocks);\n    }\n  }\n  /**\n   * @param {TODO} groupOptions options for the chunk group\n   * @param {Module} module the module the references the chunk group\n   * @param {DependencyLocation} loc the location from with the chunk group is referenced (inside of module)\n   * @param {string} request the request from which the the chunk group is referenced\n   * @returns {ChunkGroup} the new or existing chunk group\n   */\n\n\n  addChunkInGroup(groupOptions, module, loc, request) {\n    if (typeof groupOptions === \"string\") {\n      groupOptions = {\n        name: groupOptions\n      };\n    }\n\n    const name = groupOptions.name;\n\n    if (name) {\n      const chunkGroup = this.namedChunkGroups.get(name);\n\n      if (chunkGroup !== undefined) {\n        chunkGroup.addOptions(groupOptions);\n\n        if (module) {\n          chunkGroup.addOrigin(module, loc, request);\n        }\n\n        return chunkGroup;\n      }\n    }\n\n    const chunkGroup = new ChunkGroup(groupOptions);\n    if (module) chunkGroup.addOrigin(module, loc, request);\n    const chunk = this.addChunk(name);\n    GraphHelpers.connectChunkGroupAndChunk(chunkGroup, chunk);\n    this.chunkGroups.push(chunkGroup);\n\n    if (name) {\n      this.namedChunkGroups.set(name, chunkGroup);\n    }\n\n    return chunkGroup;\n  }\n  /**\n   * This method first looks to see if a name is provided for a new chunk,\n   * and first looks to see if any named chunks already exist and reuse that chunk instead.\n   *\n   * @param {string=} name optional chunk name to be provided\n   * @returns {Chunk} create a chunk (invoked during seal event)\n   */\n\n\n  addChunk(name) {\n    if (name) {\n      const chunk = this.namedChunks.get(name);\n\n      if (chunk !== undefined) {\n        return chunk;\n      }\n    }\n\n    const chunk = new Chunk(name);\n    this.chunks.push(chunk);\n\n    if (name) {\n      this.namedChunks.set(name, chunk);\n    }\n\n    return chunk;\n  }\n  /**\n   * @param {Module} module module to assign depth\n   * @returns {void}\n   */\n\n\n  assignDepth(module) {\n    const queue = new Set([module]);\n    let depth;\n    module.depth = 0;\n    /**\n     * @param {Module} module module for processeing\n     * @returns {void}\n     */\n\n    const enqueueJob = module => {\n      const d = module.depth;\n      if (typeof d === \"number\" && d <= depth) return;\n      queue.add(module);\n      module.depth = depth;\n    };\n    /**\n     * @param {Dependency} dependency dependency to assign depth to\n     * @returns {void}\n     */\n\n\n    const assignDepthToDependency = dependency => {\n      if (dependency.module) {\n        enqueueJob(dependency.module);\n      }\n    };\n    /**\n     * @param {DependenciesBlock} block block to assign depth to\n     * @returns {void}\n     */\n\n\n    const assignDepthToDependencyBlock = block => {\n      if (block.variables) {\n        iterationBlockVariable(block.variables, assignDepthToDependency);\n      }\n\n      if (block.dependencies) {\n        iterationOfArrayCallback(block.dependencies, assignDepthToDependency);\n      }\n\n      if (block.blocks) {\n        iterationOfArrayCallback(block.blocks, assignDepthToDependencyBlock);\n      }\n    };\n\n    for (module of queue) {\n      queue.delete(module);\n      depth = module.depth;\n      depth++;\n      assignDepthToDependencyBlock(module);\n    }\n  }\n  /**\n   * @param {Module} module the module containing the dependency\n   * @param {Dependency} dependency the dependency\n   * @returns {DependencyReference} a reference for the dependency\n   */\n\n\n  getDependencyReference(module, dependency) {\n    // TODO remove dep.getReference existence check in webpack 5\n    if (typeof dependency.getReference !== \"function\") return null;\n    const ref = dependency.getReference();\n    if (!ref) return null;\n    return this.hooks.dependencyReference.call(ref, dependency, module);\n  }\n  /**\n   *\n   * @param {Module} module module relationship for removal\n   * @param {DependenciesBlockLike} block //TODO: good description\n   * @returns {void}\n   */\n\n\n  removeReasonsOfDependencyBlock(module, block) {\n    const iteratorDependency = d => {\n      if (!d.module) {\n        return;\n      }\n\n      if (d.module.removeReason(module, d)) {\n        for (const chunk of d.module.chunksIterable) {\n          this.patchChunksAfterReasonRemoval(d.module, chunk);\n        }\n      }\n    };\n\n    if (block.blocks) {\n      iterationOfArrayCallback(block.blocks, block => this.removeReasonsOfDependencyBlock(module, block));\n    }\n\n    if (block.dependencies) {\n      iterationOfArrayCallback(block.dependencies, iteratorDependency);\n    }\n\n    if (block.variables) {\n      iterationBlockVariable(block.variables, iteratorDependency);\n    }\n  }\n  /**\n   * @param {Module} module module to patch tie\n   * @param {Chunk} chunk chunk to patch tie\n   * @returns {void}\n   */\n\n\n  patchChunksAfterReasonRemoval(module, chunk) {\n    if (!module.hasReasons()) {\n      this.removeReasonsOfDependencyBlock(module, module);\n    }\n\n    if (!module.hasReasonForChunk(chunk)) {\n      if (module.removeChunk(chunk)) {\n        this.removeChunkFromDependencies(module, chunk);\n      }\n    }\n  }\n  /**\n   *\n   * @param {DependenciesBlock} block block tie for Chunk\n   * @param {Chunk} chunk chunk to remove from dep\n   * @returns {void}\n   */\n\n\n  removeChunkFromDependencies(block, chunk) {\n    const iteratorDependency = d => {\n      if (!d.module) {\n        return;\n      }\n\n      this.patchChunksAfterReasonRemoval(d.module, chunk);\n    };\n\n    const blocks = block.blocks;\n\n    for (let indexBlock = 0; indexBlock < blocks.length; indexBlock++) {\n      const asyncBlock = blocks[indexBlock]; // Grab all chunks from the first Block's AsyncDepBlock\n\n      const chunks = asyncBlock.chunkGroup.chunks; // For each chunk in chunkGroup\n\n      for (let indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n        const iteratedChunk = chunks[indexChunk];\n        asyncBlock.chunkGroup.removeChunk(iteratedChunk);\n        asyncBlock.chunkGroup.removeParent(iteratedChunk); // Recurse\n\n        this.removeChunkFromDependencies(block, iteratedChunk);\n      }\n    }\n\n    if (block.dependencies) {\n      iterationOfArrayCallback(block.dependencies, iteratorDependency);\n    }\n\n    if (block.variables) {\n      iterationBlockVariable(block.variables, iteratorDependency);\n    }\n  }\n\n  applyModuleIds() {\n    const unusedIds = [];\n    let nextFreeModuleId = 0;\n    const usedIds = new Set();\n\n    if (this.usedModuleIds) {\n      for (const id of this.usedModuleIds) {\n        usedIds.add(id);\n      }\n    }\n\n    const modules1 = this.modules;\n\n    for (let indexModule1 = 0; indexModule1 < modules1.length; indexModule1++) {\n      const module1 = modules1[indexModule1];\n\n      if (module1.id !== null) {\n        usedIds.add(module1.id);\n      }\n    }\n\n    if (usedIds.size > 0) {\n      let usedIdMax = -1;\n\n      for (const usedIdKey of usedIds) {\n        if (typeof usedIdKey !== \"number\") {\n          continue;\n        }\n\n        usedIdMax = Math.max(usedIdMax, usedIdKey);\n      }\n\n      let lengthFreeModules = nextFreeModuleId = usedIdMax + 1;\n\n      while (lengthFreeModules--) {\n        if (!usedIds.has(lengthFreeModules)) {\n          unusedIds.push(lengthFreeModules);\n        }\n      }\n    }\n\n    const modules2 = this.modules;\n\n    for (let indexModule2 = 0; indexModule2 < modules2.length; indexModule2++) {\n      const module2 = modules2[indexModule2];\n\n      if (module2.id === null) {\n        if (unusedIds.length > 0) {\n          module2.id = unusedIds.pop();\n        } else {\n          module2.id = nextFreeModuleId++;\n        }\n      }\n    }\n  }\n\n  applyChunkIds() {\n    /** @type {Set<number>} */\n    const usedIds = new Set(); // Get used ids from usedChunkIds property (i. e. from records)\n\n    if (this.usedChunkIds) {\n      for (const id of this.usedChunkIds) {\n        if (typeof id !== \"number\") {\n          continue;\n        }\n\n        usedIds.add(id);\n      }\n    } // Get used ids from existing chunks\n\n\n    const chunks = this.chunks;\n\n    for (let indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n      const chunk = chunks[indexChunk];\n      const usedIdValue = chunk.id;\n\n      if (typeof usedIdValue !== \"number\") {\n        continue;\n      }\n\n      usedIds.add(usedIdValue);\n    } // Calculate maximum assigned chunk id\n\n\n    let nextFreeChunkId = -1;\n\n    for (const id of usedIds) {\n      nextFreeChunkId = Math.max(nextFreeChunkId, id);\n    }\n\n    nextFreeChunkId++; // Determine free chunk ids from 0 to maximum\n\n    /** @type {number[]} */\n\n    const unusedIds = [];\n\n    if (nextFreeChunkId > 0) {\n      let index = nextFreeChunkId;\n\n      while (index--) {\n        if (!usedIds.has(index)) {\n          unusedIds.push(index);\n        }\n      }\n    } // Assign ids to chunk which has no id\n\n\n    for (let indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n      const chunk = chunks[indexChunk];\n\n      if (chunk.id === null) {\n        if (unusedIds.length > 0) {\n          chunk.id = unusedIds.pop();\n        } else {\n          chunk.id = nextFreeChunkId++;\n        }\n      }\n\n      if (!chunk.ids) {\n        chunk.ids = [chunk.id];\n      }\n    }\n  }\n\n  sortItemsWithModuleIds() {\n    this.modules.sort(byIdOrIdentifier);\n    const modules = this.modules;\n\n    for (let indexModule = 0; indexModule < modules.length; indexModule++) {\n      modules[indexModule].sortItems(false);\n    }\n\n    const chunks = this.chunks;\n\n    for (let indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n      chunks[indexChunk].sortItems();\n    }\n\n    chunks.sort((a, b) => a.compareTo(b));\n  }\n\n  sortItemsWithChunkIds() {\n    for (const chunkGroup of this.chunkGroups) {\n      chunkGroup.sortItems();\n    }\n\n    this.chunks.sort(byId);\n\n    for (let indexModule = 0; indexModule < this.modules.length; indexModule++) {\n      this.modules[indexModule].sortItems(true);\n    }\n\n    const chunks = this.chunks;\n\n    for (let indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n      chunks[indexChunk].sortItems();\n    }\n    /**\n     * Used to sort errors and warnings in compilation. this.warnings, and\n     * this.errors contribute to the compilation hash and therefore should be\n     * updated whenever other references (having a chunk id) are sorted. This preserves the hash\n     * integrity\n     *\n     * @param {WebpackError} a first WebpackError instance (including subclasses)\n     * @param {WebpackError} b second WebpackError instance (including subclasses)\n     * @returns {-1|0|1} sort order index\n     */\n\n\n    const byMessage = (a, b) => {\n      const ma = \"\".concat(a.message);\n      const mb = \"\".concat(b.message);\n      if (ma < mb) return -1;\n      if (mb < ma) return 1;\n      return 0;\n    };\n\n    this.errors.sort(byMessage);\n    this.warnings.sort(byMessage);\n    this.children.sort(byNameOrHash);\n  }\n\n  summarizeDependencies() {\n    this.fileDependencies = new SortableSet(this.compilationDependencies);\n    this.contextDependencies = new SortableSet();\n    this.missingDependencies = new SortableSet();\n\n    for (let indexChildren = 0; indexChildren < this.children.length; indexChildren++) {\n      const child = this.children[indexChildren];\n      addAllToSet(this.fileDependencies, child.fileDependencies);\n      addAllToSet(this.contextDependencies, child.contextDependencies);\n      addAllToSet(this.missingDependencies, child.missingDependencies);\n    }\n\n    for (let indexModule = 0; indexModule < this.modules.length; indexModule++) {\n      const module = this.modules[indexModule];\n\n      if (module.buildInfo.fileDependencies) {\n        addAllToSet(this.fileDependencies, module.buildInfo.fileDependencies);\n      }\n\n      if (module.buildInfo.contextDependencies) {\n        addAllToSet(this.contextDependencies, module.buildInfo.contextDependencies);\n      }\n    }\n\n    for (const error of this.errors) {\n      if (typeof error.missing === \"object\" && error.missing && error.missing[Symbol.iterator]) {\n        addAllToSet(this.missingDependencies, error.missing);\n      }\n    }\n\n    this.fileDependencies.sort();\n    this.contextDependencies.sort();\n    this.missingDependencies.sort();\n  }\n\n  createHash() {\n    const outputOptions = this.outputOptions;\n    const hashFunction = outputOptions.hashFunction;\n    const hashDigest = outputOptions.hashDigest;\n    const hashDigestLength = outputOptions.hashDigestLength;\n    const hash = createHash(hashFunction);\n\n    if (outputOptions.hashSalt) {\n      hash.update(outputOptions.hashSalt);\n    }\n\n    this.mainTemplate.updateHash(hash);\n    this.chunkTemplate.updateHash(hash);\n\n    for (const key of Object.keys(this.moduleTemplates).sort()) {\n      this.moduleTemplates[key].updateHash(hash);\n    }\n\n    for (const child of this.children) {\n      hash.update(child.hash);\n    }\n\n    for (const warning of this.warnings) {\n      hash.update(\"\".concat(warning.message));\n    }\n\n    for (const error of this.errors) {\n      hash.update(\"\".concat(error.message));\n    }\n\n    const modules = this.modules;\n\n    for (let i = 0; i < modules.length; i++) {\n      const module = modules[i];\n      const moduleHash = createHash(hashFunction);\n      module.updateHash(moduleHash);\n      module.hash =\n      /** @type {string} */\n      moduleHash.digest(hashDigest);\n      module.renderedHash = module.hash.substr(0, hashDigestLength);\n    } // clone needed as sort below is inplace mutation\n\n\n    const chunks = this.chunks.slice();\n    /**\n     * sort here will bring all \"falsy\" values to the beginning\n     * this is needed as the \"hasRuntime()\" chunks are dependent on the\n     * hashes of the non-runtime chunks.\n     */\n\n    chunks.sort((a, b) => {\n      const aEntry = a.hasRuntime();\n      const bEntry = b.hasRuntime();\n      if (aEntry && !bEntry) return 1;\n      if (!aEntry && bEntry) return -1;\n      return byId(a, b);\n    });\n\n    for (let i = 0; i < chunks.length; i++) {\n      const chunk = chunks[i];\n      const chunkHash = createHash(hashFunction);\n\n      try {\n        if (outputOptions.hashSalt) {\n          chunkHash.update(outputOptions.hashSalt);\n        }\n\n        chunk.updateHash(chunkHash);\n        const template = chunk.hasRuntime() ? this.mainTemplate : this.chunkTemplate;\n        template.updateHashForChunk(chunkHash, chunk, this.moduleTemplates.javascript, this.dependencyTemplates);\n        this.hooks.chunkHash.call(chunk, chunkHash);\n        chunk.hash =\n        /** @type {string} */\n        chunkHash.digest(hashDigest);\n        hash.update(chunk.hash);\n        chunk.renderedHash = chunk.hash.substr(0, hashDigestLength);\n        this.hooks.contentHash.call(chunk);\n      } catch (err) {\n        this.errors.push(new ChunkRenderError(chunk, \"\", err));\n      }\n    }\n\n    this.fullHash =\n    /** @type {string} */\n    hash.digest(hashDigest);\n    this.hash = this.fullHash.substr(0, hashDigestLength);\n  }\n  /**\n   * @param {string} update extra information\n   * @returns {void}\n   */\n\n\n  modifyHash(update) {\n    const outputOptions = this.outputOptions;\n    const hashFunction = outputOptions.hashFunction;\n    const hashDigest = outputOptions.hashDigest;\n    const hashDigestLength = outputOptions.hashDigestLength;\n    const hash = createHash(hashFunction);\n    hash.update(this.fullHash);\n    hash.update(update);\n    this.fullHash =\n    /** @type {string} */\n    hash.digest(hashDigest);\n    this.hash = this.fullHash.substr(0, hashDigestLength);\n  }\n\n  createModuleAssets() {\n    for (let i = 0; i < this.modules.length; i++) {\n      const module = this.modules[i];\n\n      if (module.buildInfo.assets) {\n        for (const assetName of Object.keys(module.buildInfo.assets)) {\n          const fileName = this.getPath(assetName);\n          this.assets[fileName] = module.buildInfo.assets[assetName];\n          this.hooks.moduleAsset.call(module, fileName);\n        }\n      }\n    }\n  }\n\n  createChunkAssets() {\n    const outputOptions = this.outputOptions;\n    const cachedSourceMap = new Map();\n    /** @type {Map<string, {hash: string, source: Source, chunk: Chunk}>} */\n\n    const alreadyWrittenFiles = new Map();\n\n    for (let i = 0; i < this.chunks.length; i++) {\n      const chunk = this.chunks[i];\n      chunk.files = [];\n      let source;\n      let file;\n      let filenameTemplate;\n\n      try {\n        const template = chunk.hasRuntime() ? this.mainTemplate : this.chunkTemplate;\n        const manifest = template.getRenderManifest({\n          chunk,\n          hash: this.hash,\n          fullHash: this.fullHash,\n          outputOptions,\n          moduleTemplates: this.moduleTemplates,\n          dependencyTemplates: this.dependencyTemplates\n        }); // [{ render(), filenameTemplate, pathOptions, identifier, hash }]\n\n        for (const fileManifest of manifest) {\n          const cacheName = fileManifest.identifier;\n          const usedHash = fileManifest.hash;\n          filenameTemplate = fileManifest.filenameTemplate;\n          file = this.getPath(filenameTemplate, fileManifest.pathOptions); // check if the same filename was already written by another chunk\n\n          const alreadyWritten = alreadyWrittenFiles.get(file);\n\n          if (alreadyWritten !== undefined) {\n            if (alreadyWritten.hash === usedHash) {\n              if (this.cache) {\n                this.cache[cacheName] = {\n                  hash: usedHash,\n                  source: alreadyWritten.source\n                };\n              }\n\n              chunk.files.push(file);\n              this.hooks.chunkAsset.call(chunk, file);\n              continue;\n            } else {\n              throw new Error(\"Conflict: Multiple chunks emit assets to the same filename \".concat(file) + \" (chunks \".concat(alreadyWritten.chunk.id, \" and \").concat(chunk.id, \")\"));\n            }\n          }\n\n          if (this.cache && this.cache[cacheName] && this.cache[cacheName].hash === usedHash) {\n            source = this.cache[cacheName].source;\n          } else {\n            source = fileManifest.render(); // Ensure that source is a cached source to avoid additional cost because of repeated access\n\n            if (!(source instanceof CachedSource)) {\n              const cacheEntry = cachedSourceMap.get(source);\n\n              if (cacheEntry) {\n                source = cacheEntry;\n              } else {\n                const cachedSource = new CachedSource(source);\n                cachedSourceMap.set(source, cachedSource);\n                source = cachedSource;\n              }\n            }\n\n            if (this.cache) {\n              this.cache[cacheName] = {\n                hash: usedHash,\n                source\n              };\n            }\n          }\n\n          if (this.assets[file] && this.assets[file] !== source) {\n            throw new Error(\"Conflict: Multiple assets emit to the same filename \".concat(file));\n          }\n\n          this.assets[file] = source;\n          chunk.files.push(file);\n          this.hooks.chunkAsset.call(chunk, file);\n          alreadyWrittenFiles.set(file, {\n            hash: usedHash,\n            source,\n            chunk\n          });\n        }\n      } catch (err) {\n        this.errors.push(new ChunkRenderError(chunk, file || filenameTemplate, err));\n      }\n    }\n  }\n  /**\n   * @param {string} filename used to get asset path with hash\n   * @param {TODO=} data // TODO: figure out this param type\n   * @returns {string} interpolated path\n   */\n\n\n  getPath(filename, data) {\n    data = data || {};\n    data.hash = data.hash || this.hash;\n    return this.mainTemplate.getAssetPath(filename, data);\n  }\n  /**\n   * This function allows you to run another instance of webpack inside of webpack however as\n   * a child with different settings and configurations (if desired) applied. It copies all hooks, plugins\n   * from parent (or top level compiler) and creates a child Compilation\n   *\n   * @param {string} name name of the child compiler\n   * @param {TODO} outputOptions // Need to convert config schema to types for this\n   * @param {Plugin[]} plugins webpack plugins that will be applied\n   * @returns {Compiler} creates a child Compiler instance\n   */\n\n\n  createChildCompiler(name, outputOptions, plugins) {\n    const idx = this.childrenCounters[name] || 0;\n    this.childrenCounters[name] = idx + 1;\n    return this.compiler.createChildCompiler(this, name, idx, outputOptions, plugins);\n  }\n\n  checkConstraints() {\n    /** @type {Set<number|string>} */\n    const usedIds = new Set();\n    const modules = this.modules;\n\n    for (let indexModule = 0; indexModule < modules.length; indexModule++) {\n      const moduleId = modules[indexModule].id;\n      if (moduleId === null) continue;\n\n      if (usedIds.has(moduleId)) {\n        throw new Error(\"checkConstraints: duplicate module id \".concat(moduleId));\n      }\n\n      usedIds.add(moduleId);\n    }\n\n    const chunks = this.chunks;\n\n    for (let indexChunk = 0; indexChunk < chunks.length; indexChunk++) {\n      const chunk = chunks[indexChunk];\n\n      if (chunks.indexOf(chunk) !== indexChunk) {\n        throw new Error(\"checkConstraints: duplicate chunk in compilation \".concat(chunk.debugId));\n      }\n    }\n\n    for (const chunkGroup of this.chunkGroups) {\n      chunkGroup.checkConstraints();\n    }\n  }\n\n} // TODO remove in webpack 5\n\n\nCompilation.prototype.applyPlugins = util.deprecate(\n/**\n * @deprecated\n * @param {string} name Name\n * @param {any[]} args Other arguments\n * @returns {void}\n * @this {Compilation}\n */\nfunction (name, ...args) {\n  this.hooks[name.replace(/[- ]([a-z])/g, match => match[1].toUpperCase())].call(...args);\n}, \"Compilation.applyPlugins is deprecated. Use new API on `.hooks` instead\"); // TODO remove in webpack 5\n\nObject.defineProperty(Compilation.prototype, \"moduleTemplate\", {\n  configurable: false,\n  get: util.deprecate(\n  /**\n   * @deprecated\n   * @this {Compilation}\n   * @returns {TODO} module template\n   */\n  function () {\n    return this.moduleTemplates.javascript;\n  }, \"Compilation.moduleTemplate: Use Compilation.moduleTemplates.javascript instead\"),\n  set: util.deprecate(\n  /**\n   * @deprecated\n   * @param {ModuleTemplate} value Template value\n   * @this {Compilation}\n   * @returns {void}\n   */\n  function (value) {\n    this.moduleTemplates.javascript = value;\n  }, \"Compilation.moduleTemplate: Use Compilation.moduleTemplates.javascript instead.\")\n});\nmodule.exports = Compilation;","map":null,"metadata":{},"sourceType":"script"}