{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireContextDependency = require(\"./RequireContextDependency\");\n\nconst ContextElementDependency = require(\"./ContextElementDependency\");\n\nconst RequireContextDependencyParserPlugin = require(\"./RequireContextDependencyParserPlugin\");\n\nclass RequireContextPlugin {\n  constructor(modulesDirectories, extensions, mainFiles) {\n    if (!Array.isArray(modulesDirectories)) {\n      throw new Error(\"modulesDirectories must be an array\");\n    }\n\n    if (!Array.isArray(extensions)) {\n      throw new Error(\"extensions must be an array\");\n    }\n\n    this.modulesDirectories = modulesDirectories;\n    this.extensions = extensions;\n    this.mainFiles = mainFiles;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"RequireContextPlugin\", (compilation, {\n      contextModuleFactory,\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(RequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(RequireContextDependency, new RequireContextDependency.Template());\n      compilation.dependencyFactories.set(ContextElementDependency, normalModuleFactory);\n\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.requireContext !== undefined && !parserOptions.requireContext) return;\n        new RequireContextDependencyParserPlugin().apply(parser);\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"RequireContextPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"RequireContextPlugin\", handler);\n      contextModuleFactory.hooks.alternatives.tap(\"RequireContextPlugin\", items => {\n        if (items.length === 0) return items;\n        return items.map(obj => {\n          return this.extensions.filter(ext => {\n            const l = obj.request.length;\n            return l > ext.length && obj.request.substr(l - ext.length, l) === ext;\n          }).map(ext => {\n            const l = obj.request.length;\n            return {\n              context: obj.context,\n              request: obj.request.substr(0, l - ext.length)\n            };\n          }).concat(obj);\n        }).reduce((a, b) => a.concat(b), []);\n      });\n      contextModuleFactory.hooks.alternatives.tap(\"RequireContextPlugin\", items => {\n        if (items.length === 0) return items;\n        return items.map(obj => {\n          return this.mainFiles.filter(mainFile => {\n            const l = obj.request.length;\n            return l > mainFile.length + 1 && obj.request.substr(l - mainFile.length - 1, l) === \"/\" + mainFile;\n          }).map(mainFile => {\n            const l = obj.request.length;\n            return [{\n              context: obj.context,\n              request: obj.request.substr(0, l - mainFile.length)\n            }, {\n              context: obj.context,\n              request: obj.request.substr(0, l - mainFile.length - 1)\n            }];\n          }).reduce((a, b) => a.concat(b), []).concat(obj);\n        }).reduce((a, b) => a.concat(b), []);\n      });\n      contextModuleFactory.hooks.alternatives.tap(\"RequireContextPlugin\", items => {\n        if (items.length === 0) return items;\n        return items.map(obj => {\n          for (let i = 0; i < this.modulesDirectories.length; i++) {\n            const dir = this.modulesDirectories[i];\n            const idx = obj.request.indexOf(\"./\" + dir + \"/\");\n\n            if (idx === 0) {\n              obj.request = obj.request.slice(dir.length + 3);\n              break;\n            }\n          }\n\n          return obj;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = RequireContextPlugin;","map":null,"metadata":{},"sourceType":"script"}