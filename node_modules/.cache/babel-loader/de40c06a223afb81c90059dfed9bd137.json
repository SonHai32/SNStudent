{"ast":null,"code":"\"use strict\";\n\nconst crypto = require('crypto');\n\nconst crc = require('crc');\n\nmodule.exports = function (algo) {\n  switch (algo) {\n    case 'md2':\n    case 'md5':\n    case 'mdc2':\n    case 'rmd160':\n    case 'sha':\n    case 'sha1':\n    case 'sha224':\n    case 'sha256':\n    case 'sha384':\n    case 'sha512':\n      return function (str) {\n        return crypto.createHash(algo).update(str).digest(\"hex\");\n      };\n      break;\n\n    case 'crc1':\n    case 'crc8':\n    case 'crc16':\n    case 'crc24':\n    case 'crc32':\n      return function (str) {\n        return crc[algo](str).toString(16);\n      };\n      break;\n\n    case 'djb2':\n      return function (str) {\n        let hash = 5381;\n\n        for (let i = 0; i < str.length; i++) {\n          hash = (hash << 5) + hash + str.charCodeAt(i);\n        }\n\n        return hash.toString(16);\n      };\n      break;\n\n    case 'sdbm':\n      return function (str) {\n        let hash = 0;\n\n        for (let i = 0; i < str.length; i++) {\n          hash = str.charCodeAt(i) + (hash << 6) + (hash << 16) - hash;\n        }\n\n        return hash.toString(16);\n      };\n      break;\n\n    case 'lose':\n      return function (str) {\n        let hash = 0;\n\n        for (let i = 0; i < str.length; i++) {\n          hash += str.charCodeAt(i);\n        }\n\n        return hash.toString(16);\n      };\n      break;\n\n    default:\n      return function (str) {\n        let hash = 0;\n\n        for (let i = 0; i < str.length; i++) {\n          hash = (hash << 5) - hash + str.charCodeAt(i);\n          hash = hash & hash;\n        }\n\n        return hash.toString(16);\n      };\n      break;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}