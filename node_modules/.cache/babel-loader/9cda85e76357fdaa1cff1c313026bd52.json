{"ast":null,"code":"var _jsxFileName = \"/home/hari/Desktop/web-dev/React/SNStudent/src/components/NewsFeeds/CreatePostModal.js\";\nimport React from 'react';\nimport { Modal, Header, Form, Image, Button, Input, TextArea, Segment, Grid, Label, Icon, GridColumn } from 'semantic-ui-react';\nimport { Picker, emojiIndex } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\nimport uuid from 'uuidv4';\nimport firebase from '../../firebase';\nimport FileModal from './FileModal';\nimport ImageResizer from '../test';\nimport ImageResize from '../ImageResize';\nimport pictureIcon from \"../../Images/picture.svg\";\nimport tagFriends from \"../../Images/tagfriends.svg\";\nimport locationIcon from \"../../Images/location.svg\";\nimport editIcon from \"../../Images/edit.svg\";\nimport smileIcon from \"../../Images/smile.svg\";\n\nclass CreatePostModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postText: '',\n      postImages: [],\n      emojiPicker: false,\n      selectionStart: 0,\n      fileModal: false,\n      uploadTask: null,\n      uploadPercent: 0,\n      storeRef: firebase.storage().ref(),\n      postsRef: firebase.database().ref('posts'),\n      files: [],\n      fileLoading: false,\n      imageResize: []\n    };\n\n    this.handleTogglePicker = () => {\n      this.setState({\n        emojiPicker: !this.state.emojiPicker\n      });\n    };\n\n    this.handlePostChange = event => {\n      this.setState({\n        postText: event.target.value\n      });\n    };\n\n    this.handleEmojiSelect = emoji => {\n      console.log(emoji);\n      const oldPost = this.state.postText;\n      const newPost = this.addEmojiToInputWithSeletionStart(oldPost, this.state.selectionStart, this.colonToUnicode(emoji.colons));\n      this.setState({\n        postText: newPost\n      });\n    };\n\n    this.colonToUnicode = emojiMessage => {\n      let x = emojiMessage.replace(/:/g, \"\");\n      let emoji = emojiIndex.emojis[x];\n\n      if (emoji !== undefined) {\n        let unicode = emoji.native;\n\n        if (unicode !== undefined) {\n          return unicode;\n        } else {\n          return null;\n        }\n      }\n    };\n\n    this.addEmojiToInputWithSeletionStart = (post, selectionStart, emoji) => {\n      if (post) {\n        if (emoji) {\n          return post.substring(0, selectionStart) + emoji + post.substring(selectionStart, post.length);\n        } else {\n          return post;\n        }\n      } else {\n        if (emoji) {\n          return post + emoji;\n        }\n      }\n    };\n\n    this.inputClicked = event => {\n      this.setState({\n        selectionStart: event.target.selectionStart\n      });\n    };\n\n    this.inputKeyPressed = event => {\n      this.setState({\n        selectionStart: event.target.selectionStart\n      });\n    };\n\n    this.openFileModal = () => {\n      this.setState({\n        fileModal: true\n      });\n    };\n\n    this.closeFileModal = () => {\n      this.setState({\n        fileModal: false\n      });\n    };\n\n    this.fileStateToProp = files => {\n      this.setState({\n        files: this.state.files.concat(files)\n      });\n    };\n\n    this.uploadFile = () => {\n      if (this.state.files.length > 0) {\n        this.state.files.forEach(file => {\n          const filePath = this.props.user.uid + '/media/image/' + uuid() + '.jpg';\n          const uploadTask = this.state.storeRef.child(filePath).put(file.file, file.metadata);\n          this.setState({\n            uploadTask\n          }, () => {\n            this.state.uploadTask.on('state_changed', snap => {\n              const uploadPercent = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n              this.setState({\n                uploadPercent\n              }, () => {\n                console.log(this.state.uploadPercent);\n              });\n            });\n          });\n        });\n      } // const uploadTask = this.state.storeRef.child(filePath).put(file,metadata);\n      // this.setState({uploadTask},()=>{\n      //     this.state.uploadTask.on('state_changed', snap =>{\n      //         const uploadPercent = Math.round((snap.bytesTransferred / snap.totalBytes)*100) \n      //         this.setState({uploadPercent},()=>{\n      //             if(this.state.uploadPercent == 100){\n      //                 setTimeout(()=>{\n      //                     this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadURL =>{\n      //                         const image = [];\n      //                         image.push({downloadURL: downloadURL, imagePath: this.state.uploadTask.location_.path})\n      //                         this.setState({postImages: this.state.postImages.concat(image)},()=>{\n      //                             console.log(this.state.postImages)\n      //                         })\n      //                     })\n      //                 },800 - this.state.uploadPercent)\n      //             }\n      //         })\n      //     });\n      // })\n\n    };\n\n    this.savePost = event => {\n      event.preventDefault(); // const postChild = this.props.user.uid+uuid()+'/post';\n      // const postCreate ={\n      //   postChild: postChild,\n      //   createByUid: this.props.user.uid,\n      //   createByName: this.props.user.displayName,\n      //   avatar: this.props.user.photoURL ,\n      //   timestamp: Date.now(),\n      //   postImages: Array().concat(this.state.postImages),\n      //   postText: this.state.postText,\n      //   liked: [{username: 'null', userUID: 'null'}]\n      // }\n      // this.state.postsRef.child(postChild).set(postCreate).then(()=>{\n      //     this.setState({postText: '', postImages: []});\n      //     this.props.closeModal()\n      // })\n\n      this.uploadFile();\n    };\n\n    this.getImageCanvas = files => {\n      files.forEach(file => {\n        ImageResizer(file.url, 120, result => {\n          // let container = document.getElementById('img-container');\n          // let img = document.createElement('img');\n          // img.setAttribute('src',result)\n          // img.style.marginLeft = '10px'\n          // container.appendChild(img)\n          this.setState({\n            imageResize: this.state.imageResize.concat(result)\n          });\n        });\n      });\n    };\n\n    this.displayImages = files => {\n      let limitImage = [];\n\n      for (let i = 0; i < files.length; i++) {\n        if (i < 4) {\n          limitImage.push(files[i]);\n        }\n      }\n\n      for (let i = 0; i < limitImage.length; i++) {\n        this.getImageCanvas(files[i].url);\n      }\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          postText = _this$state.postText,\n          emojiPicker = _this$state.emojiPicker,\n          files = _this$state.files;\n    const _this$props = this.props,\n          user = _this$props.user,\n          modal = _this$props.modal,\n          closeModal = _this$props.closeModal;\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }, React.createElement(FileModal, {\n      files: this.state.files,\n      fileStateToProp: this.fileStateToProp,\n      fileModal: this.state.fileModal,\n      uploadFile: this.uploadFile,\n      closeModal: this.closeFileModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      centered: true,\n      open: modal,\n      onClose: closeModal,\n      closeIcon: true,\n      style: {\n        top: '10%',\n        transform: 'translateY(-10%)',\n        maxWidth: '1000px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }, React.createElement(Header.Content, {\n      style: {\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }, \" \", React.createElement(Image, {\n      spaced: \"right\",\n      style: {\n        width: '30px'\n      },\n      src: editIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231\n      },\n      __self: this\n    }), \"T\\u1EA1o B\\xE0i Vi\\u1EBFt  \"))), React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 235\n      },\n      __self: this\n    }, React.createElement(Form, {\n      style: {\n        marginTop: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 236\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 237\n      },\n      __self: this\n    }, React.createElement(Image, {\n      inline: true,\n      size: \"tiny\",\n      avatar: true,\n      src: user.photoURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      rows: 1,\n      value: postText,\n      type: \"text\",\n      placeholder: \"B\\u1EA1n mu\\u1ED1n chia s\\u1EBB \\u0111i\\u1EC1u g\\xEC ?\",\n      transparent: \"true\",\n      onClick: this.inputClicked,\n      onChange: this.handlePostChange,\n      style: {\n        height: '100%',\n        fontSize: 16,\n        float: 'left',\n        border: 'none',\n        background: 'none',\n        resize: 'none'\n      },\n      onKeyUp: this.inputKeyPressed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }))), React.createElement(Button.Group, {\n      widths: 4,\n      size: \"small\",\n      compact: true,\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.openFileModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, React.createElement(Image, {\n      style: {\n        width: '30px'\n      },\n      spaced: \"right\",\n      centered: true,\n      src: pictureIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 266\n      },\n      __self: this\n    }, \"\\u1EA2nh/Video\")), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 270\n      },\n      __self: this\n    }, React.createElement(Image, {\n      style: {\n        width: '30px'\n      },\n      spaced: \"right\",\n      centered: true,\n      src: tagFriends,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"G\\u1EAFn th\\u1EBB b\\u1EA1n b\\xE8\")), React.createElement(Button, {\n      onClick: this.handleTogglePicker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(Image, {\n      style: {\n        width: '30px'\n      },\n      spaced: \"right\",\n      centered: true,\n      src: smileIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 280\n      },\n      __self: this\n    }, \"C\\u1EA3m x\\xFAc \")), emojiPicker ? React.createElement(\"div\", {\n      onMouseLeave: this.handleTogglePicker,\n      className: \"emoji-mart-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 287\n      },\n      __self: this\n    }, React.createElement(Picker, {\n      i18n: {\n        search: 'Tìm kiếm',\n        categories: {\n          search: 'Tìm kiếm theo mục',\n          recent: 'Đã sử dụng gần đây'\n        }\n      },\n      onSelect: this.handleEmojiSelect,\n      set: \"facebook\",\n      emoji: \"point_up\",\n      style: {\n        position: \"absolute\",\n        left: '55%',\n        top: '65%',\n        zIndex: '1000'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    })) : ''), React.createElement(Form.Button, {\n      onClick: this.savePost,\n      color: \"green\",\n      fluid: true,\n      style: {\n        marginTop: '50px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 306\n      },\n      __self: this\n    }, \"\\u0110\\u0103ng b\\xE0i\")), files.length > 0 ? React.createElement(Segment, {\n      id: \"img-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, this.getImageCanvas(files), React.createElement(Grid, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 315\n      },\n      __self: this\n    }, React.createElement(Grid.Row, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316\n      },\n      __self: this\n    }, this.state.imageResize.length > 0 ? this.state.imageResize.forEach(fileUrl => React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 319\n      },\n      __self: this\n    }, \"aaa\")) : ''))) : '')));\n  }\n\n}\n\nexport default CreatePostModal;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/NewsFeeds/CreatePostModal.js"],"names":["React","Modal","Header","Form","Image","Button","Input","TextArea","Segment","Grid","Label","Icon","GridColumn","Picker","emojiIndex","uuid","firebase","FileModal","ImageResizer","ImageResize","CreatePostModal","Component","state","postText","postImages","emojiPicker","selectionStart","fileModal","uploadTask","uploadPercent","storeRef","storage","ref","postsRef","database","files","fileLoading","imageResize","handleTogglePicker","setState","handlePostChange","event","target","value","handleEmojiSelect","emoji","console","log","oldPost","newPost","addEmojiToInputWithSeletionStart","colonToUnicode","colons","emojiMessage","x","replace","emojis","undefined","unicode","native","post","substring","length","inputClicked","inputKeyPressed","openFileModal","closeFileModal","fileStateToProp","concat","uploadFile","forEach","file","filePath","props","user","uid","child","put","metadata","on","snap","Math","round","bytesTransferred","totalBytes","savePost","preventDefault","getImageCanvas","url","result","displayImages","limitImage","i","push","render","modal","closeModal","top","transform","maxWidth","opacity","width","editIcon","marginTop","photoURL","height","fontSize","float","border","background","resize","pictureIcon","marginLeft","tagFriends","smileIcon","search","categories","recent","position","left","zIndex","fileUrl"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Modal, Header,Form,Image, Button, Input, TextArea, Segment, Grid, Label, Icon, GridColumn } from 'semantic-ui-react';\nimport {Picker,emojiIndex} from 'emoji-mart'\nimport 'emoji-mart/css/emoji-mart.css'\nimport uuid from 'uuidv4'\n\nimport firebase from '../../firebase'\nimport FileModal from './FileModal'\nimport  ImageResizer from'../test'\nimport ImageResize from '../ImageResize'\nimport pictureIcon from '../../Images/picture.svg'\nimport tagFriends from '../../Images/tagfriends.svg'\nimport locationIcon from '../../Images/location.svg'\nimport editIcon from '../../Images/edit.svg'\nimport smileIcon from '../../Images/smile.svg'\n\nclass CreatePostModal extends React.Component{\n\n    state = {\n        postText: '',\n        postImages: [],\n        emojiPicker: false,\n        selectionStart: 0,\n        fileModal: false,        \n        uploadTask: null,\n        uploadPercent: 0,\n        storeRef: firebase.storage().ref(),\n        postsRef: firebase.database().ref('posts'),\n        files:[], \n        fileLoading: false,\n        imageResize: []\n      \n        \n    }\n    \n\n\n    handleTogglePicker = () =>{\n        this.setState({emojiPicker: !this.state.emojiPicker})\n    }\n\n    handlePostChange = event =>{\n        this.setState({postText: event.target.value})\n    }\n\n    handleEmojiSelect = emoji =>{\n        console.log(emoji)\n        const oldPost = this.state.postText;\n        const newPost = this.addEmojiToInputWithSeletionStart(oldPost,this.state.selectionStart,this.colonToUnicode(emoji.colons));\n        this.setState({postText: newPost})\n    \n    }\n    \n\n\n    colonToUnicode = emojiMessage =>{\n        let x = emojiMessage.replace(/:/g,\"\")\n        let emoji = emojiIndex.emojis[x];\n        if(emoji !== undefined){\n            let unicode = emoji.native\n            if(unicode !== undefined){\n                return unicode\n            }else{\n                return null\n            }\n        } \n        \n\n    }\n\naddEmojiToInputWithSeletionStart = (post, selectionStart,emoji) =>{\n \n    if(post){\n        if(emoji){\n            \n            return post.substring(0,selectionStart) +emoji+ post.substring(selectionStart,post.length)\n        }else{\n            return post\n        }\n    }else{\n        if(emoji){\n            return post + emoji\n        }\n    }\n}\n\ninputClicked = event =>{\n   \n    this.setState({selectionStart: event.target.selectionStart});\n    \n}\n\ninputKeyPressed = event =>{\n    this.setState({selectionStart: event.target.selectionStart});\n    \n    \n}\n\nopenFileModal = () =>{\n    this.setState({fileModal: true})\n}\n\ncloseFileModal = () =>{\n    this.setState({fileModal: false})\n}\n\nfileStateToProp = files =>{\n   \n    this.setState({files: this.state.files.concat(files)})\n}\n\nuploadFile = () =>{\n    \n    if(this.state.files.length > 0){\n        this.state.files.forEach(file =>{\n            const filePath = this.props.user.uid+'/media/image/'+uuid()+'.jpg'; \n            const uploadTask = this.state.storeRef.child(filePath).put(file.file,file.metadata)\n            this.setState({uploadTask}, () =>{\n                this.state.uploadTask.on('state_changed', snap =>{\n                    const uploadPercent = Math.round((snap.bytesTransferred / snap.totalBytes) * 100)\n                    this.setState({uploadPercent}, () =>{\n                        console.log(this.state.uploadPercent)\n                    })\n                })\n            })\n        })\n    }\n    // const uploadTask = this.state.storeRef.child(filePath).put(file,metadata);\n    // this.setState({uploadTask},()=>{\n    //     this.state.uploadTask.on('state_changed', snap =>{\n    //         const uploadPercent = Math.round((snap.bytesTransferred / snap.totalBytes)*100) \n    //         this.setState({uploadPercent},()=>{\n    //             if(this.state.uploadPercent == 100){\n    //                 setTimeout(()=>{\n    //                     this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadURL =>{\n    //                         const image = [];\n    //                         image.push({downloadURL: downloadURL, imagePath: this.state.uploadTask.location_.path})\n    //                         this.setState({postImages: this.state.postImages.concat(image)},()=>{\n    //                             console.log(this.state.postImages)\n    //                         })\n    //                     })\n    //                 },800 - this.state.uploadPercent)\n    //             }\n    //         })\n    //     });\n        \n    // })\n    \n    \n}\n\n\n\nsavePost = event =>{\n    event.preventDefault();\n    // const postChild = this.props.user.uid+uuid()+'/post';\n    // const postCreate ={\n    //   postChild: postChild,\n    //   createByUid: this.props.user.uid,\n    //   createByName: this.props.user.displayName,\n    //   avatar: this.props.user.photoURL ,\n    //   timestamp: Date.now(),\n    //   postImages: Array().concat(this.state.postImages),\n    //   postText: this.state.postText,\n    //   liked: [{username: 'null', userUID: 'null'}]\n    // }\n    \n    // this.state.postsRef.child(postChild).set(postCreate).then(()=>{\n    //     this.setState({postText: '', postImages: []});\n    //     this.props.closeModal()\n    // })\n    this.uploadFile()\n    \n  }\n\n//   test =() =>{\n//       console.log('aaa')\n//   }\n\n\n//   getLimitImage = key =>{\n     \n//       return key < 4 ? true : false;\n      \n//   }\n\n\n  getImageCanvas = files =>{\n  \n  files.forEach(file =>{\n    ImageResizer(file.url,120,result => {\n        // let container = document.getElementById('img-container');\n        // let img = document.createElement('img');\n        // img.setAttribute('src',result)\n        // img.style.marginLeft = '10px'\n        // container.appendChild(img)\n        this.setState({imageResize: this.state.imageResize.concat(result)})\n      })\n  })\n      \n  }\n\n  displayImages = files =>{\n    \n    let limitImage=[];\n    for (let i = 0 ; i < files.length; i++){\n        if(i < 4){\n            limitImage.push(files[i])\n        }\n    }\n\nfor(let i = 0 ; i < limitImage.length; i++){\n    this.getImageCanvas(files[i].url)\n}\n            \n  }\n\n    render(){\n\n        const {postText,emojiPicker,files} = this.state;\n        const {user,modal,closeModal} = this.props;\n        \n        return(\n            <div className=\"wrapper\">\n                <FileModal files={this.state.files} fileStateToProp={this.fileStateToProp} fileModal={this.state.fileModal} uploadFile={this.uploadFile} closeModal={this.closeFileModal} />\n\n                <Modal centered  open={modal} onClose={closeModal} closeIcon style={{top: '10%', transform: 'translateY(-10%)',maxWidth: '1000px'}}>\n                <Modal.Header >\n                <Header as='h3'> \n        \n                    <Header.Content style={{opacity: 0.6}}> <Image spaced='right' style={{width:'30px'} } src={editIcon} />Tạo Bài Viết  </Header.Content>\n      \n                </Header>\n                </Modal.Header>\n                <Modal.Content>\n                    <Form style={{marginTop: '5px'}}>\n                        <Form.Group >\n                            <Image inline size='tiny' avatar src={user.photoURL}/>\n\n\n                            <Form.Field  style={{width: '100%'}} >\n                                \n                            \n                                <TextArea\n                                    rows={1}\n                                    value={postText} \n                                    type='text' \n                                    placeholder=\"Bạn muốn chia sẻ điều gì ?\" \n                                    transparent='true'\n                                    onClick={this.inputClicked}\n                                    onChange={this.handlePostChange} \n                                    style={{height: '100%',fontSize: 16,float: 'left',border: 'none', background: 'none', resize: 'none'}} \n                                    onKeyUp={this.inputKeyPressed}  \n                                />\n                                \n                        \n\n                            </Form.Field>\n                            \n                        </Form.Group>\n                        \n                        <Button.Group widths={4}  size='small' compact fluid>\n                            <Button  onClick={this.openFileModal}>\n                            <Image style={{width:'30px'}} spaced='right' centered  src={pictureIcon} />\n                         \n                            <span style={{marginLeft:'10px'}}>Ảnh/Video</span>\n\n                            </Button>\n                          \n                            <Button      >\n                            <Image  style={{width:'30px'}} spaced='right' centered  src={tagFriends} />\n                         \n                            <span style={{marginLeft:'10px'}}>Gắn thẻ bạn bè</span>\n\n                            </Button>\n                            \n                            <Button  onClick={this.handleTogglePicker}>\n                            <Image style={{width:'30px'}} spaced='right' centered  src={smileIcon} />\n                         \n                            <span style={{marginLeft:'10px'}}>Cảm xúc </span>{\n                              \n                            }\n                            \n                            </Button>\n                            {emojiPicker ? (\n                                (\n                                    <div onMouseLeave={this.handleTogglePicker} className=\"emoji-mart-select\">\n                                        <Picker \n\n                                            i18n={{ search: 'Tìm kiếm', categories: { search: 'Tìm kiếm theo mục', recent: 'Đã sử dụng gần đây' } }}\n                                            onSelect={this.handleEmojiSelect}\n                                            set='facebook'\n                                            emoji='point_up'\n                                            style={{position: \"absolute\",left:'55%', top:'65%', zIndex: '1000'}}\n                                    \n                                        />\n                                    </div>\n                                )\n                            ) : ''}\n                          \n                           \n                        </Button.Group>\n                        \n\n\n                        <Form.Button onClick={this.savePost}  color='green' fluid style={{marginTop: '50px'}}>Đăng bài</Form.Button>\n                                \n                    </Form> \n                   \n                    {files.length > 0 ?  (\n                        <Segment id='img-container'>  \n                            {\n                                this.getImageCanvas(files)\n                            }\n                            <Grid>\n                                <Grid.Row>\n                                    {this.state.imageResize.length > 0 ? \n                                        this.state.imageResize.forEach(fileUrl =>(\n                                        <div>aaa</div>\n                                        ))\n                                        : ''}\n                                </Grid.Row>\n                            </Grid>\n                        </Segment>\n                    ): ''}\n                </Modal.Content>\n            </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CreatePostModal\n"]},"metadata":{},"sourceType":"module"}