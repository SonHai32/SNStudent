{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/WatchIgnorePlugin.json\");\n/** @typedef {import(\"../declarations/plugins/WatchIgnorePlugin\").WatchIgnorePluginOptions} WatchIgnorePluginOptions */\n\n\nclass IgnoringWatchFileSystem {\n  constructor(wfs, paths) {\n    this.wfs = wfs;\n    this.paths = paths;\n  }\n\n  watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n    const ignored = path => this.paths.some(p => p instanceof RegExp ? p.test(path) : path.indexOf(p) === 0);\n\n    const notIgnored = path => !ignored(path);\n\n    const ignoredFiles = files.filter(ignored);\n    const ignoredDirs = dirs.filter(ignored);\n    const watcher = this.wfs.watch(files.filter(notIgnored), dirs.filter(notIgnored), missing, startTime, options, (err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles) => {\n      if (err) return callback(err);\n\n      for (const path of ignoredFiles) {\n        fileTimestamps.set(path, 1);\n      }\n\n      for (const path of ignoredDirs) {\n        dirTimestamps.set(path, 1);\n      }\n\n      callback(err, filesModified, dirsModified, missingModified, fileTimestamps, dirTimestamps, removedFiles);\n    }, callbackUndelayed);\n    return {\n      close: () => watcher.close(),\n      pause: () => watcher.pause(),\n      getContextTimestamps: () => {\n        const dirTimestamps = watcher.getContextTimestamps();\n\n        for (const path of ignoredDirs) {\n          dirTimestamps.set(path, 1);\n        }\n\n        return dirTimestamps;\n      },\n      getFileTimestamps: () => {\n        const fileTimestamps = watcher.getFileTimestamps();\n\n        for (const path of ignoredFiles) {\n          fileTimestamps.set(path, 1);\n        }\n\n        return fileTimestamps;\n      }\n    };\n  }\n\n}\n\nclass WatchIgnorePlugin {\n  /**\n   * @param {WatchIgnorePluginOptions} paths list of paths\n   */\n  constructor(paths) {\n    validateOptions(schema, paths, \"Watch Ignore Plugin\");\n    this.paths = paths;\n  }\n\n  apply(compiler) {\n    compiler.hooks.afterEnvironment.tap(\"WatchIgnorePlugin\", () => {\n      compiler.watchFileSystem = new IgnoringWatchFileSystem(compiler.watchFileSystem, this.paths);\n    });\n  }\n\n}\n\nmodule.exports = WatchIgnorePlugin;","map":null,"metadata":{},"sourceType":"script"}