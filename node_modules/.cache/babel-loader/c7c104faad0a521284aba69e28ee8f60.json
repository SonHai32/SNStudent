{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst SingleEntryPlugin = require(\"./SingleEntryPlugin\");\n\nconst MultiEntryPlugin = require(\"./MultiEntryPlugin\");\n\nconst DynamicEntryPlugin = require(\"./DynamicEntryPlugin\");\n/** @typedef {import(\"../declarations/WebpackOptions\").EntryItem} EntryItem */\n\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n/**\n * @param {string} context context path\n * @param {EntryItem} item entry array or single path\n * @param {string} name entry key name\n * @returns {SingleEntryPlugin | MultiEntryPlugin} returns either a single or multi entry plugin\n */\n\n\nconst itemToPlugin = (context, item, name) => {\n  if (Array.isArray(item)) {\n    return new MultiEntryPlugin(context, item, name);\n  }\n\n  return new SingleEntryPlugin(context, item, name);\n};\n\nmodule.exports = class EntryOptionPlugin {\n  /**\n   * @param {Compiler} compiler the compiler instance one is tapping into\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.entryOption.tap(\"EntryOptionPlugin\", (context, entry) => {\n      if (typeof entry === \"string\" || Array.isArray(entry)) {\n        itemToPlugin(context, entry, \"main\").apply(compiler);\n      } else if (typeof entry === \"object\") {\n        for (const name of Object.keys(entry)) {\n          itemToPlugin(context, entry[name], name).apply(compiler);\n        }\n      } else if (typeof entry === \"function\") {\n        new DynamicEntryPlugin(context, entry).apply(compiler);\n      }\n\n      return true;\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}