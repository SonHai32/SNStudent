{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      RawSource = _require.RawSource;\n\nconst ModuleFilenameHelpers = require(\"./ModuleFilenameHelpers\");\n\nconst cache = new WeakMap();\n\nclass EvalSourceMapDevToolModuleTemplatePlugin {\n  constructor(compilation, options) {\n    this.compilation = compilation;\n    this.sourceMapComment = options.append || \"//# sourceURL=[module]\\n//# sourceMappingURL=[url]\";\n    this.moduleFilenameTemplate = options.moduleFilenameTemplate || \"webpack://[namespace]/[resource-path]?[hash]\";\n    this.namespace = options.namespace || \"\";\n    this.options = options;\n  }\n\n  apply(moduleTemplate) {\n    const self = this;\n    const options = this.options;\n    const matchModule = ModuleFilenameHelpers.matchObject.bind(ModuleFilenameHelpers, options);\n    moduleTemplate.hooks.module.tap(\"EvalSourceMapDevToolModuleTemplatePlugin\", (source, module) => {\n      const cachedSource = cache.get(source);\n\n      if (cachedSource !== undefined) {\n        return cachedSource;\n      }\n\n      if (!matchModule(module.resource)) {\n        return source;\n      }\n      /** @type {{ [key: string]: TODO; }} */\n\n\n      let sourceMap;\n      let content;\n\n      if (source.sourceAndMap) {\n        const sourceAndMap = source.sourceAndMap(options);\n        sourceMap = sourceAndMap.map;\n        content = sourceAndMap.source;\n      } else {\n        sourceMap = source.map(options);\n        content = source.source();\n      }\n\n      if (!sourceMap) {\n        return source;\n      } // Clone (flat) the sourcemap to ensure that the mutations below do not persist.\n\n\n      sourceMap = Object.keys(sourceMap).reduce((obj, key) => {\n        obj[key] = sourceMap[key];\n        return obj;\n      }, {});\n      const modules = sourceMap.sources.map(source => {\n        const module = self.compilation.findModule(source);\n        return module || source;\n      });\n      let moduleFilenames = modules.map(module => {\n        return ModuleFilenameHelpers.createFilename(module, {\n          moduleFilenameTemplate: self.moduleFilenameTemplate,\n          namespace: self.namespace\n        }, moduleTemplate.runtimeTemplate.requestShortener);\n      });\n      moduleFilenames = ModuleFilenameHelpers.replaceDuplicates(moduleFilenames, (filename, i, n) => {\n        for (let j = 0; j < n; j++) filename += \"*\";\n\n        return filename;\n      });\n      sourceMap.sources = moduleFilenames;\n      sourceMap.sourceRoot = options.sourceRoot || \"\";\n      sourceMap.file = \"\".concat(module.id, \".js\");\n      const footer = self.sourceMapComment.replace(/\\[url\\]/g, \"data:application/json;charset=utf-8;base64,\".concat(Buffer.from(JSON.stringify(sourceMap), \"utf8\").toString(\"base64\"))) + \"\\n//# sourceURL=webpack-internal:///\".concat(module.id, \"\\n\"); // workaround for chrome bug\n\n      const evalSource = new RawSource(\"eval(\".concat(JSON.stringify(content + footer), \");\"));\n      cache.set(source, evalSource);\n      return evalSource;\n    });\n    moduleTemplate.hooks.hash.tap(\"EvalSourceMapDevToolModuleTemplatePlugin\", hash => {\n      hash.update(\"eval-source-map\");\n      hash.update(\"2\");\n    });\n  }\n\n}\n\nmodule.exports = EvalSourceMapDevToolModuleTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}