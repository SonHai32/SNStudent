{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./ConstDependency\");\n\nconst CommonJsRequireDependency = require(\"./CommonJsRequireDependency\");\n\nconst CommonJsRequireContextDependency = require(\"./CommonJsRequireContextDependency\");\n\nconst RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nconst RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nconst RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nconst RequireHeaderDependency = require(\"./RequireHeaderDependency\");\n\nconst NullFactory = require(\"../NullFactory\");\n\nconst RequireResolveDependencyParserPlugin = require(\"./RequireResolveDependencyParserPlugin\");\n\nconst CommonJsRequireDependencyParserPlugin = require(\"./CommonJsRequireDependencyParserPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nclass CommonJsPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n    compiler.hooks.compilation.tap(\"CommonJsPlugin\", (compilation, {\n      contextModuleFactory,\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(CommonJsRequireDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(CommonJsRequireDependency, new CommonJsRequireDependency.Template());\n      compilation.dependencyFactories.set(CommonJsRequireContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(CommonJsRequireContextDependency, new CommonJsRequireContextDependency.Template());\n      compilation.dependencyFactories.set(RequireResolveDependency, normalModuleFactory);\n      compilation.dependencyTemplates.set(RequireResolveDependency, new RequireResolveDependency.Template());\n      compilation.dependencyFactories.set(RequireResolveContextDependency, contextModuleFactory);\n      compilation.dependencyTemplates.set(RequireResolveContextDependency, new RequireResolveContextDependency.Template());\n      compilation.dependencyFactories.set(RequireResolveHeaderDependency, new NullFactory());\n      compilation.dependencyTemplates.set(RequireResolveHeaderDependency, new RequireResolveHeaderDependency.Template());\n      compilation.dependencyFactories.set(RequireHeaderDependency, new NullFactory());\n      compilation.dependencyTemplates.set(RequireHeaderDependency, new RequireHeaderDependency.Template());\n\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.commonjs !== undefined && !parserOptions.commonjs) return;\n        const requireExpressions = [\"require\", \"require.resolve\", \"require.resolveWeak\"];\n\n        for (let expression of requireExpressions) {\n          parser.hooks.typeof.for(expression).tap(\"CommonJsPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n          parser.hooks.evaluateTypeof.for(expression).tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"function\"));\n          parser.hooks.evaluateIdentifier.for(expression).tap(\"CommonJsPlugin\", ParserHelpers.evaluateToIdentifier(expression, true));\n        }\n\n        parser.hooks.evaluateTypeof.for(\"module\").tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n        parser.hooks.assign.for(\"require\").tap(\"CommonJsPlugin\", expr => {\n          // to not leak to global \"require\", we need to define a local require here.\n          const dep = new ConstDependency(\"var require;\", 0);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          parser.scope.definitions.add(\"require\");\n          return true;\n        });\n        parser.hooks.canRename.for(\"require\").tap(\"CommonJsPlugin\", () => true);\n        parser.hooks.rename.for(\"require\").tap(\"CommonJsPlugin\", expr => {\n          // define the require variable. It's still undefined, but not \"not defined\".\n          const dep = new ConstDependency(\"var require;\", 0);\n          dep.loc = expr.loc;\n          parser.state.current.addDependency(dep);\n          return false;\n        });\n        parser.hooks.typeof.for(\"module\").tap(\"CommonJsPlugin\", () => true);\n        parser.hooks.evaluateTypeof.for(\"exports\").tap(\"CommonJsPlugin\", ParserHelpers.evaluateToString(\"object\"));\n        new CommonJsRequireDependencyParserPlugin(options).apply(parser);\n        new RequireResolveDependencyParserPlugin(options).apply(parser);\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"CommonJsPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"CommonJsPlugin\", handler);\n    });\n  }\n\n}\n\nmodule.exports = CommonJsPlugin;","map":null,"metadata":{},"sourceType":"script"}