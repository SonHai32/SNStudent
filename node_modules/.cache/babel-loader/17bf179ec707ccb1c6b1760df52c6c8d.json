{"ast":null,"code":"\"use strict\";\n/**\n * A subset of Set that offers sorting functionality\n * @template T item type in set\n * @extends {Set<T>}\n */\n\nclass SortableSet extends Set {\n  /**\n   * Create a new sortable set\n   * @param {Iterable<T>=} initialIterable The initial iterable value\n   * @typedef {function(T, T): number} SortFunction\n   * @param {SortFunction=} defaultSort Default sorting function\n   */\n  constructor(initialIterable, defaultSort) {\n    super(initialIterable);\n    /** @private @type {function(T, T): number}} */\n\n    this._sortFn = defaultSort;\n    /** @private @type {function(T, T): number} | null} */\n\n    this._lastActiveSortFn = null;\n    /** @private @type {Map<Function, T[]> | undefined} */\n\n    this._cache = undefined;\n    /** @private @type {Map<Function, T[]|string|number> | undefined} */\n\n    this._cacheOrderIndependent = undefined;\n  }\n  /**\n   * @param {T} value value to add to set\n   * @returns {this} returns itself\n   */\n\n\n  add(value) {\n    this._lastActiveSortFn = null;\n\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    super.add(value);\n    return this;\n  }\n  /**\n   * @param {T} value value to delete\n   * @returns {boolean} true if value existed in set, false otherwise\n   */\n\n\n  delete(value) {\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    return super.delete(value);\n  }\n  /**\n   * @returns {void}\n   */\n\n\n  clear() {\n    this._invalidateCache();\n\n    this._invalidateOrderedCache();\n\n    return super.clear();\n  }\n  /**\n   * Sort with a comparer function\n   * @param {SortFunction} sortFn Sorting comparer function\n   * @returns {void}\n   */\n\n\n  sortWith(sortFn) {\n    if (this.size <= 1 || sortFn === this._lastActiveSortFn) {\n      // already sorted - nothing to do\n      return;\n    }\n\n    const sortedArray = Array.from(this).sort(sortFn);\n    super.clear();\n\n    for (let i = 0; i < sortedArray.length; i += 1) {\n      super.add(sortedArray[i]);\n    }\n\n    this._lastActiveSortFn = sortFn;\n\n    this._invalidateCache();\n  }\n\n  sort() {\n    this.sortWith(this._sortFn);\n  }\n  /**\n   * Get data from cache\n   * @param {function(SortableSet<T>): T[]} fn function to calculate value\n   * @returns {T[]} returns result of fn(this), cached until set changes\n   */\n\n\n  getFromCache(fn) {\n    if (this._cache === undefined) {\n      this._cache = new Map();\n    } else {\n      const data = this._cache.get(fn);\n\n      if (data !== undefined) {\n        return data;\n      }\n    }\n\n    const newData = fn(this);\n\n    this._cache.set(fn, newData);\n\n    return newData;\n  }\n  /**\n   * @param {function(SortableSet<T>): string|number|T[]} fn function to calculate value\n   * @returns {any} returns result of fn(this), cached until set changes\n   */\n\n\n  getFromUnorderedCache(fn) {\n    if (this._cacheOrderIndependent === undefined) {\n      this._cacheOrderIndependent = new Map();\n    } else {\n      const data = this._cacheOrderIndependent.get(fn);\n\n      if (data !== undefined) {\n        return data;\n      }\n    }\n\n    const newData = fn(this);\n\n    this._cacheOrderIndependent.set(fn, newData);\n\n    return newData;\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  _invalidateCache() {\n    if (this._cache !== undefined) {\n      this._cache.clear();\n    }\n  }\n  /**\n   * @private\n   * @returns {void}\n   */\n\n\n  _invalidateOrderedCache() {\n    if (this._cacheOrderIndependent !== undefined) {\n      this._cacheOrderIndependent.clear();\n    }\n  }\n\n}\n\nmodule.exports = SortableSet;","map":null,"metadata":{},"sourceType":"script"}