{"ast":null,"code":"var _jsxFileName = \"/home/hari/Desktop/web-dev/React/cstudy/src/components/NewsFeeds/NewsFeeds.js\";\nimport React from 'react';\nimport { Segment, Header, Icon, Feed, Image, Divider, Form, TextArea, Button, List, Responsive, Dropdown, Container, Loader, Dimmer, Label } from 'semantic-ui-react';\nimport uuid from 'uuidv4';\nimport firebase from '../../firebase';\nimport FileModal from './FileModal';\nimport ImageModal from './ImageModal';\nimport * as moment from 'moment';\nimport hash from 'js-hash-code';\n\nclass NewsFeeds extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      like: false,\n      user: this.props.currentUser,\n      post: '',\n      fileModal: false,\n      imageModalStatus: false,\n      imageModalURL: '',\n      uploadTask: null,\n      uploadStatus: '',\n      percentUploaded: 0,\n      imagePost: [],\n      postCreate: [],\n      postFromDatabase: [],\n      storeRef: firebase.storage().ref(),\n      databaseRef: firebase.database().ref('posts'),\n      imageLoading: false,\n      postLoading: false,\n      postDrowdownOptions: [{\n        key: 'savePost',\n        text: React.createElement(\"span\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          circular: true,\n          size: \"small\",\n          name: \"tag\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 36\n          },\n          __self: this\n        }), \"L\\u01B0u b\\xE0i vi\\u1EBFt\")\n      }, {\n        key: 'postReport',\n        text: React.createElement(\"span\", {\n          onClick: this.handleMessage,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, React.createElement(Icon, {\n          circular: true,\n          size: \"small\",\n          name: \"warning\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }), \"B\\xE1o c\\xE1o b\\xE0i vi\\u1EBFt\")\n      }]\n    };\n\n    this.addPostListener = () => {\n      const ref = firebase.database().ref('posts');\n      const postLoaded = [];\n      ref.on('child_added', snap => {\n        ref.child(snap.key).on('child_added', snap => postLoaded.push(snap.val()));\n        this.setState({\n          postFromDatabase: postLoaded.sort((a, b) => {\n            return b.timestamp - a.timestamp;\n          })\n        });\n      });\n    };\n\n    this.handlePostChange = (e, {\n      value\n    }) => {\n      this.setState({\n        post: value\n      });\n    };\n\n    this.openModal = () => {\n      this.setState({\n        fileModal: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        fileModal: false\n      });\n    };\n\n    this.openImageModal = event => {\n      this.setState({\n        imageModalStatus: true,\n        imageModalURL: event.target.name\n      });\n    };\n\n    this.closeImageModal = () => {\n      this.setState({\n        imageModalStatus: false,\n        imageModalURL: ''\n      });\n    };\n\n    this.uploadFile = (file, metadata) => {\n      const filePath = this.state.user.uid + '/media/image/' + uuid() + '.jpg';\n      this.setState({\n        imageLoading: true,\n        uploadTask: this.state.storeRef.child(filePath).put(file, metadata)\n      }, () => {\n        this.state.uploadTask.on('state_changed', snap => {\n          const percentUploaded = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n          console.log(percentUploaded);\n          this.setState({\n            percentUploaded\n          });\n\n          if (percentUploaded === 100) {\n            this.setState({\n              percentUploaded: 0\n            });\n            setTimeout(() => {\n              this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadURL => {\n                const image = {\n                  downloadURL: downloadURL,\n                  imagePath: this.state.uploadTask.location_.path\n                };\n                this.setState({\n                  imagePost: this.state.imagePost.concat(image),\n                  imageLoading: false\n                });\n              }).catch(err => console.log(err));\n            }, 1000);\n          }\n        });\n      }, err => {\n        console.log(err);\n      });\n    };\n\n    this.savePost = event => {\n      event.preventDefault();\n      const postChild = this.state.user.uid + uuid() + '/post';\n      const postCreate = {\n        postChild: postChild,\n        createByUid: this.state.user.uid,\n        createByName: this.state.user.displayName,\n        avatar: this.state.user.photoURL,\n        timestamp: Date.now(),\n        postImages: Array().concat(this.state.imagePost),\n        postText: this.state.post,\n        liked: [{\n          username: 'null',\n          userUID: 'null'\n        }]\n      };\n      this.state.databaseRef.child(postChild).set(postCreate).then(() => this.setState({\n        post: '',\n        imagePost: []\n      }));\n    };\n\n    this.handleLikeClicked = (event, {\n      name\n    }) => {\n      // const checkLike = userUID =>{\n      //  return this.state.user.uid === userUID\n      // }\n      console.log(name);\n      event.preventDefault();\n      const post = this.state.postFromDatabase.filter((val, key, arr) => {\n        return val.postChild === name;\n      });\n      let userLiked;\n      let postLikedUpdate = [];\n      post.forEach(val => {\n        postLikedUpdate = val.liked;\n        val.liked.forEach((val, index) => {\n          userLiked = val.userUID === this.state.user.uid;\n        });\n\n        if (userLiked) {\n          postLikedUpdate = val.liked.filter((val, index, arr) => {\n            return val.userUID !== this.state.user.uid;\n          });\n        } else {\n          let user = {\n            username: this.state.user.displayName,\n            userUID: this.state.user.uid\n          };\n          postLikedUpdate.push(user);\n        }\n      });\n      let postUpdate;\n      post.forEach(val => {\n        postUpdate = {\n          postChild: val.postChild,\n          createByUid: val.createByUid,\n          createByName: val.createByName,\n          avatar: val.avatar,\n          timestamp: val.timestamp,\n          postImages: val.postImages,\n          postText: val.text,\n          liked: postLikedUpdate\n        };\n        console.log(val.postImages);\n      });\n      console.log(postUpdate);\n      this.state.databaseRef.child(name).set(postUpdate).then(() => console.log(\"like clicked\")).catch(err => console.log(err));\n    };\n\n    this.displayImagePost = ({\n      imagePost\n    }) => // this.state.uploadStatus.includes('uploading')  ? \n    // <Segment size='large' loading={this.state.percentUploaded < 100} >\n    //   <List horizontal>\n    //       {imagePost.map((val,key) => (\n    //         <List.Item key={key+uuid} style={{marginRight: '15px'}}> \n    //             <Image  rounded size='small' key={val.downloadURL} src={val.downloadURL} label={{as: 'a' ,name: key, corner:'right', icon:'remove',size: 'mini',color:'red',onClick: this.removeImagePost}} /> \n    //         </List.Item> ) )}\n    //     <List.Item>\n    //       <Icon style={{cursor: 'pointer', boder: 'solid 2px '}} color='black' inverted name='add' size='big' onClick={this.openModal} />\n    //     </List.Item>\n    //   </List>\n    // </Segment> : ''\n    React.createElement(Dimmer.Dimmable, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }, React.createElement(Dimmer, {\n      inverted: true,\n      active: this.state.percentUploaded > 0 && this.state.percentUploaded < 100,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }, \"Loading\")), React.createElement(List, {\n      horizontal: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    }, imagePost.map((val, key) => React.createElement(List.Item, {\n      key: key + uuid,\n      style: {\n        marginRight: '15px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241\n      },\n      __self: this\n    }, React.createElement(Image, {\n      wrapped: true,\n      rounded: true,\n      size: \"small\",\n      key: val.downloadURL,\n      src: val.downloadURL,\n      label: {\n        as: 'a',\n        name: key,\n        corner: 'right',\n        icon: 'remove',\n        size: 'tiny',\n        color: 'red',\n        onClick: this.removeImagePost\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }))), imagePost.length > 0 ? React.createElement(List.Item, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 248\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      link: true,\n      color: \"black\",\n      inverted: true,\n      name: \"add\",\n      size: \"big\",\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 249\n      },\n      __self: this\n    })) : ''));\n\n    this.deleteImageFromStorge = imagePath => {\n      if (imagePath) {\n        this.state.storeRef.child(imagePath).delete().then(() => console.log(\"deleted\")).catch(err => console.log(err));\n      }\n    };\n\n    this.removeImagePost = event => {\n      event.preventDefault();\n      let removeIndex = event.target.name;\n      this.deleteImageFromStorge(this.state.imagePost[removeIndex].imagePath);\n      const newImagePost = this.state.imagePost.filter((value, index, arr) => {\n        return index != removeIndex;\n      });\n      this.setState({\n        imagePost: newImagePost\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.addPostListener();\n  }\n\n  render() {\n    const _this$state = this.state,\n          user = _this$state.user,\n          post = _this$state.post,\n          postFromDatabase = _this$state.postFromDatabase;\n    return React.createElement(React.Fragment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 291\n      },\n      __self: this\n    }, React.createElement(FileModal, {\n      fileModal: this.state.fileModal,\n      uploadFile: this.uploadFile,\n      closeModal: this.closeModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(Segment, {\n      stacked: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      block: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300\n      },\n      __self: this\n    }, React.createElement(Header.Content, {\n      style: {\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, \"T\\u1EA1o B\\xE0i Vi\\u1EBFt \", React.createElement(Icon, {\n      name: \"edit outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }))), this.displayImagePost(this.state), React.createElement(Form, {\n      style: {\n        marginTop: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 311\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 312\n      },\n      __self: this\n    }, React.createElement(Image, {\n      avatar: true,\n      src: user.photoURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 313\n      },\n      __self: this\n    }), React.createElement(TextArea, {\n      placeholder: \"What do you thing ?  \",\n      value: post,\n      onChange: this.handlePostChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 314\n      },\n      __self: this\n    }))), React.createElement(Button.Group, {\n      compact: true,\n      fluid: true,\n      widths: 4,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, React.createElement(Button, {\n      inverted: true,\n      style: {\n        background: '#6FBE42'\n      },\n      onClick: this.openModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 323\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"photo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 324\n      },\n      __self: this\n    }), \" \\u1EA2nh/Video\"), React.createElement(Button, {\n      inverted: true,\n      style: {\n        background: '#6FBE42'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"user plus\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327\n      },\n      __self: this\n    }), \" Tag Friends\"), React.createElement(Button, {\n      inverted: true,\n      style: {\n        background: '#6FBE42'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"smile outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 332\n      },\n      __self: this\n    }), \" C\\u1EA3m X\\xFAc\"), React.createElement(Button, {\n      inverted: true,\n      style: {\n        background: '#6FBE42'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 335\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 336\n      },\n      __self: this\n    }), \" Kh\\xE1c\")), this.state.post.length > 0 || this.state.imagePost.length > 0 ? React.createElement(Button, {\n      onClick: this.savePost,\n      fluid: true,\n      style: {\n        marginTop: '20px',\n        background: '#ecf7e7'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 341\n      },\n      __self: this\n    }, \"Post\") : ''), postFromDatabase.length > 0 ? postFromDatabase.map((val, key) => React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 352\n      },\n      __self: this\n    }, React.createElement(Feed, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 354\n      },\n      __self: this\n    }, React.createElement(Feed.Event, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 355\n      },\n      __self: this\n    }, React.createElement(Feed.Label, {\n      image: val.avatar,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 356\n      },\n      __self: this\n    }), React.createElement(Feed.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 357\n      },\n      __self: this\n    }, React.createElement(Feed.Summary, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 358\n      },\n      __self: this\n    }, React.createElement(Dropdown, {\n      inline: true,\n      closeOnChange: true,\n      options: this.state.postDrowdownOptions,\n      pointing: \"top right\",\n      icon: null,\n      style: {\n        float: 'right',\n        zIndex: 1000\n      },\n      trigger: React.createElement(\"i\", {\n        style: {\n          opacity: 0.5\n        },\n        className: \"fas fa-ellipsis-h\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366\n        },\n        __self: this\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }), React.createElement(Feed.User, {\n      content: val.createByName,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368\n      },\n      __self: this\n    }), React.createElement(Feed.Date, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 369\n      },\n      __self: this\n    }, moment(val.timestamp).locale('vi').fromNow())), React.createElement(Feed.Summary, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378\n      },\n      __self: this\n    }, React.createElement(\"i\", {\n      style: {\n        opacity: 0.5,\n        fontSize: 14\n      },\n      className: \"fas fa-globe-asia\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 379\n      },\n      __self: this\n    }))))), React.createElement(Feed, {\n      size: \"large\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 392\n      },\n      __self: this\n    }, React.createElement(Feed.Event, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 394\n      },\n      __self: this\n    }, React.createElement(Feed.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 395\n      },\n      __self: this\n    }, React.createElement(Container, {\n      fluid: true,\n      text: true,\n      textAlign: \"justified\",\n      content: val.postText,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396\n      },\n      __self: this\n    }), val.postImages ? val.postImages.map((value, key) => React.createElement(List, {\n      key: val.createByUid + val.timestamp + uuid() + hash(value.downloadURL),\n      horizontal: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401\n      },\n      __self: this\n    }, React.createElement(List.Item, {\n      key: 'list' + val.createByUid + val.timestamp + uuid() + hash(value.downloadURL),\n      as: \"a\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402\n      },\n      __self: this\n    }, React.createElement(Image, {\n      centered: true,\n      fluid: true,\n      key: 'image' + val.createByUid + val.timestamp + uuid() + hash(value.downloadURL),\n      src: value.downloadURL,\n      name: value.downloadURL,\n      onClick: this.openImageModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 405\n      },\n      __self: this\n    }), React.createElement(ImageModal, {\n      imageModal: this.state.imageModalStatus,\n      closeModal: this.closeImageModal,\n      imageURL: this.state.imageModalURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 408\n      },\n      __self: this\n    })))) : '')), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 424\n      },\n      __self: this\n    }), React.createElement(Container, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 426\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"thumbs up\",\n      color: \"blue\",\n      size: \"small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }), \" \", React.createElement(\"span\", {\n      style: {\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 427\n      },\n      __self: this\n    }, \"20 likes\"), React.createElement(\"span\", {\n      style: {\n        float: 'right',\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 428\n      },\n      __self: this\n    }, \"20 comnents\")), React.createElement(Divider, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 430\n      },\n      __self: this\n    }), React.createElement(Button.Group, {\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432\n      },\n      __self: this\n    }, React.createElement(Button, {\n      name: val.postChild,\n      onClick: this.handleLikeClicked,\n      basic: true,\n      size: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 433\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"thumbs up\",\n      color: \"blue\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 435\n      },\n      __self: this\n    }), \" Like\"), React.createElement(Button, {\n      basic: true,\n      size: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"comment outline\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438\n      },\n      __self: this\n    }), \" Comment\"), React.createElement(Button, {\n      basic: true,\n      size: \"medium\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 440\n      },\n      __self: this\n    }, React.createElement(Icon, {\n      name: \"share\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 441\n      },\n      __self: this\n    }), \" Share\"))))) : '');\n  }\n\n}\n\nexport default NewsFeeds;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/cstudy/src/components/NewsFeeds/NewsFeeds.js"],"names":["React","Segment","Header","Icon","Feed","Image","Divider","Form","TextArea","Button","List","Responsive","Dropdown","Container","Loader","Dimmer","Label","uuid","firebase","FileModal","ImageModal","moment","hash","NewsFeeds","Component","state","like","user","props","currentUser","post","fileModal","imageModalStatus","imageModalURL","uploadTask","uploadStatus","percentUploaded","imagePost","postCreate","postFromDatabase","storeRef","storage","ref","databaseRef","database","imageLoading","postLoading","postDrowdownOptions","key","text","handleMessage","addPostListener","postLoaded","on","snap","child","push","val","setState","sort","a","b","timestamp","handlePostChange","e","value","openModal","closeModal","openImageModal","event","target","name","closeImageModal","uploadFile","file","metadata","filePath","uid","put","Math","round","bytesTransferred","totalBytes","console","log","setTimeout","snapshot","getDownloadURL","then","downloadURL","image","imagePath","location_","path","concat","catch","err","savePost","preventDefault","postChild","createByUid","createByName","displayName","avatar","photoURL","Date","now","postImages","Array","postText","liked","username","userUID","set","handleLikeClicked","filter","arr","userLiked","postLikedUpdate","forEach","index","postUpdate","displayImagePost","map","marginRight","as","corner","icon","size","color","onClick","removeImagePost","length","deleteImageFromStorge","delete","removeIndex","newImagePost","componentDidMount","render","opacity","marginTop","background","float","zIndex","locale","fromNow","fontSize"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {Segment,Header,Icon, Feed,Image, Divider, Form, TextArea, Button, List, Responsive, Dropdown, Container, Loader, Dimmer, Label} from 'semantic-ui-react'\nimport uuid from 'uuidv4'\nimport firebase from '../../firebase'\nimport FileModal from './FileModal'\nimport ImageModal from './ImageModal'\nimport * as moment from 'moment'\nimport hash from 'js-hash-code'\n\n\n\n\n\nclass NewsFeeds extends React.Component{\n\n    state ={\n      like: false,\n      user: this.props.currentUser,\n      post: '',\n      fileModal: false,\n      imageModalStatus: false,\n      imageModalURL: '',\n      uploadTask: null,\n      uploadStatus : '',\n      percentUploaded : 0,\n      imagePost: [],\n      postCreate: [],\n      postFromDatabase: [],\n      storeRef: firebase.storage().ref(),\n      databaseRef: firebase.database().ref('posts'),\n      imageLoading: false,\n      postLoading: false,\n      postDrowdownOptions: [\n        {\n          key: 'savePost',\n          text: <span><Icon circular size='small' name='tag' />Lưu bài viết</span>,\n\n          \n        },\n        {\n          key: 'postReport',\n          text :  <span onClick={this.handleMessage} ><Icon circular size='small' name='warning' />Báo cáo bài viết</span>,\n          \n        \n      },\n\n      ]\n   \n    }\n\n    componentDidMount(){\n      this.addPostListener()\n    }\n\n    addPostListener = () =>{\n\n      const ref = firebase.database().ref('posts')\n      const postLoaded = []\n      ref.on('child_added',snap =>{\n        ref.child(snap.key).on('child_added',snap => postLoaded.push(snap.val()));\n        this.setState({postFromDatabase: postLoaded.sort((a,b) =>{return b.timestamp-a.timestamp})})\n   \n        \n      })\n    \n      \n  \n    }\n\n\n\n    \n    handlePostChange = (e, { value}) =>{\n    \n      this.setState({post: value})\n    }\n    \n    openModal = () =>{\n      this.setState({fileModal: true})\n    }\n\n    closeModal = () =>{\n\n      this.setState({fileModal: false})\n    }\n\n    openImageModal = event =>{\n     \n      this.setState({imageModalStatus: true, imageModalURL: event.target.name})\n    }\n\n    closeImageModal = () =>{\n      this.setState({imageModalStatus: false, imageModalURL:''})\n\n    }\n\n    uploadFile = (file, metadata) =>{\n      const filePath = this.state.user.uid+'/media/image/'+uuid()+'.jpg'\n     \n      this.setState({\n  \n        imageLoading: true,\n        uploadTask: this.state.storeRef.child(filePath).put(file,metadata)\n      \n        },\n          () => {\n            this.state.uploadTask.on('state_changed', snap =>{\n              const percentUploaded = Math.round((snap.bytesTransferred / snap.totalBytes)*100);\n              console.log(percentUploaded)\n              this.setState({percentUploaded});\n            \n            if(percentUploaded === 100){\n              this.setState({percentUploaded: 0})\n              setTimeout(()=>{\n                this.state.uploadTask.snapshot.ref\n              .getDownloadURL()\n              .then(downloadURL => {\n                const image = {downloadURL: downloadURL, imagePath: this.state.uploadTask.location_.path}\n                this.setState({imagePost: this.state.imagePost.concat(image),imageLoading: false})\n              \n                 })\n                .catch(err=>console.log(err))\n              },1000)  \n            \n            }\n            \n            })\n          },err=>{console.log(err)}\n        )\n      }\n\n      savePost = event =>{\n        event.preventDefault();\n        const postChild = this.state.user.uid+uuid()+'/post';\n        const postCreate ={\n          postChild: postChild,\n          createByUid: this.state.user.uid,\n          createByName: this.state.user.displayName,\n          avatar: this.state.user.photoURL ,\n          timestamp: Date.now(),\n          postImages: Array().concat(this.state.imagePost),\n          postText: this.state.post,\n          liked: [{username: 'null', userUID: 'null'}]\n        }\n        \n        this.state.databaseRef.child(postChild).set(postCreate).then(()=>this.setState({post: '', imagePost: []}))\n        \n      }\n\n\n      \n\n      handleLikeClicked = (event, {name}) =>{\n        // const checkLike = userUID =>{\n        //  return this.state.user.uid === userUID\n        // }\n        console.log(name)\n        event.preventDefault();\n        const post = this.state.postFromDatabase.filter((val,key,arr)=>{\n          return val.postChild === name\n        })\n\n        \n      \n\n        let userLiked;\n      \n        let postLikedUpdate = []\n\n        post.forEach(val =>{\n          postLikedUpdate = val.liked\n          val.liked.forEach((val,index) =>{\n            userLiked = val.userUID === this.state.user.uid\n          })\n          if(userLiked){\n            postLikedUpdate = val.liked.filter((val,index,arr)  =>{\n              return val.userUID !== this.state.user.uid\n            })\n          }else{\n            let user ={username: this.state.user.displayName, userUID: this.state.user.uid};\n            postLikedUpdate.push(user);\n          }\n          \n        })\n\n        \n        let postUpdate\n        post.forEach(val=>{\n          postUpdate ={\n            postChild: val.postChild,\n            createByUid: val.createByUid,\n            createByName: val.createByName,\n            avatar: val.avatar,\n            timestamp: val.timestamp,\n            postImages: val.postImages,\n            postText: val.text,\n            liked: postLikedUpdate\n          }\n          console.log(val.postImages)\n        \n           \n        })\n\n        console.log(postUpdate)\n        \n        this.state.databaseRef.child(name).set(postUpdate).then(()=>console.log(\"like clicked\")).catch(err=>console.log(err))\n         \n      \n      }\n\n      \n\n      \n      displayImagePost = ({imagePost}) =>(\n        // this.state.uploadStatus.includes('uploading')  ? \n        // <Segment size='large' loading={this.state.percentUploaded < 100} >\n        //   <List horizontal>\n          \n        //       {imagePost.map((val,key) => (\n        //         <List.Item key={key+uuid} style={{marginRight: '15px'}}> \n\n        //             <Image  rounded size='small' key={val.downloadURL} src={val.downloadURL} label={{as: 'a' ,name: key, corner:'right', icon:'remove',size: 'mini',color:'red',onClick: this.removeImagePost}} /> \n                \n        //         </List.Item> ) )}\n                \n        //     <List.Item>\n        //       <Icon style={{cursor: 'pointer', boder: 'solid 2px '}} color='black' inverted name='add' size='big' onClick={this.openModal} />\n        //     </List.Item>\n        //   </List>\n          \n        // </Segment> : ''\n        <Dimmer.Dimmable  > \n          <Dimmer inverted active={this.state.percentUploaded > 0 && this.state.percentUploaded <100}>\n            <Loader>Loading</Loader>\n           \n          </Dimmer>\n\n          <List horizontal>\n          \n              {imagePost.map((val,key) => (\n                  <List.Item key={key+uuid} style={{marginRight: '15px'}}> \n  \n                      <Image wrapped rounded size='small' key={val.downloadURL} src={val.downloadURL} label={{as: 'a' ,name: key, corner:'right', icon:'remove',size: 'tiny',color:'red',onClick: this.removeImagePost}} /> \n                  \n                  </List.Item> ) )}\n                  \n              {imagePost.length > 0 ? \n                <List.Item>\n              <Icon link color='black' inverted name='add' size='big' onClick={this.openModal} />\n            </List.Item>\n            : ''  \n          }\n            </List>\n            \n    \n     \n          \n        </Dimmer.Dimmable>\n      )\n      \n      deleteImageFromStorge = imagePath =>{\n          if(imagePath){\n            this.state.storeRef.child(imagePath).delete().then(() => console.log(\"deleted\")).catch(err=> console.log(err))\n          }\n          \n      }\n\n      removeImagePost = event =>{\n        event.preventDefault();\n        let removeIndex = event.target.name;\n        \n        this.deleteImageFromStorge(this.state.imagePost[removeIndex].imagePath)\n\n        const newImagePost = this.state.imagePost.filter((value,index,arr) =>{\n          return index != removeIndex\n        })\n        \n\n        this.setState({imagePost : newImagePost})\n        \n        \n      }\n      \n    \n\n    render(){\n        const {user,post,postFromDatabase} = this.state;\n       \n\n        return(\n      <React.Fragment>\n        \n        <FileModal fileModal={this.state.fileModal}\n                   uploadFile = {this.uploadFile}\n                   closeModal = {this.closeModal}\n        />\n        \n    <Segment stacked>\n    \n        <Header as='h3' block>\n        \n          <Header.Content style={{opacity: 0.6}}>Tạo Bài Viết <Icon name='edit outline' /></Header.Content>\n        \n        </Header>\n        \n          {this.displayImagePost(this.state)}\n        \n\n    \n\n        <Form style={{marginTop: '5px'}}>\n         <Form.Group >\n           <Image avatar src={user.photoURL}/>\n           <TextArea placeholder=\"What do you thing ?  \"   value={post} onChange={this.handlePostChange} >\n            \n          </TextArea>\n         </Form.Group>\n        \n        </Form>\n\n      <Button.Group  compact fluid widths={4}  >\n        \n      <Button inverted style={{background: '#6FBE42'}}  onClick={this.openModal}  >\n              <Icon name='photo' /> Ảnh/Video\n            </Button>\n            <Button inverted style={{background: '#6FBE42'}}>\n              <Icon name='user plus' /> Tag Friends\n            </Button>\n         \n         \n            <Button inverted style={{background: '#6FBE42'}}>\n              <Icon name='smile outline' /> Cảm Xúc\n            </Button>\n          \n            <Button inverted style={{background: '#6FBE42'}}>\n              <Icon name='list' /> Khác\n             </Button>\n      </Button.Group>\n     \n  \n      {this.state.post.length > 0 || this.state.imagePost.length >0 ? <Button onClick={this.savePost} fluid style={{marginTop: '20px',background:'#ecf7e7'}}>\n        Post\n      </Button> : ''}\n        \n    </Segment>\n        \n      \n    \n      {postFromDatabase.length > 0 ? (\n        postFromDatabase.map((val, key) =>(\n          \n          <Segment  >\n      \n          <Feed size='large'>\n              <Feed.Event>\n              <Feed.Label image ={val.avatar} />\n              <Feed.Content>\n                <Feed.Summary> \n                <Dropdown\n                  inline\n                  closeOnChange\n                  options={this.state.postDrowdownOptions}\n                  pointing='top right'\n                  icon={null}\n                  style={{float: 'right', zIndex: 1000}}\n                  trigger={<i style={{opacity: 0.5}} className=\"fas fa-ellipsis-h\"></i>}\n                />\n                <Feed.User content={val.createByName} />\n                <Feed.Date>\n\n                {moment(val.timestamp).locale('vi').fromNow()}\n                {/* {moment(val.timestamp).fromNow()} */}\n               \n                  \n                </Feed.Date>\n                \n                </Feed.Summary>\n                <Feed.Summary>\n                  <i style={{opacity: 0.5, fontSize: 14}} className=\"fas fa-globe-asia\"></i> \n               \n                </Feed.Summary>\n\n                \n                 \n           \n              </Feed.Content>\n              \n              </Feed.Event>\n            \n          </Feed>\n          \n          <Feed size='large'  >\n          \n          <Feed.Event>\n            <Feed.Content >\n              <Container fluid text textAlign='justified' content={val.postText}>\n\n              </Container>\n              {val.postImages ? (\n                val.postImages.map((value,key) =>(        \n                    <List key={val.createByUid+val.timestamp+uuid()+hash(value.downloadURL)} horizontal  >\n                      <List.Item key={'list'+val.createByUid+val.timestamp+uuid()+hash(value.downloadURL)}   as='a'  >\n                       \n                       \n                          <Image centered fluid key={'image'+val.createByUid+val.timestamp+uuid()+hash(value.downloadURL)} src={value.downloadURL} name={value.downloadURL} onClick={this.openImageModal} />\n                          {/* <img style={{padding: '10px 10px'}} src={value.downloadURL} name={value.downloadURL} onClick={this.openImageModal} />\n                     */}\n                        <ImageModal \n                         \n                          imageModal={this.state.imageModalStatus} \n                          closeModal={this.closeImageModal}\n                          imageURL={this.state.imageModalURL} />\n                      </List.Item>\n                    </List>\n                    \n                \n                ))\n              ) : ''}\n               \n             \n            </Feed.Content>\n            \n          </Feed.Event>\n          <Divider />\n\n          <Container fluid> \n            <Icon name='thumbs up' color='blue'  size='small' /> <span style={{opacity: 0.6}}>20 likes</span>\n            <span style={{float: 'right',opacity: 0.6}} >20 comnents</span>\n          </Container>\n          <Divider />\n          \n            <Button.Group fluid   >\n            <Button name={val.postChild} onClick={this.handleLikeClicked} basic size='medium'>\n            \n                <Icon name='thumbs up' color='blue' /> Like\n              </Button>\n              <Button basic size='medium' >\n                <Icon name='comment outline' /> Comment\n              </Button>\n              <Button  basic size='medium' >\n                <Icon name='share' /> Share \n              </Button>\n            </Button.Group>\n      \n         \n        \n      </Feed>\n      </Segment>\n        ))\n      ) :  ''}\n\n     \n\n \n\n      \n  </React.Fragment>\n \n           \n            \n        )\n    }\n\n}\n\nexport default NewsFeeds"]},"metadata":{},"sourceType":"module"}