{"ast":null,"code":"'use strict';\n\nconst LRU = require('lru-cache');\n\nconst MAX_SIZE = 50 * 1024 * 1024; // 50MB\n\nconst MAX_AGE = 3 * 60 * 1000;\nlet MEMOIZED = new LRU({\n  max: MAX_SIZE,\n  maxAge: MAX_AGE,\n  length: (entry, key) => {\n    if (key.startsWith('key:')) {\n      return entry.data.length;\n    } else if (key.startsWith('digest:')) {\n      return entry.length;\n    }\n  }\n});\nmodule.exports.clearMemoized = clearMemoized;\n\nfunction clearMemoized() {\n  const old = {};\n  MEMOIZED.forEach((v, k) => {\n    old[k] = v;\n  });\n  MEMOIZED.reset();\n  return old;\n}\n\nmodule.exports.put = put;\n\nfunction put(cache, entry, data, opts) {\n  pickMem(opts).set(\"key:\".concat(cache, \":\").concat(entry.key), {\n    entry,\n    data\n  });\n  putDigest(cache, entry.integrity, data, opts);\n}\n\nmodule.exports.put.byDigest = putDigest;\n\nfunction putDigest(cache, integrity, data, opts) {\n  pickMem(opts).set(\"digest:\".concat(cache, \":\").concat(integrity), data);\n}\n\nmodule.exports.get = get;\n\nfunction get(cache, key, opts) {\n  return pickMem(opts).get(\"key:\".concat(cache, \":\").concat(key));\n}\n\nmodule.exports.get.byDigest = getDigest;\n\nfunction getDigest(cache, integrity, opts) {\n  return pickMem(opts).get(\"digest:\".concat(cache, \":\").concat(integrity));\n}\n\nclass ObjProxy {\n  constructor(obj) {\n    this.obj = obj;\n  }\n\n  get(key) {\n    return this.obj[key];\n  }\n\n  set(key, val) {\n    this.obj[key] = val;\n  }\n\n}\n\nfunction pickMem(opts) {\n  if (!opts || !opts.memoize) {\n    return MEMOIZED;\n  } else if (opts.memoize.get && opts.memoize.set) {\n    return opts.memoize;\n  } else if (typeof opts.memoize === 'object') {\n    return new ObjProxy(opts.memoize);\n  } else {\n    return MEMOIZED;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}