{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Template = require(\"../Template\");\n\nmodule.exports = class NodeMainTemplatePlugin {\n  constructor(asyncChunkLoading) {\n    this.asyncChunkLoading = asyncChunkLoading;\n  }\n\n  apply(mainTemplate) {\n    const needChunkOnDemandLoadingCode = chunk => {\n      for (const chunkGroup of chunk.groupsIterable) {\n        if (chunkGroup.getNumberOfChildren() > 0) return true;\n      }\n\n      return false;\n    };\n\n    const asyncChunkLoading = this.asyncChunkLoading;\n    mainTemplate.hooks.localVars.tap(\"NodeMainTemplatePlugin\", (source, chunk) => {\n      if (needChunkOnDemandLoadingCode(chunk)) {\n        return Template.asString([source, \"\", \"// object to store loaded chunks\", '// \"0\" means \"already loaded\"', \"var installedChunks = {\", Template.indent(chunk.ids.map(id => \"\".concat(JSON.stringify(id), \": 0\")).join(\",\\n\")), \"};\"]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.requireExtensions.tap(\"NodeMainTemplatePlugin\", (source, chunk) => {\n      if (needChunkOnDemandLoadingCode(chunk)) {\n        return Template.asString([source, \"\", \"// uncaught error handler for webpack runtime\", \"\".concat(mainTemplate.requireFn, \".oe = function(err) {\"), Template.indent([\"process.nextTick(function() {\", Template.indent(\"throw err; // catch this error by using import().catch()\"), \"});\"]), \"};\"]);\n      }\n\n      return source;\n    });\n    mainTemplate.hooks.requireEnsure.tap(\"NodeMainTemplatePlugin\", (source, chunk, hash) => {\n      const chunkFilename = mainTemplate.outputOptions.chunkFilename;\n      const chunkMaps = chunk.getChunkMaps();\n      const insertMoreModules = [\"var moreModules = chunk.modules, chunkIds = chunk.ids;\", \"for(var moduleId in moreModules) {\", Template.indent(mainTemplate.renderAddModule(hash, chunk, \"moduleId\", \"moreModules[moduleId]\")), \"}\"];\n\n      if (asyncChunkLoading) {\n        return Template.asString([source, \"\", \"// ReadFile + VM.run chunk loading for javascript\", \"\", \"var installedChunkData = installedChunks[chunkId];\", 'if(installedChunkData !== 0) { // 0 means \"already installed\".', Template.indent(['// array of [resolve, reject, promise] means \"currently loading\"', \"if(installedChunkData) {\", Template.indent([\"promises.push(installedChunkData[2]);\"]), \"} else {\", Template.indent([\"// load the chunk and return promise to it\", \"var promise = new Promise(function(resolve, reject) {\", Template.indent([\"installedChunkData = installedChunks[chunkId] = [resolve, reject];\", \"var filename = require('path').join(__dirname, \" + mainTemplate.getAssetPath(JSON.stringify(\"/\".concat(chunkFilename)), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n          chunk: {\n            id: '\" + chunkId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n            hashWithLength: length => {\n              const shortChunkHashMap = {};\n\n              for (const chunkId of Object.keys(chunkMaps.hash)) {\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n            },\n            contentHash: {\n              javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n            },\n            contentHashWithLength: {\n              javascript: length => {\n                const shortContentHashMap = {};\n                const contentHash = chunkMaps.contentHash.javascript;\n\n                for (const chunkId of Object.keys(contentHash)) {\n                  if (typeof contentHash[chunkId] === \"string\") {\n                    shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n              }\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n          },\n          contentHashType: \"javascript\"\n        }) + \");\", \"require('fs').readFile(filename, 'utf-8',  function(err, content) {\", Template.indent([\"if(err) return reject(err);\", \"var chunk = {};\", \"require('vm').runInThisContext('(function(exports, require, __dirname, __filename) {' + content + '\\\\n})', filename)\" + \"(chunk, require, require('path').dirname(filename), filename);\"].concat(insertMoreModules).concat([\"var callbacks = [];\", \"for(var i = 0; i < chunkIds.length; i++) {\", Template.indent([\"if(installedChunks[chunkIds[i]])\", Template.indent([\"callbacks = callbacks.concat(installedChunks[chunkIds[i]][0]);\"]), \"installedChunks[chunkIds[i]] = 0;\"]), \"}\", \"for(i = 0; i < callbacks.length; i++)\", Template.indent(\"callbacks[i]();\")])), \"});\"]), \"});\", \"promises.push(installedChunkData[2] = promise);\"]), \"}\"]), \"}\"]);\n      } else {\n        const request = mainTemplate.getAssetPath(JSON.stringify(\"./\".concat(chunkFilename)), {\n          hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n          hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n          chunk: {\n            id: '\" + chunkId + \"',\n            hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n            hashWithLength: length => {\n              const shortChunkHashMap = {};\n\n              for (const chunkId of Object.keys(chunkMaps.hash)) {\n                if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                  shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n                }\n              }\n\n              return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n            },\n            contentHash: {\n              javascript: \"\\\" + \".concat(JSON.stringify(chunkMaps.contentHash.javascript), \"[chunkId] + \\\"\")\n            },\n            contentHashWithLength: {\n              javascript: length => {\n                const shortContentHashMap = {};\n                const contentHash = chunkMaps.contentHash.javascript;\n\n                for (const chunkId of Object.keys(contentHash)) {\n                  if (typeof contentHash[chunkId] === \"string\") {\n                    shortContentHashMap[chunkId] = contentHash[chunkId].substr(0, length);\n                  }\n                }\n\n                return \"\\\" + \".concat(JSON.stringify(shortContentHashMap), \"[chunkId] + \\\"\");\n              }\n            },\n            name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n          },\n          contentHashType: \"javascript\"\n        });\n        return Template.asString([source, \"\", \"// require() chunk loading for javascript\", \"\", '// \"0\" is the signal for \"already loaded\"', \"if(installedChunks[chunkId] !== 0) {\", Template.indent([\"var chunk = require(\".concat(request, \");\")].concat(insertMoreModules).concat([\"for(var i = 0; i < chunkIds.length; i++)\", Template.indent(\"installedChunks[chunkIds[i]] = 0;\")])), \"}\"]);\n      }\n    });\n    mainTemplate.hooks.hotBootstrap.tap(\"NodeMainTemplatePlugin\", (source, chunk, hash) => {\n      const hotUpdateChunkFilename = mainTemplate.outputOptions.hotUpdateChunkFilename;\n      const hotUpdateMainFilename = mainTemplate.outputOptions.hotUpdateMainFilename;\n      const chunkMaps = chunk.getChunkMaps();\n      const currentHotUpdateChunkFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateChunkFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\"),\n        chunk: {\n          id: '\" + chunkId + \"',\n          hash: \"\\\" + \".concat(JSON.stringify(chunkMaps.hash), \"[chunkId] + \\\"\"),\n          hashWithLength: length => {\n            const shortChunkHashMap = {};\n\n            for (const chunkId of Object.keys(chunkMaps.hash)) {\n              if (typeof chunkMaps.hash[chunkId] === \"string\") {\n                shortChunkHashMap[chunkId] = chunkMaps.hash[chunkId].substr(0, length);\n              }\n            }\n\n            return \"\\\" + \".concat(JSON.stringify(shortChunkHashMap), \"[chunkId] + \\\"\");\n          },\n          name: \"\\\" + (\".concat(JSON.stringify(chunkMaps.name), \"[chunkId]||chunkId) + \\\"\")\n        }\n      });\n      const currentHotUpdateMainFilename = mainTemplate.getAssetPath(JSON.stringify(hotUpdateMainFilename), {\n        hash: \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash), \" + \\\"\"),\n        hashWithLength: length => \"\\\" + \".concat(mainTemplate.renderCurrentHashCode(hash, length), \" + \\\"\")\n      });\n      return Template.getFunctionContent(asyncChunkLoading ? require(\"./NodeMainTemplateAsync.runtime\") : require(\"./NodeMainTemplate.runtime\")).replace(/\\$require\\$/g, mainTemplate.requireFn).replace(/\\$hotMainFilename\\$/g, currentHotUpdateMainFilename).replace(/\\$hotChunkFilename\\$/g, currentHotUpdateChunkFilename);\n    });\n    mainTemplate.hooks.hash.tap(\"NodeMainTemplatePlugin\", hash => {\n      hash.update(\"node\");\n      hash.update(\"4\");\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}