{"ast":null,"code":"\"use strict\";\n\nconst errorMessage = (schema, data, message) => ({\n  keyword: \"absolutePath\",\n  params: {\n    absolutePath: data\n  },\n  message: message,\n  parentSchema: schema\n});\n\nconst getErrorFor = (shouldBeAbsolute, data, schema) => {\n  const message = shouldBeAbsolute ? \"The provided value \".concat(JSON.stringify(data), \" is not an absolute path!\") : \"A relative path is expected. However, the provided value \".concat(JSON.stringify(data), \" is an absolute path!\");\n  return errorMessage(schema, data, message);\n};\n\nmodule.exports = ajv => ajv.addKeyword(\"absolutePath\", {\n  errors: true,\n  type: \"string\",\n\n  compile(expected, schema) {\n    function callback(data) {\n      let passes = true;\n      const isExclamationMarkPresent = data.includes(\"!\");\n      const isCorrectAbsoluteOrRelativePath = expected === /^(?:[A-Za-z]:\\\\|\\/)/.test(data);\n\n      if (isExclamationMarkPresent) {\n        callback.errors = [errorMessage(schema, data, \"The provided value \".concat(JSON.stringify(data), \" contains exclamation mark (!) which is not allowed because it's reserved for loader syntax.\"))];\n        passes = false;\n      }\n\n      if (!isCorrectAbsoluteOrRelativePath) {\n        callback.errors = [getErrorFor(expected, data, schema)];\n        passes = false;\n      }\n\n      return passes;\n    }\n\n    callback.errors = [];\n    return callback;\n  }\n\n});","map":null,"metadata":{},"sourceType":"script"}