{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\"; // TODO webpack 5 remove this plugin\n// It has been splitted into separate plugins for modules and chunks\n\nclass OccurrenceOrderPlugin {\n  constructor(preferEntry) {\n    if (preferEntry !== undefined && typeof preferEntry !== \"boolean\") {\n      throw new Error(\"Argument should be a boolean.\\nFor more info on this plugin, see https://webpack.js.org/plugins/\");\n    }\n\n    this.preferEntry = preferEntry;\n  }\n\n  apply(compiler) {\n    const preferEntry = this.preferEntry;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderPlugin\", compilation => {\n      compilation.hooks.optimizeModuleOrder.tap(\"OccurrenceOrderPlugin\", modules => {\n        const occursInInitialChunksMap = new Map();\n        const occursInAllChunksMap = new Map();\n        const initialChunkChunkMap = new Map();\n        const entryCountMap = new Map();\n\n        for (const m of modules) {\n          let initial = 0;\n          let entry = 0;\n\n          for (const c of m.chunksIterable) {\n            if (c.canBeInitial()) initial++;\n            if (c.entryModule === m) entry++;\n          }\n\n          initialChunkChunkMap.set(m, initial);\n          entryCountMap.set(m, entry);\n        }\n\n        const countOccursInEntry = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n\n          return sum + initialChunkChunkMap.get(r.module);\n        };\n\n        const countOccurs = (sum, r) => {\n          if (!r.module) {\n            return sum;\n          }\n\n          let factor = 1;\n\n          if (typeof r.dependency.getNumberOfIdOccurrences === \"function\") {\n            factor = r.dependency.getNumberOfIdOccurrences();\n          }\n\n          if (factor === 0) {\n            return sum;\n          }\n\n          return sum + factor * r.module.getNumberOfChunks();\n        };\n\n        if (preferEntry) {\n          for (const m of modules) {\n            const result = m.reasons.reduce(countOccursInEntry, 0) + initialChunkChunkMap.get(m) + entryCountMap.get(m);\n            occursInInitialChunksMap.set(m, result);\n          }\n        }\n\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const m of modules) {\n          const result = m.reasons.reduce(countOccurs, 0) + m.getNumberOfChunks() + entryCountMap.get(m);\n          occursInAllChunksMap.set(m, result);\n          originalOrder.set(m, i++);\n        }\n\n        modules.sort((a, b) => {\n          if (preferEntry) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n\n          const aOccurs = occursInAllChunksMap.get(a);\n          const bOccurs = occursInAllChunksMap.get(b);\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n      compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderPlugin\", chunks => {\n        const occursInInitialChunksMap = new Map();\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const c of chunks) {\n          let occurs = 0;\n\n          for (const chunkGroup of c.groupsIterable) {\n            for (const parent of chunkGroup.parentsIterable) {\n              if (parent.isInitial()) occurs++;\n            }\n          }\n\n          occursInInitialChunksMap.set(c, occurs);\n          originalOrder.set(c, i++);\n        }\n\n        chunks.sort((a, b) => {\n          const aEntryOccurs = occursInInitialChunksMap.get(a);\n          const bEntryOccurs = occursInInitialChunksMap.get(b);\n          if (aEntryOccurs > bEntryOccurs) return -1;\n          if (aEntryOccurs < bEntryOccurs) return 1;\n          const aOccurs = a.getNumberOfGroups();\n          const bOccurs = b.getNumberOfGroups();\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = OccurrenceOrderPlugin;","map":null,"metadata":{},"sourceType":"script"}