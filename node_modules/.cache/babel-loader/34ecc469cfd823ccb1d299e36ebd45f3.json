{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Watchpack = require(\"watchpack\");\n\nconst objectToMap = require(\"../util/objectToMap\");\n\nclass NodeWatchFileSystem {\n  constructor(inputFileSystem) {\n    this.inputFileSystem = inputFileSystem;\n    this.watcherOptions = {\n      aggregateTimeout: 0\n    };\n    this.watcher = new Watchpack(this.watcherOptions);\n  }\n\n  watch(files, dirs, missing, startTime, options, callback, callbackUndelayed) {\n    if (!Array.isArray(files)) {\n      throw new Error(\"Invalid arguments: 'files'\");\n    }\n\n    if (!Array.isArray(dirs)) {\n      throw new Error(\"Invalid arguments: 'dirs'\");\n    }\n\n    if (!Array.isArray(missing)) {\n      throw new Error(\"Invalid arguments: 'missing'\");\n    }\n\n    if (typeof callback !== \"function\") {\n      throw new Error(\"Invalid arguments: 'callback'\");\n    }\n\n    if (typeof startTime !== \"number\" && startTime) {\n      throw new Error(\"Invalid arguments: 'startTime'\");\n    }\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"Invalid arguments: 'options'\");\n    }\n\n    if (typeof callbackUndelayed !== \"function\" && callbackUndelayed) {\n      throw new Error(\"Invalid arguments: 'callbackUndelayed'\");\n    }\n\n    const oldWatcher = this.watcher;\n    this.watcher = new Watchpack(options);\n\n    if (callbackUndelayed) {\n      this.watcher.once(\"change\", callbackUndelayed);\n    }\n\n    const cachedFiles = files;\n    const cachedDirs = dirs;\n    this.watcher.once(\"aggregated\", (changes, removals) => {\n      changes = changes.concat(removals);\n\n      if (this.inputFileSystem && this.inputFileSystem.purge) {\n        this.inputFileSystem.purge(changes);\n      }\n\n      const times = objectToMap(this.watcher.getTimes());\n      files = new Set(files);\n      dirs = new Set(dirs);\n      missing = new Set(missing);\n      removals = new Set(removals.filter(file => files.has(file)));\n      callback(null, changes.filter(file => files.has(file)).sort(), changes.filter(file => dirs.has(file)).sort(), changes.filter(file => missing.has(file)).sort(), times, times, removals);\n    });\n    this.watcher.watch(cachedFiles.concat(missing), cachedDirs.concat(missing), startTime);\n\n    if (oldWatcher) {\n      oldWatcher.close();\n    }\n\n    return {\n      close: () => {\n        if (this.watcher) {\n          this.watcher.close();\n          this.watcher = null;\n        }\n      },\n      pause: () => {\n        if (this.watcher) {\n          this.watcher.pause();\n        }\n      },\n      getFileTimestamps: () => {\n        if (this.watcher) {\n          return objectToMap(this.watcher.getTimes());\n        } else {\n          return new Map();\n        }\n      },\n      getContextTimestamps: () => {\n        if (this.watcher) {\n          return objectToMap(this.watcher.getTimes());\n        } else {\n          return new Map();\n        }\n      }\n    };\n  }\n\n}\n\nmodule.exports = NodeWatchFileSystem;","map":null,"metadata":{},"sourceType":"script"}