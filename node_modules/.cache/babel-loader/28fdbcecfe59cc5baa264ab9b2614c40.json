{"ast":null,"code":"var _jsxFileName = \"/home/hari/Desktop/web-dev/React/SNStudent/src/components/NewsFeeds/CreatePostModal.js\";\nimport React from 'react';\nimport { Modal, Header, Form, Image, Button, Input, TextArea, Segment, Grid, Label, Icon, GridColumn } from 'semantic-ui-react';\nimport { Picker, emojiIndex } from 'emoji-mart';\nimport 'emoji-mart/css/emoji-mart.css';\nimport uuid from 'uuidv4';\nimport firebase from '../../firebase';\nimport FileModal from './FileModal';\nimport ImageResize from '../ImageResize';\nimport pictureIcon from \"../../Images/picture.svg\";\nimport tagFriends from \"../../Images/tagfriends.svg\";\nimport locationIcon from \"../../Images/location.svg\";\nimport editIcon from \"../../Images/edit.svg\";\nimport smileIcon from \"../../Images/smile.svg\";\nimport { breakStatement } from '@babel/types';\nimport { prototype } from 'module';\n\nclass CreatePostModal extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      postText: '',\n      postImages: [],\n      emojiPicker: false,\n      selectionStart: 0,\n      fileModal: false,\n      uploadTask: null,\n      uploadPercent: 0,\n      storeRef: firebase.storage().ref(),\n      postsRef: firebase.database().ref('posts'),\n      files: []\n    };\n\n    this.handleTogglePicker = () => {\n      this.setState({\n        emojiPicker: !this.state.emojiPicker\n      });\n    };\n\n    this.handlePostChange = event => {\n      this.setState({\n        postText: event.target.value\n      });\n    };\n\n    this.handleEmojiSelect = emoji => {\n      console.log(emoji);\n      const oldPost = this.state.postText;\n      const newPost = this.addEmojiToInputWithSeletionStart(oldPost, this.state.selectionStart, this.colonToUnicode(emoji.colons));\n      this.setState({\n        postText: newPost\n      });\n    };\n\n    this.colonToUnicode = emojiMessage => {\n      let x = emojiMessage.replace(/:/g, \"\");\n      let emoji = emojiIndex.emojis[x];\n\n      if (emoji !== undefined) {\n        let unicode = emoji.native;\n\n        if (unicode !== undefined) {\n          return unicode;\n        } else {\n          return null;\n        }\n      }\n    };\n\n    this.addEmojiToInputWithSeletionStart = (post, selectionStart, emoji) => {\n      if (post) {\n        if (emoji) {\n          return post.substring(0, selectionStart) + emoji + post.substring(selectionStart, post.length);\n        } else {\n          return post;\n        }\n      } else {\n        if (emoji) {\n          return post + emoji;\n        }\n      }\n    };\n\n    this.inputClicked = event => {\n      this.setState({\n        selectionStart: event.target.selectionStart\n      });\n    };\n\n    this.inputKeyPressed = event => {\n      this.setState({\n        selectionStart: event.target.selectionStart\n      });\n    };\n\n    this.openFileModal = () => {\n      this.setState({\n        fileModal: true\n      });\n    };\n\n    this.closeFileModal = () => {\n      this.setState({\n        fileModal: false\n      });\n    };\n\n    this.fileStateToProp = files => {\n      this.setState({\n        files: this.state.files.concat(files)\n      });\n    };\n\n    this.uploadFile = () => {\n      if (this.state.files.length > 0) {\n        this.state.files.forEach(file => {\n          const filePath = this.props.user.uid + '/media/image/' + uuid() + '.jpg';\n          const uploadTask = this.state.storeRef.child(filePath).put(file.file, file.metadata);\n          this.setState({\n            uploadTask\n          }, () => {\n            this.state.uploadTask.on('state_changed', snap => {\n              const uploadPercent = Math.round(snap.bytesTransferred / snap.totalBytes * 100);\n              this.setState({\n                uploadPercent\n              }, () => {\n                console.log(this.state.uploadPercent);\n              });\n            });\n          });\n        });\n      } // const uploadTask = this.state.storeRef.child(filePath).put(file,metadata);\n      // this.setState({uploadTask},()=>{\n      //     this.state.uploadTask.on('state_changed', snap =>{\n      //         const uploadPercent = Math.round((snap.bytesTransferred / snap.totalBytes)*100) \n      //         this.setState({uploadPercent},()=>{\n      //             if(this.state.uploadPercent == 100){\n      //                 setTimeout(()=>{\n      //                     this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadURL =>{\n      //                         const image = [];\n      //                         image.push({downloadURL: downloadURL, imagePath: this.state.uploadTask.location_.path})\n      //                         this.setState({postImages: this.state.postImages.concat(image)},()=>{\n      //                             console.log(this.state.postImages)\n      //                         })\n      //                     })\n      //                 },800 - this.state.uploadPercent)\n      //             }\n      //         })\n      //     });\n      // })\n\n    };\n\n    this.savePost = event => {\n      event.preventDefault(); // const postChild = this.props.user.uid+uuid()+'/post';\n      // const postCreate ={\n      //   postChild: postChild,\n      //   createByUid: this.props.user.uid,\n      //   createByName: this.props.user.displayName,\n      //   avatar: this.props.user.photoURL ,\n      //   timestamp: Date.now(),\n      //   postImages: Array().concat(this.state.postImages),\n      //   postText: this.state.postText,\n      //   liked: [{username: 'null', userUID: 'null'}]\n      // }\n      // this.state.postsRef.child(postChild).set(postCreate).then(()=>{\n      //     this.setState({postText: '', postImages: []});\n      //     this.props.closeModal()\n      // })\n\n      this.uploadFile();\n    };\n\n    this.getLimitImage = key => {\n      return key < 4 ? true : false;\n    };\n\n    this.getImageCanvas = imageUrl => {\n      let canvasUrl = [];\n      this.image = new ImageResize(imageUrl, 150, getCanvasUrl => {\n        canvasUrl.push(getCanvasUrl);\n      });\n      return canvasUrl.join('');\n    };\n\n    this.displayImages = files => {\n      return React.createElement(Grid, {\n        reversed: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(Grid.Row, {\n        widths: \"equal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, files.map((val, key) => this.getLimitImage(key) ? React.createElement(Grid.Column, {\n        style: {\n          width: '150px',\n          height: '150x'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 204\n        },\n        __self: this\n      }, console.log(this.getImageCanvas(val.url)), React.createElement(Image, {\n        fluid: true,\n        centered: true,\n        wrapped: true,\n        bordered: true,\n        key: key,\n        src: val.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206\n        },\n        __self: this\n      })) : ''), files.length > 4 ? React.createElement(Grid.Column, {\n        style: {\n          width: '150px',\n          height: '150x'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: \"https://react.semantic-ui.com/images/wireframe/square-image.png\",\n        fluid: true,\n        centered: true,\n        wrapped: true,\n        style: {\n          objectFit: 'cover',\n          width: 'auto',\n          height: 'auto'\n        },\n        bordered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 216\n        },\n        __self: this\n      })) : '', files.length > 0 ? React.createElement(Grid.Column, {\n        style: {\n          width: '150px',\n          height: '150x'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(Image, {\n        src: \"https://react.semantic-ui.com/images/wireframe/square-image.png\",\n        fluid: true,\n        centered: true,\n        wrapped: true,\n        style: {\n          objectFit: 'cover',\n          width: 'auto',\n          height: 'auto'\n        },\n        bordered: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      })) : ''));\n    };\n  }\n\n  render() {\n    const _this$state = this.state,\n          postText = _this$state.postText,\n          emojiPicker = _this$state.emojiPicker,\n          files = _this$state.files;\n    const _this$props = this.props,\n          user = _this$props.user,\n          modal = _this$props.modal,\n          closeModal = _this$props.closeModal;\n    return React.createElement(\"div\", {\n      className: \"wrapper\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }, React.createElement(FileModal, {\n      files: this.state.files,\n      fileStateToProp: this.fileStateToProp,\n      fileModal: this.state.fileModal,\n      uploadFile: this.uploadFile,\n      closeModal: this.closeFileModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 240\n      },\n      __self: this\n    }), React.createElement(Modal, {\n      centered: true,\n      open: modal,\n      onClose: closeModal,\n      closeIcon: true,\n      style: {\n        top: '10%',\n        transform: 'translateY(-10%)',\n        maxWidth: '1000px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242\n      },\n      __self: this\n    }, React.createElement(Modal.Header, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }, React.createElement(Header, {\n      as: \"h3\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 244\n      },\n      __self: this\n    }, React.createElement(Header.Content, {\n      style: {\n        opacity: 0.6\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }, \" \", React.createElement(Image, {\n      spaced: \"right\",\n      style: {\n        width: '30px'\n      },\n      src: editIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 246\n      },\n      __self: this\n    }), \"T\\u1EA1o B\\xE0i Vi\\u1EBFt  \"))), React.createElement(Modal.Content, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 250\n      },\n      __self: this\n    }, React.createElement(Form, {\n      style: {\n        marginTop: '5px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 251\n      },\n      __self: this\n    }, React.createElement(Form.Group, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 252\n      },\n      __self: this\n    }, React.createElement(Image, {\n      inline: true,\n      size: \"tiny\",\n      avatar: true,\n      src: user.photoURL,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 253\n      },\n      __self: this\n    }), React.createElement(Form.Field, {\n      style: {\n        width: '100%'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, React.createElement(TextArea, {\n      rows: 1,\n      value: postText,\n      type: \"text\",\n      placeholder: \"B\\u1EA1n mu\\u1ED1n chia s\\u1EBB \\u0111i\\u1EC1u g\\xEC ?\",\n      transparent: \"true\",\n      onClick: this.inputClicked,\n      onChange: this.handlePostChange,\n      style: {\n        height: '100%',\n        fontSize: 16,\n        float: 'left',\n        border: 'none',\n        background: 'none',\n        resize: 'none'\n      },\n      onKeyUp: this.inputKeyPressed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 259\n      },\n      __self: this\n    }))), React.createElement(Button.Group, {\n      widths: 4,\n      size: \"small\",\n      compact: true,\n      fluid: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 277\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.openFileModal,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 278\n      },\n      __self: this\n    }, React.createElement(Image, {\n      style: {\n        width: '30px'\n      },\n      spaced: \"right\",\n      centered: true,\n      src: pictureIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 279\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 281\n      },\n      __self: this\n    }, \"\\u1EA2nh/Video\")), React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 285\n      },\n      __self: this\n    }, React.createElement(Image, {\n      style: {\n        width: '30px'\n      },\n      spaced: \"right\",\n      centered: true,\n      src: tagFriends,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 286\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 288\n      },\n      __self: this\n    }, \"G\\u1EAFn th\\u1EBB b\\u1EA1n b\\xE8\")), React.createElement(Button, {\n      onClick: this.handleTogglePicker,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 292\n      },\n      __self: this\n    }, React.createElement(Image, {\n      style: {\n        width: '30px'\n      },\n      spaced: \"right\",\n      centered: true,\n      src: smileIcon,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 293\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      style: {\n        marginLeft: '10px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 295\n      },\n      __self: this\n    }, \"C\\u1EA3m x\\xFAc \")), emojiPicker ? React.createElement(\"div\", {\n      onMouseLeave: this.handleTogglePicker,\n      className: \"emoji-mart-select\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 302\n      },\n      __self: this\n    }, React.createElement(Picker, {\n      i18n: {\n        search: 'Tìm kiếm',\n        categories: {\n          search: 'Tìm kiếm theo mục',\n          recent: 'Đã sử dụng gần đây'\n        }\n      },\n      onSelect: this.handleEmojiSelect,\n      set: \"facebook\",\n      emoji: \"point_up\",\n      style: {\n        position: \"absolute\",\n        left: '55%',\n        top: '65%',\n        zIndex: '1000'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 303\n      },\n      __self: this\n    })) : ''), React.createElement(Form.Button, {\n      onClick: this.savePost,\n      color: \"green\",\n      fluid: true,\n      style: {\n        marginTop: '50px'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 321\n      },\n      __self: this\n    }, \"\\u0110\\u0103ng b\\xE0i\")), files.length > 0 ? React.createElement(Segment, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }, this.displayImages(files)) : '')));\n  }\n\n}\n\nexport default CreatePostModal;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/NewsFeeds/CreatePostModal.js"],"names":["React","Modal","Header","Form","Image","Button","Input","TextArea","Segment","Grid","Label","Icon","GridColumn","Picker","emojiIndex","uuid","firebase","FileModal","ImageResize","breakStatement","prototype","CreatePostModal","Component","state","postText","postImages","emojiPicker","selectionStart","fileModal","uploadTask","uploadPercent","storeRef","storage","ref","postsRef","database","files","handleTogglePicker","setState","handlePostChange","event","target","value","handleEmojiSelect","emoji","console","log","oldPost","newPost","addEmojiToInputWithSeletionStart","colonToUnicode","colons","emojiMessage","x","replace","emojis","undefined","unicode","native","post","substring","length","inputClicked","inputKeyPressed","openFileModal","closeFileModal","fileStateToProp","concat","uploadFile","forEach","file","filePath","props","user","uid","child","put","metadata","on","snap","Math","round","bytesTransferred","totalBytes","savePost","preventDefault","getLimitImage","key","getImageCanvas","imageUrl","canvasUrl","image","getCanvasUrl","push","join","displayImages","map","val","width","height","url","objectFit","render","modal","closeModal","top","transform","maxWidth","opacity","editIcon","marginTop","photoURL","fontSize","float","border","background","resize","pictureIcon","marginLeft","tagFriends","smileIcon","search","categories","recent","position","left","zIndex"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Modal, Header,Form,Image, Button, Input, TextArea, Segment, Grid, Label, Icon, GridColumn } from 'semantic-ui-react';\nimport {Picker,emojiIndex} from 'emoji-mart'\nimport 'emoji-mart/css/emoji-mart.css'\nimport uuid from 'uuidv4'\n\nimport firebase from '../../firebase'\nimport FileModal from './FileModal'\n\nimport ImageResize from '../ImageResize'\nimport pictureIcon from '../../Images/picture.svg'\nimport tagFriends from '../../Images/tagfriends.svg'\nimport locationIcon from '../../Images/location.svg'\nimport editIcon from '../../Images/edit.svg'\nimport smileIcon from '../../Images/smile.svg'\nimport { breakStatement } from '@babel/types';\nimport { prototype } from 'module';\n\nclass CreatePostModal extends React.Component{\n\n    state = {\n        postText: '',\n        postImages: [],\n        emojiPicker: false,\n        selectionStart: 0,\n        fileModal: false,        \n        uploadTask: null,\n        uploadPercent: 0,\n        storeRef: firebase.storage().ref(),\n        postsRef: firebase.database().ref('posts'),\n        files:[]\n      \n        \n    }\n    \n\n\n    handleTogglePicker = () =>{\n        this.setState({emojiPicker: !this.state.emojiPicker})\n    }\n\n    handlePostChange = event =>{\n        this.setState({postText: event.target.value})\n    }\n\n    handleEmojiSelect = emoji =>{\n        console.log(emoji)\n        const oldPost = this.state.postText;\n        const newPost = this.addEmojiToInputWithSeletionStart(oldPost,this.state.selectionStart,this.colonToUnicode(emoji.colons));\n        this.setState({postText: newPost})\n    \n    }\n    \n\n\n    colonToUnicode = emojiMessage =>{\n        let x = emojiMessage.replace(/:/g,\"\")\n        let emoji = emojiIndex.emojis[x];\n        if(emoji !== undefined){\n            let unicode = emoji.native\n            if(unicode !== undefined){\n                return unicode\n            }else{\n                return null\n            }\n        } \n        \n\n    }\n\naddEmojiToInputWithSeletionStart = (post, selectionStart,emoji) =>{\n \n    if(post){\n        if(emoji){\n            \n            return post.substring(0,selectionStart) +emoji+ post.substring(selectionStart,post.length)\n        }else{\n            return post\n        }\n    }else{\n        if(emoji){\n            return post + emoji\n        }\n    }\n}\n\ninputClicked = event =>{\n   \n    this.setState({selectionStart: event.target.selectionStart});\n    \n}\n\ninputKeyPressed = event =>{\n    this.setState({selectionStart: event.target.selectionStart});\n    \n    \n}\n\nopenFileModal = () =>{\n    this.setState({fileModal: true})\n}\n\ncloseFileModal = () =>{\n    this.setState({fileModal: false})\n}\n\nfileStateToProp = files =>{\n   \n    this.setState({files: this.state.files.concat(files)})\n}\n\nuploadFile = () =>{\n    \n    if(this.state.files.length > 0){\n        this.state.files.forEach(file =>{\n            const filePath = this.props.user.uid+'/media/image/'+uuid()+'.jpg'; \n            const uploadTask = this.state.storeRef.child(filePath).put(file.file,file.metadata)\n            this.setState({uploadTask}, () =>{\n                this.state.uploadTask.on('state_changed', snap =>{\n                    const uploadPercent = Math.round((snap.bytesTransferred / snap.totalBytes) * 100)\n                    this.setState({uploadPercent}, () =>{\n                        console.log(this.state.uploadPercent)\n                    })\n                })\n            })\n        })\n    }\n    // const uploadTask = this.state.storeRef.child(filePath).put(file,metadata);\n    // this.setState({uploadTask},()=>{\n    //     this.state.uploadTask.on('state_changed', snap =>{\n    //         const uploadPercent = Math.round((snap.bytesTransferred / snap.totalBytes)*100) \n    //         this.setState({uploadPercent},()=>{\n    //             if(this.state.uploadPercent == 100){\n    //                 setTimeout(()=>{\n    //                     this.state.uploadTask.snapshot.ref.getDownloadURL().then(downloadURL =>{\n    //                         const image = [];\n    //                         image.push({downloadURL: downloadURL, imagePath: this.state.uploadTask.location_.path})\n    //                         this.setState({postImages: this.state.postImages.concat(image)},()=>{\n    //                             console.log(this.state.postImages)\n    //                         })\n    //                     })\n    //                 },800 - this.state.uploadPercent)\n    //             }\n    //         })\n    //     });\n        \n    // })\n    \n    \n}\n\n\n\nsavePost = event =>{\n    event.preventDefault();\n    // const postChild = this.props.user.uid+uuid()+'/post';\n    // const postCreate ={\n    //   postChild: postChild,\n    //   createByUid: this.props.user.uid,\n    //   createByName: this.props.user.displayName,\n    //   avatar: this.props.user.photoURL ,\n    //   timestamp: Date.now(),\n    //   postImages: Array().concat(this.state.postImages),\n    //   postText: this.state.postText,\n    //   liked: [{username: 'null', userUID: 'null'}]\n    // }\n    \n    // this.state.postsRef.child(postChild).set(postCreate).then(()=>{\n    //     this.setState({postText: '', postImages: []});\n    //     this.props.closeModal()\n    // })\n    this.uploadFile()\n    \n  }\n\n\n\n  getLimitImage = key =>{\n     \n      return key < 4 ? true : false;\n      \n  }\n\n  getImageCanvas = imageUrl =>{\n    let canvasUrl = []\n   \n      this.image = new ImageResize(imageUrl,150,getCanvasUrl =>{\n        \n        canvasUrl.push(getCanvasUrl)\n      } );\n      return canvasUrl.join('')\n  }\n\n  displayImages = files =>{\n    \n          return(\n              <Grid reversed >\n                  <Grid.Row widths='equal'> \n                      \n{files.map((val,key) =>(\n    \n        this.getLimitImage(key) ? (\n                \n                <Grid.Column  style={{width: '150px', height: '150x'}}>\n                    {console.log(this.getImageCanvas(val.url))}\n                <Image fluid centered wrapped  bordered key={key} src={val.url} /> \n                </Grid.Column>\n        ) : '' \n          \n    \n    \n))}\n{files.length > 4 ?(\n\n      <Grid.Column style={{width: '150px', height: '150x'}}>\n    <Image src ='https://react.semantic-ui.com/images/wireframe/square-image.png' fluid centered wrapped style={{objectFit: 'cover', width: 'auto', height: 'auto'}} bordered  />\n    </Grid.Column>\n\n) : ''}\n    {files.length > 0   ? (\n        <Grid.Column style={{width: '150px', height: '150x'}}>\n        <Image src ='https://react.semantic-ui.com/images/wireframe/square-image.png' fluid centered wrapped style={{objectFit: 'cover', width: 'auto', height: 'auto'}} bordered />\n        </Grid.Column>\n    ) : ''}\n\n                  </Grid.Row>\n              </Grid>\n          )\n      \n  }\n\n\n    render(){\n\n        const {postText,emojiPicker,files} = this.state;\n        const {user,modal,closeModal} = this.props;\n        \n        return(\n            <div className=\"wrapper\">\n                <FileModal files={this.state.files} fileStateToProp={this.fileStateToProp} fileModal={this.state.fileModal} uploadFile={this.uploadFile} closeModal={this.closeFileModal} />\n\n                <Modal centered  open={modal} onClose={closeModal} closeIcon style={{top: '10%', transform: 'translateY(-10%)',maxWidth: '1000px'}}>\n                <Modal.Header >\n                <Header as='h3'> \n        \n                    <Header.Content style={{opacity: 0.6}}> <Image spaced='right' style={{width:'30px'} } src={editIcon} />Tạo Bài Viết  </Header.Content>\n      \n                </Header>\n                </Modal.Header>\n                <Modal.Content>\n                    <Form style={{marginTop: '5px'}}>\n                        <Form.Group >\n                            <Image inline size='tiny' avatar src={user.photoURL}/>\n\n\n                            <Form.Field  style={{width: '100%'}} >\n                                \n                            \n                                <TextArea\n                                    rows={1}\n                                    value={postText} \n                                    type='text' \n                                    placeholder=\"Bạn muốn chia sẻ điều gì ?\" \n                                    transparent='true'\n                                    onClick={this.inputClicked}\n                                    onChange={this.handlePostChange} \n                                    style={{height: '100%',fontSize: 16,float: 'left',border: 'none', background: 'none', resize: 'none'}} \n                                    onKeyUp={this.inputKeyPressed}  \n                                />\n                                \n                        \n\n                            </Form.Field>\n                            \n                        </Form.Group>\n                        \n                        <Button.Group widths={4}  size='small' compact fluid>\n                            <Button  onClick={this.openFileModal}>\n                            <Image style={{width:'30px'}} spaced='right' centered  src={pictureIcon} />\n                         \n                            <span style={{marginLeft:'10px'}}>Ảnh/Video</span>\n\n                            </Button>\n                          \n                            <Button      >\n                            <Image  style={{width:'30px'}} spaced='right' centered  src={tagFriends} />\n                         \n                            <span style={{marginLeft:'10px'}}>Gắn thẻ bạn bè</span>\n\n                            </Button>\n                            \n                            <Button  onClick={this.handleTogglePicker}>\n                            <Image style={{width:'30px'}} spaced='right' centered  src={smileIcon} />\n                         \n                            <span style={{marginLeft:'10px'}}>Cảm xúc </span>{\n                              \n                            }\n                            \n                            </Button>\n                            {emojiPicker ? (\n                                (\n                                    <div onMouseLeave={this.handleTogglePicker} className=\"emoji-mart-select\">\n                                        <Picker \n\n                                            i18n={{ search: 'Tìm kiếm', categories: { search: 'Tìm kiếm theo mục', recent: 'Đã sử dụng gần đây' } }}\n                                            onSelect={this.handleEmojiSelect}\n                                            set='facebook'\n                                            emoji='point_up'\n                                            style={{position: \"absolute\",left:'55%', top:'65%', zIndex: '1000'}}\n                                    \n                                        />\n                                    </div>\n                                )\n                            ) : ''}\n                          \n                           \n                        </Button.Group>\n                        \n\n\n                        <Form.Button onClick={this.savePost}  color='green' fluid style={{marginTop: '50px'}}>Đăng bài</Form.Button>\n                                \n                    </Form> \n                   \n                    {files.length > 0 ?  (\n                        <Segment>  \n                            {\n                                this.displayImages(files)\n                            }\n                            \n                        </Segment>\n                    ): ''}\n                </Modal.Content>\n            </Modal>\n            </div>\n        );\n    }\n}\n\nexport default CreatePostModal\n"]},"metadata":{},"sourceType":"module"}