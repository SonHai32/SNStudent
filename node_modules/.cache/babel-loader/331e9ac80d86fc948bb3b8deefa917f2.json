{"ast":null,"code":"'use strict';\n\nvar _taggedTemplateLiteral = require(\"/home/hari/Desktop/web-dev/React/cstudy/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"Integrity verification failed for \", \" (\", \")\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"Bad data size: expected inserted data to be \", \" bytes, but got \", \" instead\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst BB = require('bluebird');\n\nconst contentPath = require('./path');\n\nconst figgyPudding = require('figgy-pudding');\n\nconst fs = require('graceful-fs');\n\nconst PassThrough = require('stream').PassThrough;\n\nconst pipe = BB.promisify(require('mississippi').pipe);\n\nconst ssri = require('ssri');\n\nconst Y = require('../util/y.js');\n\nconst lstatAsync = BB.promisify(fs.lstat);\nconst readFileAsync = BB.promisify(fs.readFile);\nconst ReadOpts = figgyPudding({\n  size: {}\n});\nmodule.exports = read;\n\nfunction read(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return readFileAsync(cpath, null).then(data => {\n      if (typeof opts.size === 'number' && opts.size !== data.length) {\n        throw sizeError(opts.size, data.length);\n      } else if (ssri.checkData(data, sri)) {\n        return data;\n      } else {\n        throw integrityError(sri, cpath);\n      }\n    });\n  });\n}\n\nmodule.exports.sync = readSync;\n\nfunction readSync(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    const data = fs.readFileSync(cpath);\n\n    if (typeof opts.size === 'number' && opts.size !== data.length) {\n      throw sizeError(opts.size, data.length);\n    } else if (ssri.checkData(data, sri)) {\n      return data;\n    } else {\n      throw integrityError(sri, cpath);\n    }\n  });\n}\n\nmodule.exports.stream = readStream;\nmodule.exports.readStream = readStream;\n\nfunction readStream(cache, integrity, opts) {\n  opts = ReadOpts(opts);\n  const stream = new PassThrough();\n  withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({\n      cpath,\n      sri,\n      stat\n    }));\n  }).then(({\n    cpath,\n    sri,\n    stat\n  }) => {\n    return pipe(fs.createReadStream(cpath), ssri.integrityStream({\n      integrity: sri,\n      size: opts.size\n    }), stream);\n  }).catch(err => {\n    stream.emit('error', err);\n  });\n  return stream;\n}\n\nlet copyFileAsync;\n\nif (fs.copyFile) {\n  module.exports.copy = copy;\n  module.exports.copy.sync = copySync;\n  copyFileAsync = BB.promisify(fs.copyFile);\n}\n\nfunction copy(cache, integrity, dest, opts) {\n  opts = ReadOpts(opts);\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return copyFileAsync(cpath, dest);\n  });\n}\n\nfunction copySync(cache, integrity, dest, opts) {\n  opts = ReadOpts(opts);\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    return fs.copyFileSync(cpath, dest);\n  });\n}\n\nmodule.exports.hasContent = hasContent;\n\nfunction hasContent(cache, integrity) {\n  if (!integrity) {\n    return BB.resolve(false);\n  }\n\n  return withContentSri(cache, integrity, (cpath, sri) => {\n    return lstatAsync(cpath).then(stat => ({\n      size: stat.size,\n      sri,\n      stat\n    }));\n  }).catch(err => {\n    if (err.code === 'ENOENT') {\n      return false;\n    }\n\n    if (err.code === 'EPERM') {\n      if (process.platform !== 'win32') {\n        throw err;\n      } else {\n        return false;\n      }\n    }\n  });\n}\n\nmodule.exports.hasContent.sync = hasContentSync;\n\nfunction hasContentSync(cache, integrity) {\n  if (!integrity) {\n    return false;\n  }\n\n  return withContentSriSync(cache, integrity, (cpath, sri) => {\n    try {\n      const stat = fs.lstatSync(cpath);\n      return {\n        size: stat.size,\n        sri,\n        stat\n      };\n    } catch (err) {\n      if (err.code === 'ENOENT') {\n        return false;\n      }\n\n      if (err.code === 'EPERM') {\n        if (process.platform !== 'win32') {\n          throw err;\n        } else {\n          return false;\n        }\n      }\n    }\n  });\n}\n\nfunction withContentSri(cache, integrity, fn) {\n  return BB.try(() => {\n    const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n    // with available local data.\n\n    const algo = sri.pickAlgorithm();\n    const digests = sri[algo];\n\n    if (digests.length <= 1) {\n      const cpath = contentPath(cache, digests[0]);\n      return fn(cpath, digests[0]);\n    } else {\n      return BB.any(sri[sri.pickAlgorithm()].map(meta => {\n        return withContentSri(cache, meta, fn);\n      }, {\n        concurrency: 1\n      })).catch(err => {\n        if ([].some.call(err, e => e.code === 'ENOENT')) {\n          throw Object.assign(new Error('No matching content found for ' + sri.toString()), {\n            code: 'ENOENT'\n          });\n        } else {\n          throw err[0];\n        }\n      });\n    }\n  });\n}\n\nfunction withContentSriSync(cache, integrity, fn) {\n  const sri = ssri.parse(integrity); // If `integrity` has multiple entries, pick the first digest\n  // with available local data.\n\n  const algo = sri.pickAlgorithm();\n  const digests = sri[algo];\n\n  if (digests.length <= 1) {\n    const cpath = contentPath(cache, digests[0]);\n    return fn(cpath, digests[0]);\n  } else {\n    let lastErr = null;\n\n    for (const meta of sri[sri.pickAlgorithm()]) {\n      try {\n        return withContentSriSync(cache, meta, fn);\n      } catch (err) {\n        lastErr = err;\n      }\n    }\n\n    if (lastErr) {\n      throw lastErr;\n    }\n  }\n}\n\nfunction sizeError(expected, found) {\n  var err = new Error(Y(_templateObject(), expected, found));\n  err.expected = expected;\n  err.found = found;\n  err.code = 'EBADSIZE';\n  return err;\n}\n\nfunction integrityError(sri, path) {\n  var err = new Error(Y(_templateObject2(), sri, path));\n  err.code = 'EINTEGRITY';\n  err.sri = sri;\n  err.path = path;\n  return err;\n}","map":null,"metadata":{},"sourceType":"script"}