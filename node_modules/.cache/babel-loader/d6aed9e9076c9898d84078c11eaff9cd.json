{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../../schemas/plugins/optimize/OccurrenceOrderChunkIdsPlugin.json\");\n/** @typedef {import(\"../../declarations/plugins/optimize/OccurrenceOrderChunkIdsPlugin\").OccurrenceOrderChunkIdsPluginOptions} OccurrenceOrderChunkIdsPluginOptions */\n\n\nclass OccurrenceOrderChunkIdsPlugin {\n  /**\n   * @param {OccurrenceOrderChunkIdsPluginOptions=} options options object\n   */\n  constructor(options = {}) {\n    validateOptions(schema, options, \"Occurrence Order Chunk Ids Plugin\");\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const prioritiseInitial = this.options.prioritiseInitial;\n    compiler.hooks.compilation.tap(\"OccurrenceOrderChunkIdsPlugin\", compilation => {\n      compilation.hooks.optimizeChunkOrder.tap(\"OccurrenceOrderChunkIdsPlugin\", chunks => {\n        const occursInInitialChunksMap = new Map();\n        const originalOrder = new Map();\n        let i = 0;\n\n        for (const c of chunks) {\n          let occurs = 0;\n\n          for (const chunkGroup of c.groupsIterable) {\n            for (const parent of chunkGroup.parentsIterable) {\n              if (parent.isInitial()) occurs++;\n            }\n          }\n\n          occursInInitialChunksMap.set(c, occurs);\n          originalOrder.set(c, i++);\n        }\n\n        chunks.sort((a, b) => {\n          if (prioritiseInitial) {\n            const aEntryOccurs = occursInInitialChunksMap.get(a);\n            const bEntryOccurs = occursInInitialChunksMap.get(b);\n            if (aEntryOccurs > bEntryOccurs) return -1;\n            if (aEntryOccurs < bEntryOccurs) return 1;\n          }\n\n          const aOccurs = a.getNumberOfGroups();\n          const bOccurs = b.getNumberOfGroups();\n          if (aOccurs > bOccurs) return -1;\n          if (aOccurs < bOccurs) return 1;\n          const orgA = originalOrder.get(a);\n          const orgB = originalOrder.get(b);\n          return orgA - orgB;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = OccurrenceOrderChunkIdsPlugin;","map":null,"metadata":{},"sourceType":"script"}