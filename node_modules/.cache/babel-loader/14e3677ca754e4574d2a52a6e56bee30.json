{"ast":null,"code":"var arrayDifference = require('lodash.difference');\n\nvar moment = require('moment');\n\nvar IgnorePlugin = require('webpack').IgnorePlugin;\n\nvar ContextReplacementPlugin = require('webpack').ContextReplacementPlugin;\n\nfunction isModuleAvailable(moduleName) {\n  try {\n    require.resolve(moduleName);\n\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction checkOptions(options) {\n  var optionsObject = options || {};\n  var supportedOptions = ['localesToKeep', 'ignoreInvalidLocales'];\n  var unknownOptions = arrayDifference(Object.keys(optionsObject), supportedOptions);\n\n  if (unknownOptions.length > 0) {\n    throw new Error('MomentLocalesPlugin: received unknown options: ' + unknownOptions.join(', ') + '. Only `localesToKeep` and `ignoreInvalidLocales` options are supported at the moment');\n  }\n\n  var localesToKeep = normalizeLocalesToKeep(optionsObject);\n  return {\n    localesToKeep: localesToKeep\n  };\n}\n\nfunction normalizeLocalesToKeep(optionsObject) {\n  var localesToKeep = optionsObject.localesToKeep || []; // Check if an array\n\n  if (!Array.isArray(localesToKeep)) {\n    throw new Error('MomentLocalesPlugin: Expected the `localesToKeep` option to be an array, received ' + (JSON.stringify(localesToKeep) || localesToKeep) + '. Pass an array, like this:\\nmodule.exports = {\\n  plugins: [\\n    new MomentLocalesPlugin({\\n' + \"      localesToKeep: ['en-us', 'ru']\\n    })\\n  ]\\n}\");\n  } // Check if it has unknown locales and filter them out\n\n\n  var absentLocales = [];\n  localesToKeep = localesToKeep.filter(function (localeName) {\n    // 'en' is built into Moment, so it doesn't exist in the locales context\n    if (localeName === 'en') {\n      return false;\n    }\n\n    var localeData = moment.localeData(localeName);\n\n    if ( // For Moment 2.20.1−\n    localeData === null || // For Moment. 2.21.0+ – this version now returns the localeData of the currently set locale, instead of null\n    localeData === moment.localeData()) {\n      absentLocales.push(localeName);\n      return false;\n    }\n\n    return true;\n  });\n\n  if (!optionsObject.ignoreInvalidLocales && absentLocales.length > 0) {\n    throw new Error('MomentLocalesPlugin: Moment.js doesn’t include ' + (absentLocales.length === 1 ? 'a locale you specified: ' : 'a few locales you specified: ') + absentLocales.join(', ') + '. Check the plugin’s `localesToKeep` option.\\nYou can see the full list of locales ' + 'that Moment.js includes in node_modules/moment/locale/ .\\n' + 'If you would like unsupported locales to be ignored, please use the `ignoreInvalidLocales` option.');\n  } // Normalize the locales to match the file names\n  // (i.e. `en-gb-foo` would be recognized by Moment as `en-gb`,\n  // but no `en-gb-foo.js` file exists)\n\n\n  return localesToKeep.map(function (localeName) {\n    return moment.localeData(localeName)._abbr;\n  });\n}\n\nfunction MomentLocalesPlugin(options) {\n  var normalizedOptions = checkOptions(options);\n  var localesToKeep = normalizedOptions.localesToKeep;\n\n  if (localesToKeep.length > 0) {\n    var regExpPatterns = localesToKeep.map(function (localeName) {\n      return localeName + '(\\\\.js)?';\n    });\n    return new ContextReplacementPlugin(/moment[\\/\\\\]locale/, new RegExp('(' + regExpPatterns.join('|') + ')$'));\n  } else {\n    return new IgnorePlugin(/^\\.\\/locale$/, /moment$/);\n  }\n}\n\nmodule.exports = MomentLocalesPlugin;","map":null,"metadata":{},"sourceType":"script"}