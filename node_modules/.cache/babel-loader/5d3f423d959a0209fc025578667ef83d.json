{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst mergeCache = new WeakMap();\n/**\n * Merges two given objects and caches the result to avoid computation if same objects passed as arguments again.\n * @example\n * // performs cleverMerge(first, second), stores the result in WeakMap and returns result\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n *  // when same arguments passed, gets the result from WeakMap and returns it.\n * cachedCleverMerge({a: 1}, {a: 2})\n * {a: 2}\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\nconst cachedCleverMerge = (first, second) => {\n  let innerCache = mergeCache.get(first);\n\n  if (innerCache === undefined) {\n    innerCache = new WeakMap();\n    mergeCache.set(first, innerCache);\n  }\n\n  const prevMerge = innerCache.get(second);\n  if (prevMerge !== undefined) return prevMerge;\n  const newMerge = cleverMerge(first, second);\n  innerCache.set(second, newMerge);\n  return newMerge;\n};\n/**\n * Merges two objects. Objects are not deeply merged.\n * TODO webpack 5: merge objects deeply clever.\n * Arrays might reference the old value with \"...\"\n * @param {object} first first object\n * @param {object} second second object\n * @returns {object} merged object of first and second object\n */\n\n\nconst cleverMerge = (first, second) => {\n  const newObject = Object.assign({}, first);\n\n  for (const key of Object.keys(second)) {\n    if (!(key in newObject)) {\n      newObject[key] = second[key];\n      continue;\n    }\n\n    const secondValue = second[key];\n\n    if (!Array.isArray(secondValue)) {\n      newObject[key] = secondValue;\n      continue;\n    }\n\n    const firstValue = newObject[key];\n\n    if (Array.isArray(firstValue)) {\n      const newArray = [];\n\n      for (const item of secondValue) {\n        if (item === \"...\") {\n          for (const item of firstValue) {\n            newArray.push(item);\n          }\n        } else {\n          newArray.push(item);\n        }\n      }\n\n      newObject[key] = newArray;\n    } else {\n      newObject[key] = secondValue;\n    }\n  }\n\n  return newObject;\n};\n\nexports.cachedCleverMerge = cachedCleverMerge;\nexports.cleverMerge = cleverMerge;","map":null,"metadata":{},"sourceType":"script"}