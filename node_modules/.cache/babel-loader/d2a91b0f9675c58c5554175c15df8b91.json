{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst base64VLQ = require(\"./base64-vlq\");\n\nconst getNumberOfLines = require(\"./helpers\").getNumberOfLines;\n\nconst getUnfinishedLine = require(\"./helpers\").getUnfinishedLine;\n\nconst LINE_MAPPING = \";AACA\";\n\nclass SourceNode {\n  constructor(generatedCode, source, originalSource, startingLine) {\n    this.generatedCode = generatedCode;\n    this.originalSource = originalSource;\n    this.source = source;\n    this.startingLine = startingLine || 1;\n    this._numberOfLines = getNumberOfLines(this.generatedCode);\n    this._endsWithNewLine = generatedCode[generatedCode.length - 1] === \"\\n\";\n  }\n\n  clone() {\n    return new SourceNode(this.generatedCode, this.source, this.originalSource, this.startingLine);\n  }\n\n  getGeneratedCode() {\n    return this.generatedCode;\n  }\n\n  addGeneratedCode(code) {\n    this.generatedCode += code;\n    this._numberOfLines += getNumberOfLines(code);\n    this._endsWithNewLine = code[code.length - 1] === \"\\n\";\n  }\n\n  getMappings(mappingsContext) {\n    if (!this.generatedCode) return \"\";\n    const lines = this._numberOfLines;\n    const sourceIdx = mappingsContext.ensureSource(this.source, this.originalSource);\n    let mappings = \"A\"; // generated column 0\n\n    if (mappingsContext.unfinishedGeneratedLine) mappings = \",\" + base64VLQ.encode(mappingsContext.unfinishedGeneratedLine);\n    mappings += base64VLQ.encode(sourceIdx - mappingsContext.currentSource); // source index\n\n    mappings += base64VLQ.encode(this.startingLine - mappingsContext.currentOriginalLine); // original line index\n\n    mappings += \"A\"; // original column 0\n\n    mappingsContext.currentSource = sourceIdx;\n    mappingsContext.currentOriginalLine = this.startingLine + lines - 1;\n    const unfinishedGeneratedLine = mappingsContext.unfinishedGeneratedLine = getUnfinishedLine(this.generatedCode);\n    mappings += Array(lines).join(LINE_MAPPING);\n\n    if (unfinishedGeneratedLine === 0) {\n      mappings += \";\";\n    } else {\n      if (lines !== 0) {\n        mappings += LINE_MAPPING;\n      }\n\n      mappingsContext.currentOriginalLine++;\n    }\n\n    return mappings;\n  }\n\n  mapGeneratedCode(fn) {\n    throw new Error(\"Cannot map generated code on a SourceMap. Normalize to SingleLineNode first.\");\n  }\n\n  getNormalizedNodes() {\n    var results = [];\n    var currentLine = this.startingLine;\n    var generatedCode = this.generatedCode;\n    var index = 0;\n    var indexEnd = generatedCode.length;\n\n    while (index < indexEnd) {\n      // get one generated line\n      var nextLine = generatedCode.indexOf(\"\\n\", index) + 1;\n      if (nextLine === 0) nextLine = indexEnd;\n      var lineGenerated = generatedCode.substr(index, nextLine - index);\n      results.push(new SingleLineNode(lineGenerated, this.source, this.originalSource, currentLine)); // move cursors\n\n      index = nextLine;\n      currentLine++;\n    }\n\n    return results;\n  }\n\n  merge(otherNode) {\n    if (otherNode instanceof SourceNode) {\n      return this.mergeSourceNode(otherNode);\n    } else if (otherNode instanceof SingleLineNode) {\n      return this.mergeSingleLineNode(otherNode);\n    }\n\n    return false;\n  }\n\n  mergeSourceNode(otherNode) {\n    if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.startingLine) {\n      this.generatedCode += otherNode.generatedCode;\n      this._numberOfLines += otherNode._numberOfLines;\n      this._endsWithNewLine = otherNode._endsWithNewLine;\n      return this;\n    }\n\n    return false;\n  }\n\n  mergeSingleLineNode(otherNode) {\n    if (this.source === otherNode.source && this._endsWithNewLine && this.startingLine + this._numberOfLines === otherNode.line && otherNode._numberOfLines <= 1) {\n      this.addSingleLineNode(otherNode);\n      return this;\n    }\n\n    return false;\n  }\n\n  addSingleLineNode(otherNode) {\n    this.generatedCode += otherNode.generatedCode;\n    this._numberOfLines += otherNode._numberOfLines;\n    this._endsWithNewLine = otherNode._endsWithNewLine;\n  }\n\n}\n\nmodule.exports = SourceNode;\n\nconst SingleLineNode = require(\"./SingleLineNode\"); // circular dependency","map":null,"metadata":{},"sourceType":"script"}