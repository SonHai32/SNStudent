{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst AliasPlugin = require(\"enhanced-resolve/lib/AliasPlugin\");\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nconst nodeLibsBrowser = require(\"node-libs-browser\");\n\nmodule.exports = class NodeSourcePlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(compiler) {\n    const options = this.options;\n\n    if (options === false) {\n      // allow single kill switch to turn off this plugin\n      return;\n    }\n\n    const getPathToModule = (module, type) => {\n      if (type === true || type === undefined && nodeLibsBrowser[module]) {\n        if (!nodeLibsBrowser[module]) {\n          throw new Error(\"No browser version for node.js core module \".concat(module, \" available\"));\n        }\n\n        return nodeLibsBrowser[module];\n      } else if (type === \"mock\") {\n        return require.resolve(\"node-libs-browser/mock/\".concat(module));\n      } else if (type === \"empty\") {\n        return require.resolve(\"node-libs-browser/mock/empty\");\n      } else {\n        return module;\n      }\n    };\n\n    const addExpression = (parser, name, module, type, suffix) => {\n      suffix = suffix || \"\";\n      parser.hooks.expression.for(name).tap(\"NodeSourcePlugin\", () => {\n        if (parser.state.module && parser.state.module.resource === getPathToModule(module, type)) return;\n        const mockModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, getPathToModule(module, type));\n        return ParserHelpers.addParsedVariableToModule(parser, name, mockModule + suffix);\n      });\n    };\n\n    compiler.hooks.compilation.tap(\"NodeSourcePlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.node === false) return;\n        let localOptions = options;\n\n        if (parserOptions.node) {\n          localOptions = Object.assign({}, localOptions, parserOptions.node);\n        }\n\n        if (localOptions.global) {\n          parser.hooks.expression.for(\"global\").tap(\"NodeSourcePlugin\", () => {\n            const retrieveGlobalModule = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve(\"../../buildin/global\"));\n            return ParserHelpers.addParsedVariableToModule(parser, \"global\", retrieveGlobalModule);\n          });\n        }\n\n        if (localOptions.process) {\n          const processType = localOptions.process;\n          addExpression(parser, \"process\", \"process\", processType);\n        }\n\n        if (localOptions.console) {\n          const consoleType = localOptions.console;\n          addExpression(parser, \"console\", \"console\", consoleType);\n        }\n\n        const bufferType = localOptions.Buffer;\n\n        if (bufferType) {\n          addExpression(parser, \"Buffer\", \"buffer\", bufferType, \".Buffer\");\n        }\n\n        if (localOptions.setImmediate) {\n          const setImmediateType = localOptions.setImmediate;\n          addExpression(parser, \"setImmediate\", \"timers\", setImmediateType, \".setImmediate\");\n          addExpression(parser, \"clearImmediate\", \"timers\", setImmediateType, \".clearImmediate\");\n        }\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"NodeSourcePlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"NodeSourcePlugin\", handler);\n    });\n    compiler.hooks.afterResolvers.tap(\"NodeSourcePlugin\", compiler => {\n      for (const lib of Object.keys(nodeLibsBrowser)) {\n        if (options[lib] !== false) {\n          compiler.resolverFactory.hooks.resolver.for(\"normal\").tap(\"NodeSourcePlugin\", resolver => {\n            new AliasPlugin(\"described-resolve\", {\n              name: lib,\n              onlyModule: true,\n              alias: getPathToModule(lib, options[lib])\n            }, \"resolve\").apply(resolver);\n          });\n        }\n      }\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}