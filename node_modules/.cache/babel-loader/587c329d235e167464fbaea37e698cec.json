{"ast":null,"code":"class ImageResize {\n  constructor() {\n    this.imageResize = (imageUrl, maxWidth) => {\n      let canvasUrl = '';\n      let tempImg = new Image();\n      tempImg.src = imageUrl;\n      console.log(tempImg);\n\n      let createCanvas = (width, height, img) => {\n        let canvas = document.createElement('canvas');\n        canvas.width = width;\n        canvas.height = height;\n        let ctx = canvas.getContext('2d');\n        ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n        return canvas.toDataURL();\n      };\n\n      tempImg.onload = () => {\n        let tempW = tempImg.width;\n        let tempH = tempImg.height;\n        let min = tempW >= tempH ? tempH : tempW;\n        maxWidth = maxWidth || min;\n\n        if (tempW <= maxWidth && tempH <= maxWidth) {\n          createCanvas(tempW, tempH, tempImg);\n        }\n\n        let startY = 0;\n\n        if (min !== tempH) {\n          startY = tempW / 2 - tempH / 2;\n        }\n\n        let startX = 0;\n\n        if (min !== tempW) {\n          startX = tempH / 2 - tempW / 2;\n        }\n\n        let finalImage = new Image();\n        finalImage.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n\n        finalImage.onload = () => {\n          canvasUrl = createCanvas(maxWidth, maxWidth, finalImage);\n        };\n      };\n\n      return canvasUrl;\n    };\n  }\n\n  getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio) {\n    let tnCanvas = document.createElement('canvas');\n    let tnContext = tnCanvas.getContext('2d');\n    tnCanvas.width = newWidth;\n    tnCanvas.height = newHeight;\n    let bufferCanvas = document.createElement('canvas');\n    let bufferContext = bufferCanvas.getContext('2d');\n    bufferCanvas.width = imgObj.width;\n    bufferCanvas.height = imgObj.height;\n    bufferContext.drawImage(imgObj, 0, 0);\n    tnContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight);\n    return tnCanvas.toDataURL();\n  }\n\n}\n\nexport default ImageResize;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/ImageResize.js"],"names":["ImageResize","imageResize","imageUrl","maxWidth","canvasUrl","tempImg","Image","src","console","log","createCanvas","width","height","img","canvas","document","createElement","ctx","getContext","drawImage","toDataURL","onload","tempW","tempH","min","startY","startX","finalImage","getImagePortion","imgObj","newWidth","newHeight","ratio","tnCanvas","tnContext","bufferCanvas","bufferContext"],"mappings":"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","sourcesContent":["class ImageResize {\n\n    imageResize = (imageUrl, maxWidth) => {\n\n        let canvasUrl = '';\n        let tempImg = new Image();\n        tempImg.src = imageUrl;\n        console.log(tempImg)\n        let createCanvas = (width, height, img) => {\n            let canvas = document.createElement('canvas');\n            canvas.width = width;\n            canvas.height = height;\n            let ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\n            return canvas.toDataURL();\n        }\n\n        tempImg.onload = () => {\n            let tempW = tempImg.width;\n            let tempH = tempImg.height;\n            let min = tempW >= tempH ? tempH : tempW\n            maxWidth = maxWidth || min;\n\n            if (tempW <= maxWidth && tempH <= maxWidth) {\n                createCanvas(tempW, tempH, tempImg)\n            }\n\n            let startY = 0;\n            if (min !== tempH) {\n                startY = tempW / 2 - (tempH / 2)\n            }\n            let startX = 0;\n            if (min !== tempW) {\n                startX = tempH / 2 - (tempW / 2)\n            }\n\n            let finalImage = new Image();\n            finalImage.src = this.getImagePortion(tempImg, min, min, startX, startY, 1);\n\n            finalImage.onload = () => {\n                canvasUrl = createCanvas(maxWidth, maxWidth, finalImage)\n            }\n\n        }\n\n        return canvasUrl\n    }\n\n    getImagePortion(imgObj, newWidth, newHeight, startX, startY, ratio) {\n        let tnCanvas = document.createElement('canvas');\n        let tnContext = tnCanvas.getContext('2d');\n        tnCanvas.width = newWidth;\n        tnCanvas.height = newHeight;\n\n        let bufferCanvas = document.createElement('canvas');\n        let bufferContext = bufferCanvas.getContext('2d')\n        bufferCanvas.width = imgObj.width;\n        bufferCanvas.height = imgObj.height;\n\n        bufferContext.drawImage(imgObj, 0, 0);\n\n        tnContext.drawImage(bufferCanvas, startX, startY, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight)\n        return tnCanvas.toDataURL();\n\n\n    }\n}\n\nexport default ImageResize"]},"metadata":{},"sourceType":"module"}