{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Stats = require(\"./Stats\");\n\nconst optionOrFallback = (optionValue, fallbackValue) => optionValue !== undefined ? optionValue : fallbackValue;\n\nclass MultiStats {\n  constructor(stats) {\n    this.stats = stats;\n    this.hash = stats.map(stat => stat.hash).join(\"\");\n  }\n\n  hasErrors() {\n    return this.stats.map(stat => stat.hasErrors()).reduce((a, b) => a || b, false);\n  }\n\n  hasWarnings() {\n    return this.stats.map(stat => stat.hasWarnings()).reduce((a, b) => a || b, false);\n  }\n\n  toJson(options, forToString) {\n    if (typeof options === \"boolean\" || typeof options === \"string\") {\n      options = Stats.presetToOptions(options);\n    } else if (!options) {\n      options = {};\n    }\n\n    const jsons = this.stats.map((stat, idx) => {\n      const childOptions = Stats.getChildOptions(options, idx);\n      const obj = stat.toJson(childOptions, forToString);\n      obj.name = stat.compilation && stat.compilation.name;\n      return obj;\n    });\n    const showVersion = options.version === undefined ? jsons.every(j => j.version) : options.version !== false;\n    const showHash = options.hash === undefined ? jsons.every(j => j.hash) : options.hash !== false;\n\n    if (showVersion) {\n      for (const j of jsons) {\n        delete j.version;\n      }\n    }\n\n    const obj = {\n      errors: jsons.reduce((arr, j) => {\n        return arr.concat(j.errors.map(msg => {\n          return \"(\".concat(j.name, \") \").concat(msg);\n        }));\n      }, []),\n      warnings: jsons.reduce((arr, j) => {\n        return arr.concat(j.warnings.map(msg => {\n          return \"(\".concat(j.name, \") \").concat(msg);\n        }));\n      }, [])\n    };\n    if (showVersion) obj.version = require(\"../package.json\").version;\n    if (showHash) obj.hash = this.hash;\n    if (options.children !== false) obj.children = jsons;\n    return obj;\n  }\n\n  toString(options) {\n    if (typeof options === \"boolean\" || typeof options === \"string\") {\n      options = Stats.presetToOptions(options);\n    } else if (!options) {\n      options = {};\n    }\n\n    const useColors = optionOrFallback(options.colors, false);\n    const obj = this.toJson(options, true);\n    return Stats.jsonToString(obj, useColors);\n  }\n\n}\n\nmodule.exports = MultiStats;","map":null,"metadata":{},"sourceType":"script"}