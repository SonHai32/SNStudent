{"ast":null,"code":"const ImageResizer = (imageUrl, size) => {\n  let tempImg = new Image();\n  tempImg.src = imageUrl;\n  let ImageResizedUrl;\n\n  let createCanvas = (img, width, height) => {\n    let canvas = document.createElement('canvas');\n    let canvasCtx = canvas.getContext('2d');\n    canvas.width = width;\n    canvas.height = height;\n    canvasCtx.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas.toDataURL();\n  };\n\n  tempImg.onload = () => {\n    let tempW = tempImg.width;\n    let tempH = tempImg.height;\n    let min = tempW >= tempH ? tempH : tempW;\n    size = size || min;\n\n    if (tempH <= size && tempW <= size) {\n      createCanvas(imageUrl, tempW, tempH);\n    }\n\n    let startX = 0;\n\n    if (min !== tempW) {\n      startX = Math.round(tempW / 2 - min / 2);\n    }\n\n    let startY = 0;\n\n    if (min !== tempH) {\n      startY = Math.round(tempH / 2 - min / 2);\n    }\n\n    let finalImage = new Image();\n    finalImage.src = getImagePortion(tempImg, min, min, startX, startY, 1);\n    console.log(createCanvas(finalImage, size, size));\n  };\n\n  return ImageResizedUrl;\n};\n\nconst getImagePortion = (imgObj, newWidth, newHeight, startX, startY, ratio) => {\n  let canvas = document.createElement('canvas');\n  let ctx = canvas.getContext('2d');\n  canvas.width = newWidth;\n  canvas.height = newHeight;\n  let bufferedCanvas = document.createElement('canvas');\n  let bufferedCtx = bufferedCanvas.getContext('2d');\n  bufferedCanvas.width = imgObj.width;\n  bufferedCanvas.height = imgObj.height;\n  bufferedCtx.drawImage(imgObj, 0, 0);\n  ctx.drawImage(bufferedCanvas, 0, 0, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight);\n  return canvas.toDataURL();\n};\n\nexport default ImageResizer;","map":{"version":3,"sources":["/home/hari/Desktop/web-dev/React/SNStudent/src/components/test.js"],"names":["ImageResizer","imageUrl","size","tempImg","Image","src","ImageResizedUrl","createCanvas","img","width","height","canvas","document","createElement","canvasCtx","getContext","drawImage","toDataURL","onload","tempW","tempH","min","startX","Math","round","startY","finalImage","getImagePortion","console","log","imgObj","newWidth","newHeight","ratio","ctx","bufferedCanvas","bufferedCtx"],"mappings":"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","sourcesContent":["const ImageResizer = (imageUrl, size) => {\n    let tempImg = new Image();\n    tempImg.src = imageUrl;\n    let ImageResizedUrl\n\n    let createCanvas = (img, width, height) => {\n        let canvas = document.createElement('canvas');\n        let canvasCtx = canvas.getContext('2d');\n        canvas.width = width;\n        canvas.height = height\n        canvasCtx.drawImage(img, 0, 0, canvas.width, canvas.height)\n        return canvas.toDataURL()\n    }\n\n    tempImg.onload = () => {\n        let tempW = tempImg.width;\n        let tempH = tempImg.height;\n\n        let min = tempW >= tempH ? tempH : tempW;\n        size = size || min\n\n        if (tempH <= size && tempW <= size) {\n            createCanvas(imageUrl, tempW, tempH)\n        }\n\n        let startX = 0;\n        if (min !== tempW) {\n            startX = Math.round(tempW / 2 - (min / 2))\n        }\n\n        let startY = 0;\n        if (min !== tempH) {\n            startY = Math.round(tempH / 2 - (min / 2))\n        }\n\n        let finalImage = new Image();\n        finalImage.src = getImagePortion(tempImg, min, min, startX, startY, 1);\n\n        console.log(createCanvas(finalImage, size, size))\n\n\n    }\n\n    return ImageResizedUrl;\n}\n\n\nconst getImagePortion = (imgObj, newWidth, newHeight, startX, startY, ratio) => {\n    let canvas = document.createElement('canvas');\n    let ctx = canvas.getContext('2d');\n    canvas.width = newWidth;\n    canvas.height = newHeight;\n\n    let bufferedCanvas = document.createElement('canvas');\n    let bufferedCtx = bufferedCanvas.getContext('2d');\n    bufferedCanvas.width = imgObj.width;\n    bufferedCanvas.height = imgObj.height;\n\n    bufferedCtx.drawImage(imgObj, 0, 0);\n\n    ctx.drawImage(bufferedCanvas, 0, 0, newWidth * ratio, newHeight * ratio, 0, 0, newWidth, newHeight)\n    return canvas.toDataURL();\n}\n\nexport default ImageResizer"]},"metadata":{},"sourceType":"module"}