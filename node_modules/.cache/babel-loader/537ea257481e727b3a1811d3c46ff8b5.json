{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ConstDependency = require(\"./dependencies/ConstDependency\");\n\nconst NullFactory = require(\"./NullFactory\");\n/** @typedef {import(\"./Compiler\")} Compiler */\n\n\nclass CompatibilityPlugin {\n  /**\n   * Apply the plugin\n   * @param {Compiler} compiler Webpack Compiler\n   * @returns {void}\n   */\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"CompatibilityPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      compilation.dependencyFactories.set(ConstDependency, new NullFactory());\n      compilation.dependencyTemplates.set(ConstDependency, new ConstDependency.Template());\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"CompatibilityPlugin\", (parser, parserOptions) => {\n        if (parserOptions.browserify !== undefined && !parserOptions.browserify) return;\n        parser.hooks.call.for(\"require\").tap(\"CompatibilityPlugin\", expr => {\n          // support for browserify style require delegator: \"require(o, !0)\"\n          if (expr.arguments.length !== 2) return;\n          const second = parser.evaluateExpression(expr.arguments[1]);\n          if (!second.isBoolean()) return;\n          if (second.asBool() !== true) return;\n          const dep = new ConstDependency(\"require\", expr.callee.range);\n          dep.loc = expr.loc;\n\n          if (parser.state.current.dependencies.length > 1) {\n            const last = parser.state.current.dependencies[parser.state.current.dependencies.length - 1];\n            if (last.critical && last.options && last.options.request === \".\" && last.userRequest === \".\" && last.options.recursive) parser.state.current.dependencies.pop();\n          }\n\n          parser.state.current.addDependency(dep);\n          return true;\n        });\n      });\n    });\n  }\n\n}\n\nmodule.exports = CompatibilityPlugin;","map":null,"metadata":{},"sourceType":"script"}