{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst path = require(\"path\");\n\nmodule.exports = class MainFieldPlugin {\n  constructor(source, options, target) {\n    this.source = source;\n    this.options = options;\n    this.target = target;\n  }\n\n  apply(resolver) {\n    const target = resolver.ensureHook(this.target);\n    resolver.getHook(this.source).tapAsync(\"MainFieldPlugin\", (request, resolveContext, callback) => {\n      if (request.path !== request.descriptionFileRoot) return callback();\n      if (request.alreadyTriedMainField === request.descriptionFilePath) return callback();\n      const content = request.descriptionFileData;\n      const filename = path.basename(request.descriptionFilePath);\n      let mainModule;\n      const field = this.options.name;\n\n      if (Array.isArray(field)) {\n        let current = content;\n\n        for (let j = 0; j < field.length; j++) {\n          if (current === null || typeof current !== \"object\") {\n            current = null;\n            break;\n          }\n\n          current = current[field[j]];\n        }\n\n        if (typeof current === \"string\") {\n          mainModule = current;\n        }\n      } else {\n        if (typeof content[field] === \"string\") {\n          mainModule = content[field];\n        }\n      }\n\n      if (!mainModule) return callback();\n      if (this.options.forceRelative && !/^\\.\\.?\\//.test(mainModule)) mainModule = \"./\" + mainModule;\n      const obj = Object.assign({}, request, {\n        request: mainModule,\n        alreadyTriedMainField: request.descriptionFilePath\n      });\n      return resolver.doResolve(target, obj, \"use \" + mainModule + \" from \" + this.options.name + \" in \" + filename, resolveContext, callback);\n    });\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}