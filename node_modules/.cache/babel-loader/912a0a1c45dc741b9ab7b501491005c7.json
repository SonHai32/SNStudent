{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n\t*/\n\"use strict\";\n\nconst DllEntryPlugin = require(\"./DllEntryPlugin\");\n\nconst LibManifestPlugin = require(\"./LibManifestPlugin\");\n\nconst FlagInitialModulesAsUsedPlugin = require(\"./FlagInitialModulesAsUsedPlugin\");\n\nconst validateOptions = require(\"schema-utils\");\n\nconst schema = require(\"../schemas/plugins/DllPlugin.json\");\n/** @typedef {import(\"../declarations/plugins/DllPlugin\").DllPluginOptions} DllPluginOptions */\n\n\nclass DllPlugin {\n  /**\n   * @param {DllPluginOptions} options options object\n   */\n  constructor(options) {\n    validateOptions(schema, options, \"Dll Plugin\");\n    this.options = options;\n  }\n\n  apply(compiler) {\n    compiler.hooks.entryOption.tap(\"DllPlugin\", (context, entry) => {\n      const itemToPlugin = (item, name) => {\n        if (Array.isArray(item)) {\n          return new DllEntryPlugin(context, item, name);\n        }\n\n        throw new Error(\"DllPlugin: supply an Array as entry\");\n      };\n\n      if (typeof entry === \"object\" && !Array.isArray(entry)) {\n        Object.keys(entry).forEach(name => {\n          itemToPlugin(entry[name], name).apply(compiler);\n        });\n      } else {\n        itemToPlugin(entry, \"main\").apply(compiler);\n      }\n\n      return true;\n    });\n    new LibManifestPlugin(this.options).apply(compiler);\n\n    if (!this.options.entryOnly) {\n      new FlagInitialModulesAsUsedPlugin(\"DllPlugin\").apply(compiler);\n    }\n  }\n\n}\n\nmodule.exports = DllPlugin;","map":null,"metadata":{},"sourceType":"script"}