{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Stats = require(\"./Stats\");\n\nclass Watching {\n  constructor(compiler, watchOptions, handler) {\n    this.startTime = null;\n    this.invalid = false;\n    this.handler = handler;\n    this.callbacks = [];\n    this.closed = false;\n    this.suspended = false;\n\n    if (typeof watchOptions === \"number\") {\n      this.watchOptions = {\n        aggregateTimeout: watchOptions\n      };\n    } else if (watchOptions && typeof watchOptions === \"object\") {\n      this.watchOptions = Object.assign({}, watchOptions);\n    } else {\n      this.watchOptions = {};\n    }\n\n    this.watchOptions.aggregateTimeout = this.watchOptions.aggregateTimeout || 200;\n    this.compiler = compiler;\n    this.running = true;\n    this.compiler.readRecords(err => {\n      if (err) return this._done(err);\n\n      this._go();\n    });\n  }\n\n  _go() {\n    this.startTime = Date.now();\n    this.running = true;\n    this.invalid = false;\n    this.compiler.hooks.watchRun.callAsync(this.compiler, err => {\n      if (err) return this._done(err);\n\n      const onCompiled = (err, compilation) => {\n        if (err) return this._done(err);\n        if (this.invalid) return this._done();\n\n        if (this.compiler.hooks.shouldEmit.call(compilation) === false) {\n          return this._done(null, compilation);\n        }\n\n        this.compiler.emitAssets(compilation, err => {\n          if (err) return this._done(err);\n          if (this.invalid) return this._done();\n          this.compiler.emitRecords(err => {\n            if (err) return this._done(err);\n\n            if (compilation.hooks.needAdditionalPass.call()) {\n              compilation.needAdditionalPass = true;\n              const stats = new Stats(compilation);\n              stats.startTime = this.startTime;\n              stats.endTime = Date.now();\n              this.compiler.hooks.done.callAsync(stats, err => {\n                if (err) return this._done(err);\n                this.compiler.hooks.additionalPass.callAsync(err => {\n                  if (err) return this._done(err);\n                  this.compiler.compile(onCompiled);\n                });\n              });\n              return;\n            }\n\n            return this._done(null, compilation);\n          });\n        });\n      };\n\n      this.compiler.compile(onCompiled);\n    });\n  }\n\n  _getStats(compilation) {\n    const stats = new Stats(compilation);\n    stats.startTime = this.startTime;\n    stats.endTime = Date.now();\n    return stats;\n  }\n\n  _done(err, compilation) {\n    this.running = false;\n    if (this.invalid) return this._go();\n    const stats = compilation ? this._getStats(compilation) : null;\n\n    if (err) {\n      this.compiler.hooks.failed.call(err);\n      this.handler(err, stats);\n      return;\n    }\n\n    this.compiler.hooks.done.callAsync(stats, () => {\n      this.handler(null, stats);\n\n      if (!this.closed) {\n        this.watch(Array.from(compilation.fileDependencies), Array.from(compilation.contextDependencies), Array.from(compilation.missingDependencies));\n      }\n\n      for (const cb of this.callbacks) cb();\n\n      this.callbacks.length = 0;\n    });\n  }\n\n  watch(files, dirs, missing) {\n    this.pausedWatcher = null;\n    this.watcher = this.compiler.watchFileSystem.watch(files, dirs, missing, this.startTime, this.watchOptions, (err, filesModified, contextModified, missingModified, fileTimestamps, contextTimestamps, removedFiles) => {\n      this.pausedWatcher = this.watcher;\n      this.watcher = null;\n\n      if (err) {\n        return this.handler(err);\n      }\n\n      this.compiler.fileTimestamps = fileTimestamps;\n      this.compiler.contextTimestamps = contextTimestamps;\n      this.compiler.removedFiles = removedFiles;\n\n      if (!this.suspended) {\n        this._invalidate();\n      }\n    }, (fileName, changeTime) => {\n      this.compiler.hooks.invalid.call(fileName, changeTime);\n    });\n  }\n\n  invalidate(callback) {\n    if (callback) {\n      this.callbacks.push(callback);\n    }\n\n    if (this.watcher) {\n      this.compiler.fileTimestamps = this.watcher.getFileTimestamps();\n      this.compiler.contextTimestamps = this.watcher.getContextTimestamps();\n    }\n\n    return this._invalidate();\n  }\n\n  _invalidate() {\n    if (this.watcher) {\n      this.pausedWatcher = this.watcher;\n      this.watcher.pause();\n      this.watcher = null;\n    }\n\n    if (this.running) {\n      this.invalid = true;\n      return false;\n    } else {\n      this._go();\n    }\n  }\n\n  suspend() {\n    this.suspended = true;\n    this.invalid = false;\n  }\n\n  resume() {\n    if (this.suspended) {\n      this.suspended = false;\n\n      this._invalidate();\n    }\n  }\n\n  close(callback) {\n    const finalCallback = () => {\n      this.compiler.hooks.watchClose.call();\n      this.compiler.running = false;\n      this.compiler.watchMode = false;\n      if (callback !== undefined) callback();\n    };\n\n    this.closed = true;\n\n    if (this.watcher) {\n      this.watcher.close();\n      this.watcher = null;\n    }\n\n    if (this.pausedWatcher) {\n      this.pausedWatcher.close();\n      this.pausedWatcher = null;\n    }\n\n    if (this.running) {\n      this.invalid = true;\n      this._done = finalCallback;\n    } else {\n      finalCallback();\n    }\n  }\n\n}\n\nmodule.exports = Watching;","map":null,"metadata":{},"sourceType":"script"}