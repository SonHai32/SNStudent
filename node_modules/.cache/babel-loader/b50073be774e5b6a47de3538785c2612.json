{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst _require = require(\"webpack-sources\"),\n      ConcatSource = _require.ConcatSource;\n/** @typedef {import(\"./Compilation\")} Compilation */\n\n\nclass SetVarMainTemplatePlugin {\n  /**\n   * @param {string} varExpression the accessor where the library is exported\n   * @param {boolean} copyObject specify copying the exports\n   */\n  constructor(varExpression, copyObject) {\n    /** @type {string} */\n    this.varExpression = varExpression;\n    /** @type {boolean} */\n\n    this.copyObject = copyObject;\n  }\n  /**\n   * @param {Compilation} compilation the compilation instance\n   * @returns {void}\n   */\n\n\n  apply(compilation) {\n    const mainTemplate = compilation.mainTemplate,\n          chunkTemplate = compilation.chunkTemplate;\n\n    const onRenderWithEntry = (source, chunk, hash) => {\n      const varExpression = mainTemplate.getAssetPath(this.varExpression, {\n        hash,\n        chunk\n      });\n\n      if (this.copyObject) {\n        return new ConcatSource(\"(function(e, a) { for(var i in a) e[i] = a[i]; }(\".concat(varExpression, \", \"), source, \"))\");\n      } else {\n        const prefix = \"\".concat(varExpression, \" =\\n\");\n        return new ConcatSource(prefix, source);\n      }\n    };\n\n    for (const template of [mainTemplate, chunkTemplate]) {\n      template.hooks.renderWithEntry.tap(\"SetVarMainTemplatePlugin\", onRenderWithEntry);\n    }\n\n    mainTemplate.hooks.globalHashPaths.tap(\"SetVarMainTemplatePlugin\", paths => {\n      if (this.varExpression) paths.push(this.varExpression);\n      return paths;\n    });\n    mainTemplate.hooks.hash.tap(\"SetVarMainTemplatePlugin\", hash => {\n      hash.update(\"set var\");\n      hash.update(\"\".concat(this.varExpression));\n      hash.update(\"\".concat(this.copyObject));\n    });\n  }\n\n}\n\nmodule.exports = SetVarMainTemplatePlugin;","map":null,"metadata":{},"sourceType":"script"}