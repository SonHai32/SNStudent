{"ast":null,"code":"/*\n MIT License http://www.opensource.org/licenses/mit-license.php\n Author Tobias Koppers @sokra\n */\n\"use strict\";\n/**\n * @enum {string}\n */\n\nconst LogType = Object.freeze({\n  error: \"error\",\n  // message, c style arguments\n  warn: \"warn\",\n  // message, c style arguments\n  info: \"info\",\n  // message, c style arguments\n  log: \"log\",\n  // message, c style arguments\n  debug: \"debug\",\n  // message, c style arguments\n  trace: \"trace\",\n  // no arguments\n  group: \"group\",\n  // [label]\n  groupCollapsed: \"groupCollapsed\",\n  // [label]\n  groupEnd: \"groupEnd\",\n  // [label]\n  profile: \"profile\",\n  // [profileName]\n  profileEnd: \"profileEnd\",\n  // [profileName]\n  time: \"time\",\n  // name, time as [seconds, nanoseconds]\n  clear: \"clear\",\n  // no arguments\n  status: \"status\" // message, arguments\n\n});\nexports.LogType = LogType;\n/** @typedef {LogType} LogTypeEnum */\n\nconst LOG_SYMBOL = Symbol(\"webpack logger raw log method\");\nconst TIMERS_SYMBOL = Symbol(\"webpack logger times\");\n\nclass WebpackLogger {\n  /**\n   * @param {function(LogType, any[]=): void} log log function\n   */\n  constructor(log) {\n    this[LOG_SYMBOL] = log;\n  }\n\n  error(...args) {\n    this[LOG_SYMBOL](LogType.error, args);\n  }\n\n  warn(...args) {\n    this[LOG_SYMBOL](LogType.warn, args);\n  }\n\n  info(...args) {\n    this[LOG_SYMBOL](LogType.info, args);\n  }\n\n  log(...args) {\n    this[LOG_SYMBOL](LogType.log, args);\n  }\n\n  debug(...args) {\n    this[LOG_SYMBOL](LogType.debug, args);\n  }\n\n  assert(assertion, ...args) {\n    if (!assertion) {\n      this[LOG_SYMBOL](LogType.error, args);\n    }\n  }\n\n  trace() {\n    this[LOG_SYMBOL](LogType.trace, [\"Trace\"]);\n  }\n\n  clear() {\n    this[LOG_SYMBOL](LogType.clear);\n  }\n\n  status(...args) {\n    this[LOG_SYMBOL](LogType.status, args);\n  }\n\n  group(...args) {\n    this[LOG_SYMBOL](LogType.group, args);\n  }\n\n  groupCollapsed(...args) {\n    this[LOG_SYMBOL](LogType.groupCollapsed, args);\n  }\n\n  groupEnd(...args) {\n    this[LOG_SYMBOL](LogType.groupEnd, args);\n  }\n\n  profile(label) {\n    this[LOG_SYMBOL](LogType.profile, [label]);\n  }\n\n  profileEnd(label) {\n    this[LOG_SYMBOL](LogType.profileEnd, [label]);\n  }\n\n  time(label) {\n    this[TIMERS_SYMBOL] = this[TIMERS_SYMBOL] || new Map();\n    this[TIMERS_SYMBOL].set(label, process.hrtime());\n  }\n\n  timeLog(label) {\n    const prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);\n\n    if (!prev) {\n      throw new Error(\"No such label '\".concat(label, \"' for WebpackLogger.timeLog()\"));\n    }\n\n    const time = process.hrtime(prev);\n    this[LOG_SYMBOL](LogType.time, [label, ...time]);\n  }\n\n  timeEnd(label) {\n    const prev = this[TIMERS_SYMBOL] && this[TIMERS_SYMBOL].get(label);\n\n    if (!prev) {\n      throw new Error(\"No such label '\".concat(label, \"' for WebpackLogger.timeEnd()\"));\n    }\n\n    const time = process.hrtime(prev);\n    this[TIMERS_SYMBOL].delete(label);\n    this[LOG_SYMBOL](LogType.time, [label, ...time]);\n  }\n\n}\n\nexports.Logger = WebpackLogger;","map":null,"metadata":{},"sourceType":"script"}