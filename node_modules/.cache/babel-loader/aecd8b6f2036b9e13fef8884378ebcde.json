{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ChunkGroup = require(\"./ChunkGroup\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/**\n * Entrypoint serves as an encapsulation primitive for chunks that are\n * a part of a single ChunkGroup. They represent all bundles that need to be loaded for a\n * single instance of a page. Multi-page application architectures will typically yield multiple Entrypoint objects\n * inside of the compilation, whereas a Single Page App may only contain one with many lazy-loaded chunks.\n */\n\n\nclass Entrypoint extends ChunkGroup {\n  /**\n   * Creates an instance of Entrypoint.\n   * @param {string} name the name of the entrypoint\n   */\n  constructor(name) {\n    super(name);\n    /** @type {Chunk=} */\n\n    this.runtimeChunk = undefined;\n  }\n  /**\n   * isInitial will always return true for Entrypoint ChunkGroup.\n   * @returns {true} returns true as all entrypoints are initial ChunkGroups\n   */\n\n\n  isInitial() {\n    return true;\n  }\n  /**\n   * Sets the runtimeChunk for an entrypoint.\n   * @param {Chunk} chunk the chunk being set as the runtime chunk.\n   * @returns {void}\n   */\n\n\n  setRuntimeChunk(chunk) {\n    this.runtimeChunk = chunk;\n  }\n  /**\n   * Fetches the chunk reference containing the webpack bootstrap code\n   * @returns {Chunk} returns the runtime chunk or first chunk in `this.chunks`\n   */\n\n\n  getRuntimeChunk() {\n    return this.runtimeChunk || this.chunks[0];\n  }\n  /**\n   * @param {Chunk} oldChunk chunk to be replaced\n   * @param {Chunk} newChunk New chunkt that will be replaced\n   * @returns {boolean} rerturns true for\n   */\n\n\n  replaceChunk(oldChunk, newChunk) {\n    if (this.runtimeChunk === oldChunk) this.runtimeChunk = newChunk;\n    return super.replaceChunk(oldChunk, newChunk);\n  }\n\n}\n\nmodule.exports = Entrypoint;","map":null,"metadata":{},"sourceType":"script"}