{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Gajus Kuizinas @gajus\n*/\n\"use strict\";\n\nconst Ajv = require(\"ajv\");\n\nconst ajv = new Ajv({\n  errorDataPath: \"configuration\",\n  allErrors: true,\n  verbose: true\n});\n\nrequire(\"ajv-keywords\")(ajv, [\"instanceof\"]);\n\nrequire(\"../schemas/ajv.absolutePath\")(ajv);\n\nconst validateSchema = (schema, options) => {\n  if (Array.isArray(options)) {\n    const errors = options.map(options => validateObject(schema, options));\n    errors.forEach((list, idx) => {\n      const applyPrefix = err => {\n        err.dataPath = \"[\".concat(idx, \"]\").concat(err.dataPath);\n\n        if (err.children) {\n          err.children.forEach(applyPrefix);\n        }\n      };\n\n      list.forEach(applyPrefix);\n    });\n    return errors.reduce((arr, items) => {\n      return arr.concat(items);\n    }, []);\n  } else {\n    return validateObject(schema, options);\n  }\n};\n\nconst validateObject = (schema, options) => {\n  const validate = ajv.compile(schema);\n  const valid = validate(options);\n  return valid ? [] : filterErrors(validate.errors);\n};\n\nconst filterErrors = errors => {\n  let newErrors = [];\n\n  for (const err of errors) {\n    const dataPath = err.dataPath;\n    let children = [];\n    newErrors = newErrors.filter(oldError => {\n      if (oldError.dataPath.includes(dataPath)) {\n        if (oldError.children) {\n          children = children.concat(oldError.children.slice(0));\n        }\n\n        oldError.children = undefined;\n        children.push(oldError);\n        return false;\n      }\n\n      return true;\n    });\n\n    if (children.length) {\n      err.children = children;\n    }\n\n    newErrors.push(err);\n  }\n\n  return newErrors;\n};\n\nmodule.exports = validateSchema;","map":null,"metadata":{},"sourceType":"script"}