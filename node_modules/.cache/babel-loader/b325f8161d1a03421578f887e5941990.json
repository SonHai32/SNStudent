{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n/** @typedef {import(\"./NormalModule\")} NormalModule */\n\n/** @typedef {import(\"./RuntimeTemplate\")} RuntimeTemplate */\n\n/** @typedef {import(\"webpack-sources\").Source} Source */\n\n/** @typedef {import(\"./Dependency\").DependencyTemplate} DependencyTemplate */\n\n/**\n *\n */\n\nclass Generator {\n  static byType(map) {\n    return new ByTypeGenerator(map);\n  }\n  /**\n   * @abstract\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n   * @param {RuntimeTemplate} runtimeTemplate the runtime template\n   * @param {string} type which kind of code should be generated\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, dependencyTemplates, runtimeTemplate, type) {\n    throw new Error(\"Generator.generate: must be overridden\");\n  }\n\n}\n\nclass ByTypeGenerator extends Generator {\n  constructor(map) {\n    super();\n    this.map = map;\n  }\n  /**\n   * @param {NormalModule} module module for which the code should be generated\n   * @param {Map<Function, DependencyTemplate>} dependencyTemplates mapping from dependencies to templates\n   * @param {RuntimeTemplate} runtimeTemplate the runtime template\n   * @param {string} type which kind of code should be generated\n   * @returns {Source} generated code\n   */\n\n\n  generate(module, dependencyTemplates, runtimeTemplate, type) {\n    const generator = this.map[type];\n\n    if (!generator) {\n      throw new Error(\"Generator.byType: no generator specified for \".concat(type));\n    }\n\n    return generator.generate(module, dependencyTemplates, runtimeTemplate, type);\n  }\n\n}\n\nmodule.exports = Generator;","map":null,"metadata":{},"sourceType":"script"}