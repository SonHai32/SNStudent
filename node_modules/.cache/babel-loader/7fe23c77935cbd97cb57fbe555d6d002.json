{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nvar _slicedToArray = require(\"/home/hari/Desktop/web-dev/React/cstudy/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst SortableSet = require(\"./util/SortableSet\");\n\nconst compareLocations = require(\"./compareLocations\");\n/** @typedef {import(\"./Chunk\")} Chunk */\n\n/** @typedef {import(\"./Module\")} Module */\n\n/** @typedef {import(\"./ModuleReason\")} ModuleReason */\n\n/** @typedef {{module: Module, loc: TODO, request: string}} OriginRecord */\n\n/** @typedef {string|{name: string}} ChunkGroupOptions */\n\n\nlet debugId = 5000;\n/**\n * @template T\n * @param {SortableSet<T>} set set to convert to array.\n * @returns {T[]} the array format of existing set\n */\n\nconst getArray = set => Array.from(set);\n/**\n * A convenience method used to sort chunks based on their id's\n * @param {ChunkGroup} a first sorting comparator\n * @param {ChunkGroup} b second sorting comparator\n * @returns {1|0|-1} a sorting index to determine order\n */\n\n\nconst sortById = (a, b) => {\n  if (a.id < b.id) return -1;\n  if (b.id < a.id) return 1;\n  return 0;\n};\n/**\n * @param {OriginRecord} a the first comparator in sort\n * @param {OriginRecord} b the second comparator in sort\n * @returns {1|-1|0} returns sorting order as index\n */\n\n\nconst sortOrigin = (a, b) => {\n  const aIdent = a.module ? a.module.identifier() : \"\";\n  const bIdent = b.module ? b.module.identifier() : \"\";\n  if (aIdent < bIdent) return -1;\n  if (aIdent > bIdent) return 1;\n  return compareLocations(a.loc, b.loc);\n};\n\nclass ChunkGroup {\n  /**\n   * Creates an instance of ChunkGroup.\n   * @param {ChunkGroupOptions=} options chunk group options passed to chunkGroup\n   */\n  constructor(options) {\n    if (typeof options === \"string\") {\n      options = {\n        name: options\n      };\n    } else if (!options) {\n      options = {\n        name: undefined\n      };\n    }\n    /** @type {number} */\n\n\n    this.groupDebugId = debugId++;\n    this.options = options;\n    /** @type {SortableSet<ChunkGroup>} */\n\n    this._children = new SortableSet(undefined, sortById);\n    this._parents = new SortableSet(undefined, sortById);\n    this._blocks = new SortableSet();\n    /** @type {Chunk[]} */\n\n    this.chunks = [];\n    /** @type {OriginRecord[]} */\n\n    this.origins = [];\n    /** Indicies in top-down order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndicies = new Map();\n    /** Indicies in bottom-up order */\n\n    /** @private @type {Map<Module, number>} */\n\n    this._moduleIndicies2 = new Map();\n  }\n  /**\n   * when a new chunk is added to a chunkGroup, addingOptions will occur.\n   * @param {ChunkGroupOptions} options the chunkGroup options passed to addOptions\n   * @returns {void}\n   */\n\n\n  addOptions(options) {\n    for (const key of Object.keys(options)) {\n      if (this.options[key] === undefined) {\n        this.options[key] = options[key];\n      } else if (this.options[key] !== options[key]) {\n        if (key.endsWith(\"Order\")) {\n          this.options[key] = Math.max(this.options[key], options[key]);\n        } else {\n          throw new Error(\"ChunkGroup.addOptions: No option merge strategy for \".concat(key));\n        }\n      }\n    }\n  }\n  /**\n   * returns the name of current ChunkGroup\n   * @returns {string|undefined} returns the ChunkGroup name\n   */\n\n\n  get name() {\n    return this.options.name;\n  }\n  /**\n   * sets a new name for current ChunkGroup\n   * @param {string} value the new name for ChunkGroup\n   * @returns {void}\n   */\n\n\n  set name(value) {\n    this.options.name = value;\n  }\n  /**\n   * get a uniqueId for ChunkGroup, made up of its member Chunk debugId's\n   * @returns {string} a unique concatenation of chunk debugId's\n   */\n\n\n  get debugId() {\n    return Array.from(this.chunks, x => x.debugId).join(\"+\");\n  }\n  /**\n   * get a unique id for ChunkGroup, made up of its member Chunk id's\n   * @returns {string} a unique concatenation of chunk ids\n   */\n\n\n  get id() {\n    return Array.from(this.chunks, x => x.id).join(\"+\");\n  }\n  /**\n   * Performs an unshift of a specific chunk\n   * @param {Chunk} chunk chunk being unshifted\n   * @returns {boolean} returns true if attempted chunk shift is accepted\n   */\n\n\n  unshiftChunk(chunk) {\n    const oldIdx = this.chunks.indexOf(chunk);\n\n    if (oldIdx > 0) {\n      this.chunks.splice(oldIdx, 1);\n      this.chunks.unshift(chunk);\n    } else if (oldIdx < 0) {\n      this.chunks.unshift(chunk);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * inserts a chunk before another existing chunk in group\n   * @param {Chunk} chunk Chunk being inserted\n   * @param {Chunk} before Placeholder/target chunk marking new chunk insertion point\n   * @returns {boolean} return true if insertion was successful\n   */\n\n\n  insertChunk(chunk, before) {\n    const oldIdx = this.chunks.indexOf(chunk);\n    const idx = this.chunks.indexOf(before);\n\n    if (idx < 0) {\n      throw new Error(\"before chunk not found\");\n    }\n\n    if (oldIdx >= 0 && oldIdx > idx) {\n      this.chunks.splice(oldIdx, 1);\n      this.chunks.splice(idx, 0, chunk);\n    } else if (oldIdx < 0) {\n      this.chunks.splice(idx, 0, chunk);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * add a chunk into ChunkGroup. Is pushed on or prepended\n   * @param {Chunk} chunk chunk being pushed into ChunkGroupS\n   * @returns {boolean} returns true if chunk addition was ssuccesful.\n   */\n\n\n  pushChunk(chunk) {\n    const oldIdx = this.chunks.indexOf(chunk);\n\n    if (oldIdx >= 0) {\n      return false;\n    }\n\n    this.chunks.push(chunk);\n    return true;\n  }\n  /**\n   * @param {Chunk} oldChunk chunk to be replaced\n   * @param {Chunk} newChunk New chunkt that will be replaced\n   * @returns {boolean} rerturns true for\n   */\n\n\n  replaceChunk(oldChunk, newChunk) {\n    const oldIdx = this.chunks.indexOf(oldChunk);\n    if (oldIdx < 0) return false;\n    const newIdx = this.chunks.indexOf(newChunk);\n\n    if (newIdx < 0) {\n      this.chunks[oldIdx] = newChunk;\n      return true;\n    }\n\n    if (newIdx < oldIdx) {\n      this.chunks.splice(oldIdx, 1);\n      return true;\n    } else if (newIdx !== oldIdx) {\n      this.chunks[oldIdx] = newChunk;\n      this.chunks.splice(newIdx, 1);\n      return true;\n    }\n  }\n\n  removeChunk(chunk) {\n    const idx = this.chunks.indexOf(chunk);\n\n    if (idx >= 0) {\n      this.chunks.splice(idx, 1);\n      return true;\n    }\n\n    return false;\n  }\n\n  isInitial() {\n    return false;\n  }\n\n  addChild(chunk) {\n    if (this._children.has(chunk)) {\n      return false;\n    }\n\n    this._children.add(chunk);\n\n    return true;\n  }\n\n  getChildren() {\n    return this._children.getFromCache(getArray);\n  }\n\n  getNumberOfChildren() {\n    return this._children.size;\n  }\n\n  get childrenIterable() {\n    return this._children;\n  }\n\n  removeChild(chunk) {\n    if (!this._children.has(chunk)) {\n      return false;\n    }\n\n    this._children.delete(chunk);\n\n    chunk.removeParent(this);\n    return true;\n  }\n\n  addParent(parentChunk) {\n    if (!this._parents.has(parentChunk)) {\n      this._parents.add(parentChunk);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  getParents() {\n    return this._parents.getFromCache(getArray);\n  }\n\n  setParents(newParents) {\n    this._parents.clear();\n\n    for (const p of newParents) {\n      this._parents.add(p);\n    }\n  }\n\n  getNumberOfParents() {\n    return this._parents.size;\n  }\n\n  hasParent(parent) {\n    return this._parents.has(parent);\n  }\n\n  get parentsIterable() {\n    return this._parents;\n  }\n\n  removeParent(chunk) {\n    if (this._parents.delete(chunk)) {\n      chunk.removeChunk(this);\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * @returns {Array} - an array containing the blocks\n   */\n\n\n  getBlocks() {\n    return this._blocks.getFromCache(getArray);\n  }\n\n  getNumberOfBlocks() {\n    return this._blocks.size;\n  }\n\n  hasBlock(block) {\n    return this._blocks.has(block);\n  }\n\n  get blocksIterable() {\n    return this._blocks;\n  }\n\n  addBlock(block) {\n    if (!this._blocks.has(block)) {\n      this._blocks.add(block);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  addOrigin(module, loc, request) {\n    this.origins.push({\n      module,\n      loc,\n      request\n    });\n  }\n\n  containsModule(module) {\n    for (const chunk of this.chunks) {\n      if (chunk.containsModule(module)) return true;\n    }\n\n    return false;\n  }\n\n  getFiles() {\n    const files = new Set();\n\n    for (const chunk of this.chunks) {\n      for (const file of chunk.files) {\n        files.add(file);\n      }\n    }\n\n    return Array.from(files);\n  }\n  /**\n   * @param {string=} reason reason for removing ChunkGroup\n   * @returns {void}\n   */\n\n\n  remove(reason) {\n    // cleanup parents\n    for (const parentChunkGroup of this._parents) {\n      // remove this chunk from its parents\n      parentChunkGroup._children.delete(this); // cleanup \"sub chunks\"\n\n\n      for (const chunkGroup of this._children) {\n        /**\n         * remove this chunk as \"intermediary\" and connect\n         * it \"sub chunks\" and parents directly\n         */\n        // add parent to each \"sub chunk\"\n        chunkGroup.addParent(parentChunkGroup); // add \"sub chunk\" to parent\n\n        parentChunkGroup.addChild(chunkGroup);\n      }\n    }\n    /**\n     * we need to iterate again over the children\n     * to remove this from the childs parents.\n     * This can not be done in the above loop\n     * as it is not guaranteed that `this._parents` contains anything.\n     */\n\n\n    for (const chunkGroup of this._children) {\n      // remove this as parent of every \"sub chunk\"\n      chunkGroup._parents.delete(this);\n    } // cleanup blocks\n\n\n    for (const block of this._blocks) {\n      block.chunkGroup = null;\n    } // remove chunks\n\n\n    for (const chunk of this.chunks) {\n      chunk.removeGroup(this);\n    }\n  }\n\n  sortItems() {\n    this.origins.sort(sortOrigin);\n\n    this._parents.sort();\n\n    this._children.sort();\n  }\n  /**\n   * Sorting predicate which allows current ChunkGroup to be compared against another.\n   * Sorting values are based off of number of chunks in ChunkGroup.\n   *\n   * @param {ChunkGroup} otherGroup the chunkGroup to compare this against\n   * @returns {-1|0|1} sort position for comparison\n   */\n\n\n  compareTo(otherGroup) {\n    if (this.chunks.length > otherGroup.chunks.length) return -1;\n    if (this.chunks.length < otherGroup.chunks.length) return 1;\n    const a = this.chunks[Symbol.iterator]();\n    const b = otherGroup.chunks[Symbol.iterator](); // eslint-disable-next-line no-constant-condition\n\n    while (true) {\n      const aItem = a.next();\n      const bItem = b.next();\n      if (aItem.done) return 0;\n      const cmp = aItem.value.compareTo(bItem.value);\n      if (cmp !== 0) return cmp;\n    }\n  }\n\n  getChildrenByOrders() {\n    const lists = new Map();\n\n    for (const childGroup of this._children) {\n      // TODO webpack 5 remove this check for options\n      if (typeof childGroup.options === \"object\") {\n        for (const key of Object.keys(childGroup.options)) {\n          if (key.endsWith(\"Order\")) {\n            const name = key.substr(0, key.length - \"Order\".length);\n            let list = lists.get(name);\n\n            if (list === undefined) {\n              lists.set(name, list = []);\n            }\n\n            list.push({\n              order: childGroup.options[key],\n              group: childGroup\n            });\n          }\n        }\n      }\n    }\n\n    const result = Object.create(null);\n\n    for (const _ref of lists) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const name = _ref2[0];\n      const list = _ref2[1];\n      list.sort((a, b) => {\n        const cmp = b.order - a.order;\n        if (cmp !== 0) return cmp; // TODO webpack 5 remove this check of compareTo\n\n        if (a.group.compareTo) {\n          return a.group.compareTo(b.group);\n        }\n\n        return 0;\n      });\n      result[name] = list.map(i => i.group);\n    }\n\n    return result;\n  }\n  /**\n   * Sets the top-down index of a module in this ChunkGroup\n   * @param {Module} module module for which the index should be set\n   * @param {number} index the index of the module\n   * @returns {void}\n   */\n\n\n  setModuleIndex(module, index) {\n    this._moduleIndicies.set(module, index);\n  }\n  /**\n   * Gets the top-down index of a module in this ChunkGroup\n   * @param {Module} module the module\n   * @returns {number} index\n   */\n\n\n  getModuleIndex(module) {\n    return this._moduleIndicies.get(module);\n  }\n  /**\n   * Sets the bottom-up index of a module in this ChunkGroup\n   * @param {Module} module module for which the index should be set\n   * @param {number} index the index of the module\n   * @returns {void}\n   */\n\n\n  setModuleIndex2(module, index) {\n    this._moduleIndicies2.set(module, index);\n  }\n  /**\n   * Gets the bottom-up index of a module in this ChunkGroup\n   * @param {Module} module the module\n   * @returns {number} index\n   */\n\n\n  getModuleIndex2(module) {\n    return this._moduleIndicies2.get(module);\n  }\n\n  checkConstraints() {\n    const chunk = this;\n\n    for (const child of chunk._children) {\n      if (!child._parents.has(chunk)) {\n        throw new Error(\"checkConstraints: child missing parent \".concat(chunk.debugId, \" -> \").concat(child.debugId));\n      }\n    }\n\n    for (const parentChunk of chunk._parents) {\n      if (!parentChunk._children.has(chunk)) {\n        throw new Error(\"checkConstraints: parent missing child \".concat(parentChunk.debugId, \" <- \").concat(chunk.debugId));\n      }\n    }\n  }\n\n}\n\nmodule.exports = ChunkGroup;","map":null,"metadata":{},"sourceType":"script"}