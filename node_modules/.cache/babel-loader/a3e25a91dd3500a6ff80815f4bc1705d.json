{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst Compiler = require(\"./Compiler\");\n\nconst MultiCompiler = require(\"./MultiCompiler\");\n\nconst NodeEnvironmentPlugin = require(\"./node/NodeEnvironmentPlugin\");\n\nconst WebpackOptionsApply = require(\"./WebpackOptionsApply\");\n\nconst WebpackOptionsDefaulter = require(\"./WebpackOptionsDefaulter\");\n\nconst validateSchema = require(\"./validateSchema\");\n\nconst WebpackOptionsValidationError = require(\"./WebpackOptionsValidationError\");\n\nconst webpackOptionsSchema = require(\"../schemas/WebpackOptions.json\");\n\nconst RemovedPluginError = require(\"./RemovedPluginError\");\n\nconst version = require(\"../package.json\").version;\n/** @typedef {import(\"../declarations/WebpackOptions\").WebpackOptions} WebpackOptions */\n\n/**\n * @param {WebpackOptions} options options object\n * @param {function(Error=, Stats=): void=} callback callback\n * @returns {Compiler | MultiCompiler} the compiler object\n */\n\n\nconst webpack = (options, callback) => {\n  const webpackOptionsValidationErrors = validateSchema(webpackOptionsSchema, options);\n\n  if (webpackOptionsValidationErrors.length) {\n    throw new WebpackOptionsValidationError(webpackOptionsValidationErrors);\n  }\n\n  let compiler;\n\n  if (Array.isArray(options)) {\n    compiler = new MultiCompiler(Array.from(options).map(options => webpack(options)));\n  } else if (typeof options === \"object\") {\n    options = new WebpackOptionsDefaulter().process(options);\n    compiler = new Compiler(options.context);\n    compiler.options = options;\n    new NodeEnvironmentPlugin({\n      infrastructureLogging: options.infrastructureLogging\n    }).apply(compiler);\n\n    if (options.plugins && Array.isArray(options.plugins)) {\n      for (const plugin of options.plugins) {\n        if (typeof plugin === \"function\") {\n          plugin.call(compiler, compiler);\n        } else {\n          plugin.apply(compiler);\n        }\n      }\n    }\n\n    compiler.hooks.environment.call();\n    compiler.hooks.afterEnvironment.call();\n    compiler.options = new WebpackOptionsApply().process(options, compiler);\n  } else {\n    throw new Error(\"Invalid argument: options\");\n  }\n\n  if (callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"Invalid argument: callback\");\n    }\n\n    if (options.watch === true || Array.isArray(options) && options.some(o => o.watch)) {\n      const watchOptions = Array.isArray(options) ? options.map(o => o.watchOptions || {}) : options.watchOptions || {};\n      return compiler.watch(watchOptions, callback);\n    }\n\n    compiler.run(callback);\n  }\n\n  return compiler;\n};\n\nexports = module.exports = webpack;\nexports.version = version;\nwebpack.WebpackOptionsDefaulter = WebpackOptionsDefaulter;\nwebpack.WebpackOptionsApply = WebpackOptionsApply;\nwebpack.Compiler = Compiler;\nwebpack.MultiCompiler = MultiCompiler;\nwebpack.NodeEnvironmentPlugin = NodeEnvironmentPlugin; // @ts-ignore Global @this directive is not supported\n\nwebpack.validate = validateSchema.bind(this, webpackOptionsSchema);\nwebpack.validateSchema = validateSchema;\nwebpack.WebpackOptionsValidationError = WebpackOptionsValidationError;\n\nconst exportPlugins = (obj, mappings) => {\n  for (const name of Object.keys(mappings)) {\n    Object.defineProperty(obj, name, {\n      configurable: false,\n      enumerable: true,\n      get: mappings[name]\n    });\n  }\n};\n\nexportPlugins(exports, {\n  AutomaticPrefetchPlugin: () => require(\"./AutomaticPrefetchPlugin\"),\n  BannerPlugin: () => require(\"./BannerPlugin\"),\n  CachePlugin: () => require(\"./CachePlugin\"),\n  ContextExclusionPlugin: () => require(\"./ContextExclusionPlugin\"),\n  ContextReplacementPlugin: () => require(\"./ContextReplacementPlugin\"),\n  DefinePlugin: () => require(\"./DefinePlugin\"),\n  Dependency: () => require(\"./Dependency\"),\n  DllPlugin: () => require(\"./DllPlugin\"),\n  DllReferencePlugin: () => require(\"./DllReferencePlugin\"),\n  EnvironmentPlugin: () => require(\"./EnvironmentPlugin\"),\n  EvalDevToolModulePlugin: () => require(\"./EvalDevToolModulePlugin\"),\n  EvalSourceMapDevToolPlugin: () => require(\"./EvalSourceMapDevToolPlugin\"),\n  ExtendedAPIPlugin: () => require(\"./ExtendedAPIPlugin\"),\n  ExternalsPlugin: () => require(\"./ExternalsPlugin\"),\n  HashedModuleIdsPlugin: () => require(\"./HashedModuleIdsPlugin\"),\n  HotModuleReplacementPlugin: () => require(\"./HotModuleReplacementPlugin\"),\n  IgnorePlugin: () => require(\"./IgnorePlugin\"),\n  LibraryTemplatePlugin: () => require(\"./LibraryTemplatePlugin\"),\n  LoaderOptionsPlugin: () => require(\"./LoaderOptionsPlugin\"),\n  LoaderTargetPlugin: () => require(\"./LoaderTargetPlugin\"),\n  MemoryOutputFileSystem: () => require(\"./MemoryOutputFileSystem\"),\n  Module: () => require(\"./Module\"),\n  ModuleFilenameHelpers: () => require(\"./ModuleFilenameHelpers\"),\n  NamedChunksPlugin: () => require(\"./NamedChunksPlugin\"),\n  NamedModulesPlugin: () => require(\"./NamedModulesPlugin\"),\n  NoEmitOnErrorsPlugin: () => require(\"./NoEmitOnErrorsPlugin\"),\n  NormalModuleReplacementPlugin: () => require(\"./NormalModuleReplacementPlugin\"),\n  PrefetchPlugin: () => require(\"./PrefetchPlugin\"),\n  ProgressPlugin: () => require(\"./ProgressPlugin\"),\n  ProvidePlugin: () => require(\"./ProvidePlugin\"),\n  SetVarMainTemplatePlugin: () => require(\"./SetVarMainTemplatePlugin\"),\n  SingleEntryPlugin: () => require(\"./SingleEntryPlugin\"),\n  SourceMapDevToolPlugin: () => require(\"./SourceMapDevToolPlugin\"),\n  Stats: () => require(\"./Stats\"),\n  Template: () => require(\"./Template\"),\n  UmdMainTemplatePlugin: () => require(\"./UmdMainTemplatePlugin\"),\n  WatchIgnorePlugin: () => require(\"./WatchIgnorePlugin\")\n});\nexportPlugins(exports.dependencies = {}, {\n  DependencyReference: () => require(\"./dependencies/DependencyReference\")\n});\nexportPlugins(exports.optimize = {}, {\n  AggressiveMergingPlugin: () => require(\"./optimize/AggressiveMergingPlugin\"),\n  AggressiveSplittingPlugin: () => require(\"./optimize/AggressiveSplittingPlugin\"),\n  ChunkModuleIdRangePlugin: () => require(\"./optimize/ChunkModuleIdRangePlugin\"),\n  LimitChunkCountPlugin: () => require(\"./optimize/LimitChunkCountPlugin\"),\n  MinChunkSizePlugin: () => require(\"./optimize/MinChunkSizePlugin\"),\n  ModuleConcatenationPlugin: () => require(\"./optimize/ModuleConcatenationPlugin\"),\n  OccurrenceOrderPlugin: () => require(\"./optimize/OccurrenceOrderPlugin\"),\n  OccurrenceModuleOrderPlugin: () => require(\"./optimize/OccurrenceModuleOrderPlugin\"),\n  OccurrenceChunkOrderPlugin: () => require(\"./optimize/OccurrenceChunkOrderPlugin\"),\n  RuntimeChunkPlugin: () => require(\"./optimize/RuntimeChunkPlugin\"),\n  SideEffectsFlagPlugin: () => require(\"./optimize/SideEffectsFlagPlugin\"),\n  SplitChunksPlugin: () => require(\"./optimize/SplitChunksPlugin\")\n});\nexportPlugins(exports.web = {}, {\n  FetchCompileWasmTemplatePlugin: () => require(\"./web/FetchCompileWasmTemplatePlugin\"),\n  JsonpTemplatePlugin: () => require(\"./web/JsonpTemplatePlugin\")\n});\nexportPlugins(exports.webworker = {}, {\n  WebWorkerTemplatePlugin: () => require(\"./webworker/WebWorkerTemplatePlugin\")\n});\nexportPlugins(exports.node = {}, {\n  NodeTemplatePlugin: () => require(\"./node/NodeTemplatePlugin\"),\n  ReadFileCompileWasmTemplatePlugin: () => require(\"./node/ReadFileCompileWasmTemplatePlugin\")\n});\nexportPlugins(exports.debug = {}, {\n  ProfilingPlugin: () => require(\"./debug/ProfilingPlugin\")\n});\nexportPlugins(exports.util = {}, {\n  createHash: () => require(\"./util/createHash\")\n});\n\nconst defineMissingPluginError = (namespace, pluginName, errorMessage) => {\n  Object.defineProperty(namespace, pluginName, {\n    configurable: false,\n    enumerable: true,\n\n    get() {\n      throw new RemovedPluginError(errorMessage);\n    }\n\n  });\n}; // TODO remove in webpack 5\n\n\ndefineMissingPluginError(exports.optimize, \"UglifyJsPlugin\", \"webpack.optimize.UglifyJsPlugin has been removed, please use config.optimization.minimize instead.\"); // TODO remove in webpack 5\n\ndefineMissingPluginError(exports.optimize, \"CommonsChunkPlugin\", \"webpack.optimize.CommonsChunkPlugin has been removed, please use config.optimization.splitChunks instead.\");","map":null,"metadata":{},"sourceType":"script"}