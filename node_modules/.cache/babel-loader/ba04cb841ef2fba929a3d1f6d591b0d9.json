{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst RequireResolveDependency = require(\"./RequireResolveDependency\");\n\nconst RequireResolveContextDependency = require(\"./RequireResolveContextDependency\");\n\nconst RequireResolveHeaderDependency = require(\"./RequireResolveHeaderDependency\");\n\nconst ContextDependencyHelpers = require(\"./ContextDependencyHelpers\");\n\nclass RequireResolveDependencyParserPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(parser) {\n    const options = this.options;\n\n    const process = (expr, weak) => {\n      if (expr.arguments.length !== 1) return;\n      const param = parser.evaluateExpression(expr.arguments[0]);\n\n      if (param.isConditional()) {\n        for (const option of param.options) {\n          const result = processItem(expr, option, weak);\n\n          if (result === undefined) {\n            processContext(expr, option, weak);\n          }\n        }\n\n        const dep = new RequireResolveHeaderDependency(expr.callee.range);\n        dep.loc = expr.loc;\n        parser.state.current.addDependency(dep);\n        return true;\n      } else {\n        const result = processItem(expr, param, weak);\n\n        if (result === undefined) {\n          processContext(expr, param, weak);\n        }\n\n        const dep = new RequireResolveHeaderDependency(expr.callee.range);\n        dep.loc = expr.loc;\n        parser.state.current.addDependency(dep);\n        return true;\n      }\n    };\n\n    const processItem = (expr, param, weak) => {\n      if (param.isString()) {\n        const dep = new RequireResolveDependency(param.string, param.range);\n        dep.loc = expr.loc;\n        dep.optional = !!parser.scope.inTry;\n        dep.weak = weak;\n        parser.state.current.addDependency(dep);\n        return true;\n      }\n    };\n\n    const processContext = (expr, param, weak) => {\n      const dep = ContextDependencyHelpers.create(RequireResolveContextDependency, param.range, param, expr, options, {\n        mode: weak ? \"weak\" : \"sync\"\n      }, parser);\n      if (!dep) return;\n      dep.loc = expr.loc;\n      dep.optional = !!parser.scope.inTry;\n      parser.state.current.addDependency(dep);\n      return true;\n    };\n\n    parser.hooks.call.for(\"require.resolve\").tap(\"RequireResolveDependencyParserPlugin\", expr => {\n      return process(expr, false);\n    });\n    parser.hooks.call.for(\"require.resolveWeak\").tap(\"RequireResolveDependencyParserPlugin\", expr => {\n      return process(expr, true);\n    });\n  }\n\n}\n\nmodule.exports = RequireResolveDependencyParserPlugin;","map":null,"metadata":{},"sourceType":"script"}