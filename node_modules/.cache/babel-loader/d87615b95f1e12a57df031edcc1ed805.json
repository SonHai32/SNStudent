{"ast":null,"code":"/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n\"use strict\";\n\nconst ParserHelpers = require(\"../ParserHelpers\");\n\nconst WebpackError = require(\"../WebpackError\");\n\nclass SystemPlugin {\n  constructor(options) {\n    this.options = options;\n  }\n\n  apply(compiler) {\n    compiler.hooks.compilation.tap(\"SystemPlugin\", (compilation, {\n      normalModuleFactory\n    }) => {\n      const handler = (parser, parserOptions) => {\n        if (parserOptions.system !== undefined && !parserOptions.system) return;\n        const shouldWarn = parserOptions.system === undefined;\n\n        const setNotSupported = name => {\n          parser.hooks.evaluateTypeof.for(name).tap(\"SystemPlugin\", ParserHelpers.evaluateToString(\"undefined\"));\n          parser.hooks.expression.for(name).tap(\"SystemPlugin\", ParserHelpers.expressionIsUnsupported(parser, name + \" is not supported by webpack.\"));\n        };\n\n        parser.hooks.typeof.for(\"System.import\").tap(\"SystemPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"function\")));\n        parser.hooks.evaluateTypeof.for(\"System.import\").tap(\"SystemPlugin\", ParserHelpers.evaluateToString(\"function\"));\n        parser.hooks.typeof.for(\"System\").tap(\"SystemPlugin\", ParserHelpers.toConstantDependency(parser, JSON.stringify(\"object\")));\n        parser.hooks.evaluateTypeof.for(\"System\").tap(\"SystemPlugin\", ParserHelpers.evaluateToString(\"object\"));\n        setNotSupported(\"System.set\");\n        setNotSupported(\"System.get\");\n        setNotSupported(\"System.register\");\n        parser.hooks.expression.for(\"System\").tap(\"SystemPlugin\", () => {\n          const systemPolyfillRequire = ParserHelpers.requireFileAsExpression(parser.state.module.context, require.resolve(\"../../buildin/system\"));\n          return ParserHelpers.addParsedVariableToModule(parser, \"System\", systemPolyfillRequire);\n        });\n        parser.hooks.call.for(\"System.import\").tap(\"SystemPlugin\", expr => {\n          if (shouldWarn) {\n            parser.state.module.warnings.push(new SystemImportDeprecationWarning(parser.state.module, expr.loc));\n          }\n\n          return parser.hooks.importCall.call(expr);\n        });\n      };\n\n      normalModuleFactory.hooks.parser.for(\"javascript/auto\").tap(\"SystemPlugin\", handler);\n      normalModuleFactory.hooks.parser.for(\"javascript/dynamic\").tap(\"SystemPlugin\", handler);\n    });\n  }\n\n}\n\nclass SystemImportDeprecationWarning extends WebpackError {\n  constructor(module, loc) {\n    super(\"System.import() is deprecated and will be removed soon. Use import() instead.\\n\" + \"For more info visit https://webpack.js.org/guides/code-splitting/\");\n    this.name = \"SystemImportDeprecationWarning\";\n    this.module = module;\n    this.loc = loc;\n    Error.captureStackTrace(this, this.constructor);\n  }\n\n}\n\nmodule.exports = SystemPlugin;","map":null,"metadata":{},"sourceType":"script"}